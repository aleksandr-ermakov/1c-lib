// Заполняет таблицу случайными значениями
//
// Параметры:
//  ЗаполняемаяТаблица				 - ТаблицаЗначений	 - Заполняемая таблица
//  ЗаполняемыеКолонки			 - Строка			 - Имена заполняемых колонок, через запятые. Если не указан - заполняются все колонки.
//  ПереопределениеТиповКолонок	 - Соответствие		 - Типы значений, которыми заполняются колонки. 
//		Если не указан, или заполняемая колонка отсутствует в соответствии, типы определяются типом значений колонки.
//		* Ключ		 - Строка		 - Имя колонки
//		* Значение	 - ОписаниеТипов - Типы случайных значений для заполнения колонки
//  ИспользоватьНеопределено	 - Булево			 - Если колонка составного типа - будут присутствовать значения Неопределено.
//
Процедура ЗаполнитьТаблицуЗначенийСлучайнымиЗначениями(
	ЗаполняемаяТаблица, 
	Знач ЗаполняемыеКолонки = "", 
	ПереопределениеТиповКолонок = Неопределено, 
	ИспользоватьНеопределено = Истина) Экспорт

	Если Ложь Тогда 
		ЗаполняемаяТаблица = Новый ТаблицаЗначений;
	КонецЕсли;
	
	// Определяем, какие колонки будем заполнять
	Если ЗначениеЗаполнено(ЗаполняемыеКолонки) Тогда
		ИменаЗаполняемыхКолонок = СтрРазделить(ЗаполняемыеКолонки, ", ", Ложь);
	Иначе
		ИменаЗаполняемыхКолонок = Новый Массив;
		Для каждого Колонка Из ЗаполняемаяТаблица.Колонки Цикл
			ИменаЗаполняемыхКолонок.Добавить(Колонка.Имя);
		КонецЦикла; 
	КонецЕсли; 	
	
	ОписанияТиповКолонок = Новый Соответствие;
	Для каждого ИмяКолонки Из ИменаЗаполняемыхКолонок Цикл
		Если ПереопределениеТиповКолонок <> Неопределено
			И ТипЗнч(ПереопределениеТиповКолонок[ИмяКолонки]) = Тип("ОписаниеТипов") Тогда
			ОписаниеТипаКолонки = ПереопределениеТиповКолонок[ИмяКолонки];
		Иначе
			ОписаниеТипаКолонки = ЗаполняемаяТаблица.Колонки[ИмяКолонки].ТипЗначения;
		КонецЕсли; 
		ОписанияТиповКолонок.Вставить(ИмяКолонки, ОписаниеТипаКолонки);
	КонецЦикла;
	
	КоличествоЗаполняемыхЗначений = ЗаполняемаяТаблица.Количество();
	
	Для каждого ИмяКолонки Из ИменаЗаполняемыхКолонок Цикл
		ОписанияТиповКолонки = ОписанияТиповКолонок[ИмяКолонки];
		СодержимоеКолонки = СлучайныеЗначения(
			ОписанияТиповКолонки, 
			КоличествоЗаполняемыхЗначений, 
			ИспользоватьНеопределено);
		ЗаполняемаяТаблица.ЗагрузитьКолонку(
			СодержимоеКолонки, 
			ИмяКолонки);
	КонецЦикла; 
	
КонецПроцедуры

// Получает коллекцию случайных значений заданного типа
// Поддерживаются типы:
//	* Число
//	* Строка
//	* Булево
//	* Дата
//	* УникальныйИдентификатор
//	* Null
//	* Неопределено
//
// Параметры:
//  ОписаниеТипов			 - ОписаниеТипов	 - Описание получаемого значения
//  КоличествоЭлементов		 - Число	 - Количество получаемых случайных значений
//  ИспользоватьНеопределено - Булево	 - Если получается значение составного типа, 
//											в коллекцию будут включаться значения Неопределено
// 
// Возвращаемое значение:
//   - Массив - Получаенные случайные значения
//
Функция СлучайныеЗначения(ОписаниеТипов, КоличествоЭлементов, ИспользоватьНеопределено = Истина)

	Если Ложь Тогда 
		ОписаниеТипов = новый ОписаниеТипов;
	КонецЕсли;
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	
	СлучайныеЗначения = Новый Массив;
	КоличествоТипов = ОписаниеТипов.Типы().Количество();
	
	Если КоличествоТипов = 1 Тогда
		
		Если ОписаниеТипов.СодержитТип(Тип("Число")) Тогда
			Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
				СлучайныеЗначения.Добавить(СлучайноеЧисло(ОписаниеТипов.КвалификаторыЧисла, ГенераторСлучайныхЧисел));				
			КонецЦикла; 
			
		ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Строка")) Тогда 	
			Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
				СлучайныеЗначения.Добавить(СлучайнаяСтрока(ОписаниеТипов.КвалификаторыСтроки, , , , , , ГенераторСлучайныхЧисел));				
			КонецЦикла; 
			
		ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Булево")) Тогда
			Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
				СлучайныеЗначения.Добавить(Булево(ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 1)));				
			КонецЦикла; 	
			
		ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
			Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
				СлучайныеЗначения.Добавить(СлучайнаяДата(ОписаниеТипов.КвалификаторыДаты, , , ГенераторСлучайныхЧисел));				
			КонецЦикла; 	
			
		ИначеЕсли ОписаниеТипов.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 	
			Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
				СлучайныеЗначения.Добавить(Новый УникальныйИдентификатор);				
			КонецЦикла; 
			
		ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Null")) Тогда 	
			Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
				СлучайныеЗначения.Добавить(NULL);				
			КонецЦикла; 
			
		Иначе
			СлучайныеЗначения = Новый Массив(КоличествоЭлементов);
			
		КонецЕсли;  
		
		
	ИначеЕсли КоличествоТипов > 1 Тогда
		
		ПолученоСлучайныхЗначений = 0;
		ВсегоТиповЗначений = КоличествоТипов;
		Если ИспользоватьНеопределено Тогда
			ВсегоТиповЗначений = ВсегоТиповЗначений + 1;
		КонецЕсли; 
		
		ТаблицаСортировки = Новый ТаблицаЗначений;
		ТаблицаСортировки.Колонки.Добавить("Ид",		 Новый ОписаниеТипов("УникальныйИдентификатор"));
		ТаблицаСортировки.Колонки.Добавить("Значение",	 ОписаниеТипов);
		
		СлучайныеЗначенияПодтипов = Новый Массив;
		Для Индекс = 0 По ОписаниеТипов.Типы().ВГраница() Цикл
			
			Если Индекс < ОписаниеТипов.Типы().ВГраница() Или ИспользоватьНеопределено Тогда
				КоличествоЗначенийПодтипа = Цел(КоличествоЭлементов / ВсегоТиповЗначений);
			Иначе
				КоличествоЗначенийПодтипа = КоличествоЭлементов - ПолученоСлучайныхЗначений;
			КонецЕсли; 
			
			Подтипы = Новый Массив;
			Подтипы.Добавить(ОписаниеТипов.Типы()[Индекс]);
			ОписаниеПодтипа = Новый ОписаниеТипов(
			Подтипы, 
			ОписаниеТипов.КвалификаторыЧисла,
			ОписаниеТипов.КвалификаторыСтроки,
			ОписаниеТипов.КвалификаторыДаты,
			ОписаниеТипов.КвалификаторыДвоичныхДанных);
			
			СлучайныеЗначенияПодтипа = СлучайныеЗначения(ОписаниеПодтипа, КоличествоЗначенийПодтипа, ИспользоватьНеопределено);
			Для каждого СлучайноеЗначение Из СлучайныеЗначенияПодтипа Цикл
				Позиция = ТаблицаСортировки.Добавить();
				Позиция.Ид = новый УникальныйИдентификатор;
				Позиция.Значение = СлучайноеЗначение;
			КонецЦикла;
			
			ПолученоСлучайныхЗначений = ПолученоСлучайныхЗначений + КоличествоЗначенийПодтипа;
			
		КонецЦикла; 	
		
		Если ИспользоватьНеопределено Тогда
			Для Счетчик = 1 По КоличествоЭлементов - ПолученоСлучайныхЗначений Цикл
				Позиция = ТаблицаСортировки.Добавить();
				Позиция.Ид = новый УникальныйИдентификатор;
				Позиция.Значение = Неопределено;
			КонецЦикла; 		
		КонецЕсли; 		
		
		ТаблицаСортировки.Сортировать("Ид");
		
		СлучайныеЗначения = ТаблицаСортировки.ВыгрузитьКолонку("Значение");
		
	Иначе
		Возврат Новый Массив(КоличествоЭлементов);
		
	КонецЕсли; 
	
	Возврат СлучайныеЗначения;

КонецФункции // ПолучитьМассивСлучайныхЗначений()
 
// Получает случайное число по заданному описанию типа.
// Формирует случайную дробную часть.
//
// Параметры:
//  КвалификаторыЧисла		 - КвалификаторыЧисла	 - Описание получаемого числа. 
//		В общем случае, генерируется число вплоть до 4294967295 (см. ГенераторСлучайныхЧисел.СлучайноеЧисло())
//		При формировании числа используются параметры квалификаторав числа:
//		* ДопустимыйЗнак			 - Для получения положительного или отрицателного числа.
//		* Разрядность				 - Если не указана - получается число 
//		* РазрядностьДробнойЧасти	 - Если не указана - генерируются челые числа.
//  ГенераторСлучайныхЧисел	 - ГенераторСлучайныхЧисел	 - Если не задан, инициализируется в функции, используется повторно
// 
// Возвращаемое значение:
//   - Число   - Полученное случайное число
//
Функция СлучайноеЧисло(КвалификаторыЧисла, ГенераторСлучайныхЧисел = Неопределено)
	
	Если Ложь Тогда КвалификаторыЧисла = новый КвалификаторыЧисла КонецЕсли;
	
	ЧислоРезультат = 0;
	
	Если ГенераторСлучайныхЧисел = Неопределено Тогда
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЕсли; 
	
	МаксВерхГраница = Pow(2, 32) - 1;	// см. ГенераторСлучайныхЧисел.СлучайноеЧисло()
	
	ВерхняяГраница = МаксВерхГраница;
	
	ЧислоРезультат = ГенераторСлучайныхЧисел.СлучайноеЧисло(, ВерхняяГраница);
	
	Если КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой Тогда
		ЧислоРезультат = ЧислоРезультат - ГенераторСлучайныхЧисел.СлучайноеЧисло(, Цел(ВерхняяГраница / 2));
	КонецЕсли; 
	
	Если КвалификаторыЧисла.Разрядность <> 0 Тогда
		ЧислоРезультат = ЧислоРезультат % Pow(10, КвалификаторыЧисла.Разрядность);
	КонецЕсли; 
	
	Если КвалификаторыЧисла.РазрядностьДробнойЧасти <> 0 Тогда
		ЧислоРезультат = ЧислоРезультат / Pow(10, КвалификаторыЧисла.РазрядностьДробнойЧасти);
	КонецЕсли; 
	
	Возврат ЧислоРезультат

КонецФункции // СлучайноеЧисло()

// Получает случайную строку
//
// Параметры:
//  КвалификаторыСтроки		 - КвалификаторыСтроки	 - Описание типа получаемой строки. Получаются строки длиной не более 128 символов.
//  ИспользоватьЛатиницу	 - Булево	 - В состав строки будут входить символы латиницы
//  ИспользоватьКириллицу	 - Булево	 - В состав строки будут входить символы кириллицы
//  ИспользоватьЦифры		 - Булево	 - В состав строки будут входить цифры
//  ИспользоватьПрописные	 - Булево	 - В состав строки будут входить как строчные, так и прописные буквы. Если Ложь - прописные буквы не используются.
//  ЧастотаПробела			 - Число	 - Сколько символов в среднем отделяется пробелом. 0 - пробел не используется.
//  ГенераторСлучайныхЧисел	 - ГенераторСлучайныхЧисел	 - Если не задан, инициализируется в функции, используется повторно
//	КоллекцияСимволов		 - Массив	 - Коллекция символов, которая генерируется по входящим параметрам использования символов. 
//		Используется повторно.
//		Может быть определена явно для переопределения набора символов для формирования строки.
// 
// Возвращаемое значение:
//   - Строка   - Строка, состоящая из случайных символов
//
Функция СлучайнаяСтрока(
	КвалификаторыСтроки,
	ИспользоватьЛатиницу	 = Истина,
	ИспользоватьКириллицу	 = Истина,
	ИспользоватьЦифры		 = Истина,
	ИспользоватьПрописные	 = Истина,
	ЧастотаПробела			 = 8,
	ГенераторСлучайныхЧисел	 = Неопределено,
	КоллекцияСимволов		 = Неопределено)
 
	Если Ложь Тогда КвалификаторыСтроки = новый КвалификаторыСтроки КонецЕсли;
	
	СтрокаРезультат = "";
	
	Если ГенераторСлучайныхЧисел = Неопределено Тогда
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЕсли; 
	
	Если КоллекцияСимволов = Неопределено Тогда
	
		КоллекцияСимволов = Новый Массив;
		
		Если ИспользоватьЛатиницу Тогда
			Для КодСимвола = КодСимвола("a") По КодСимвола("z") Цикл КоллекцияСимволов.Добавить(Символ(КодСимвола)) КонецЦикла; 
		    Если ИспользоватьПрописные Тогда
				Для КодСимвола = КодСимвола("A") По КодСимвола("Z") Цикл КоллекцияСимволов.Добавить(Символ(КодСимвола)) КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		Если ИспользоватьКириллицу Тогда
			Для КодСимвола = КодСимвола("а") По КодСимвола("я") Цикл КоллекцияСимволов.Добавить(Символ(КодСимвола)) КонецЦикла;
			КоллекцияСимволов.Добавить("ё");
		    Если ИспользоватьПрописные Тогда
				Для КодСимвола = КодСимвола("А") По КодСимвола("Я") Цикл КоллекцияСимволов.Добавить(Символ(КодСимвола)) КонецЦикла; 
				КоллекцияСимволов.Добавить("Ё");
			КонецЕсли; 
		КонецЕсли; 
		
		Если ИспользоватьЦифры Тогда
			Для КодСимвола = КодСимвола("0") По КодСимвола("9") Цикл КоллекцияСимволов.Добавить(Символ(КодСимвола)) КонецЦикла;
		КонецЕсли;
	
	КонецЕсли; 
	
	Если КоллекцияСимволов.ВГраница() = 0 Тогда Возврат "" КонецЕсли; 
	
	МаксДлинаСтроки = 128;
	
	ДлинаСтроки = ?(КвалификаторыСтроки.Длина = 0, МаксДлинаСтроки, КвалификаторыСтроки.Длина);
	Если КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
		ДлинаСтроки = ГенераторСлучайныхЧисел.СлучайноеЧисло(, ДлинаСтроки);
	КонецЕсли; 	
	
	СоставСтроки = Новый Массив;
	МаксИндексПулаСимволов = КоллекцияСимволов.ВГраница();
	Для ПозицияСтроки = 1 По ДлинаСтроки Цикл
		СоставСтроки.Добавить(КоллекцияСимволов[ГенераторСлучайныхЧисел.СлучайноеЧисло(, МаксИндексПулаСимволов)]);
		Если ЧастотаПробела <> 0 
			и ГенераторСлучайныхЧисел.СлучайноеЧисло(1, ЧастотаПробела) = 1
			и ПозицияСтроки < ДлинаСтроки Тогда
			СоставСтроки.Добавить(" ");
			ПозицияСтроки = ПозицияСтроки + 1;
		КонецЕсли; 
	КонецЦикла;
	СтрокаРезультат = СтрСоединить(СоставСтроки);
	
	Возврат СтрокаРезультат;
 
КонецФункции // СлучайнаяСтрока()
  
// Формирует случайную дату
//
// Параметры:
//  КвалификаторыДаты		 - КвалификаторыДаты	 - Описание получаемой даты
//  МинимальнаяДата			 - Дата	 - Минимальная граница получаемых дат
//  МаксимальнаяДата		 - Дата	 - Максимальная граница получаемых дат
//  ГенераторСлучайныхЧисел	 - ГенераторСлучайныхЧисел	 - Если не задан, инициализируется в функции, используется повторно
// 
// Возвращаемое значение:
//   - Дат   - Полученная случайная дата
//
Функция СлучайнаяДата(КвалификаторыДаты, МинимальнаяДата = '00010101', Знач МаксимальнаяДата = '39991231235959', ГенераторСлучайныхЧисел = Неопределено)

	Если Ложь Тогда КвалификаторыДаты = новый КвалификаторыДаты КонецЕсли;
	
	ДатаРезультат = '00010101';
	
	Если ГенераторСлучайныхЧисел = Неопределено Тогда
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЕсли; 
	
	Если КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
		НижняяГраница	 = Дата(1, 1, 1, Час(МинимальнаяДата), Минута(МинимальнаяДата), Секунда(МинимальнаяДата)) - '00010101';
		ВерхняяГраница	 = Дата(1, 1, 1, Час(МаксимальнаяДата), Минута(МаксимальнаяДата), Секунда(МаксимальнаяДата)) - '00010101';
		ДатаРезультат = '00010101' + ГенераторСлучайныхЧисел.СлучайноеЧисло(НижняяГраница, ВерхняяГраница);
	Иначе
		РазностьДатСекунд = МаксимальнаяДата - МинимальнаяДата; // Максимально 126 196 185 599
		МаксВерхняяГраница = Pow(2, 32) - 1;	// см. ГенераторСлучайныхЧисел.СлучайноеЧисло()
		Если РазностьДатСекунд > МаксВерхняяГраница  Тогда
			БольшоеСлучайноеЧисло = 
			ГенераторСлучайныхЧисел.СлучайноеЧисло(pow(2, 31), pow(2, 32) - 1) * pow(2, 32) 
			+ ГенераторСлучайныхЧисел.СлучайноеЧисло(pow(2, 31), pow(2, 32) - 1);
			ДатаРезультат = МинимальнаяДата + БольшоеСлучайноеЧисло % РазностьДатСекунд;
		Иначе
			ДатаРезультат = МинимальнаяДата + ГенераторСлучайныхЧисел.СлучайноеЧисло(, РазностьДатСекунд)
		КонецЕсли; 
		Если КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
			ДатаРезультат = НачалоДня(ДатаРезультат);
		КонецЕсли; 	
	КонецЕсли; 
	
	Возврат	ДатаРезультат;

КонецФункции // СлучайнаяДата()