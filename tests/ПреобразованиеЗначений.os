// BSLLS-off
// cSpell:disable

#Использовать asserts

Перем ЮнитТестирование;
Перем Данные;
Перем Модуль;
Перем ИмяМодуля;
Перем ОбщегоНазначенияКлиентСервер;

// основной метод для тестирования
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТаблицаЗначенийИзСоответствия");
	
	ВсеТесты.Добавить("ТаблицаЗначенийИзСпискаЗначений");
	
	ВсеТесты.Добавить("ТаблицаЗначенийИзМассива");

	ВсеТесты.Добавить("СтруктураИзДереваЗначений");
	
	Возврат ВсеТесты;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	Контекст = Новый Структура;

	Модуль = ЗагрузитьСценарий(
		".\Общие\ОбщиеМодули\ОбщегоНазначения\ПреобразованиеЗначений.bsl", 
		Контекст
	);
	ИмяМодуля = "ПреобразованиеЗначений";

	ОбщегоНазначенияКлиентСервер = ЗагрузитьСценарий(
		".\Общие\ОбщиеМодули\ОбщегоНазначения\ОбщегоНазначенияКлиентСервер.bsl", 
		Контекст
	);

КонецПроцедуры

#Область ТаблицаЗначенийИзСоответствия

Процедура ТаблицаЗначенийИзСоответствия() Экспорт

	ИмяМетода = "ТаблицаЗначенийИзСоответствия";

	// Исключение, если передано не соответствие
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(Неопределено);
	Ожидаем
		.Что(Модуль, "Исключение, если передано не соответствие")
		.Метод(ИмяМетода, Параметры).ВыбрасываетИсключение();
	
	// Пустая шаблонная таблица
	Результат = Модуль.ТаблицаЗначенийИзСоответствия(Новый Соответствие);
	Ожидаем.Что(Результат, "Получили таблицу").ИмеетТип("ТаблицаЗначений");
	Ожидаем.Что(Результат, "Она пустая").Не_().Заполнено();
	Ожидаем.Что(Результат.Колонки[0].Имя).Равно("Ключ");
	Ожидаем.Что(Результат.Колонки[1].Имя).Равно("Значение");
	
	// Пустая таблица с именами колонок
	Результат = Модуль.ТаблицаЗначенийИзСоответствия(Новый Соответствие, "Первая, Вторая");
	Ожидаем.Что(Результат, "Получили таблицу").ИмеетТип("ТаблицаЗначений");
	Ожидаем.Что(Результат, "Она пустая").Не_().Заполнено();
	Ожидаем.Что(Результат.Колонки[0].Имя).Равно("Первая");
	Ожидаем.Что(Результат.Колонки[1].Имя).Равно("Вторая");
	
	#Область ПробнаяТаблица
	
	Соответствие = Новый Соответствие;
	Соответствие[123] = "АБВ";
	Соответствие[456] = "ГДЕ";

	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Цифры",	 Новый ОписаниеТипов("Число"));
	ОжидаемоеЗначение.Колонки.Добавить("Буквы", Новый ОписаниеТипов("Строка"));
	Для каждого ЭлементСответствия Из Соответствие Цикл
		Строка = ОжидаемоеЗначение.Добавить();
		Строка[0] = ЭлементСответствия.Ключ;
		Строка[1] = ЭлементСответствия.Значение;
	КонецЦикла; 

	Результат = Модуль.ТаблицаЗначенийИзСоответствия(Соответствие, "Цифры, Буквы");
	Ожидаем.Что(Результат, "Получили таблицу").ИмеетТип("ТаблицаЗначений");
	Ожидаем.Что(Результат, "Она заполнена").Заполнено();
	Ожидаем.Что(Результат.Количество()).Равно(Соответствие.Количество());
	Ожидаем.Что(Результат.Колонки[0].Имя).Равно("Цифры");
	Ожидаем.Что(Результат.Колонки[1].Имя).Равно("Буквы");

	Для каждого СтрокаТаблицы Из Результат Цикл
		Ожидаем.Что(Соответствие[СтрокаТаблицы[0]]).Равно(СтрокаТаблицы[1]);
	КонецЦикла;
	
	#КонецОбласти // ПробнаяТаблица

КонецПроцедуры

#КонецОбласти // ТаблицаЗначенийИзСоответствия

Процедура ТаблицаЗначенийИзСпискаЗначений() Экспорт

	ИмяМетода = "ТаблицаЗначенийИзСпискаЗначений";

	// Исключение, если передан не список значений
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(Неопределено);
	Ожидаем
		.Что(Модуль, "Исключение, если передан не список значений")
		.Метод(ИмяМетода, Параметры).ВыбрасываетИсключение();

	#Область Полный

	Список = Новый СписокЗначений;
	Список.Добавить(123, "Цифры", Истина);
	Список.Добавить("АБВ", "Буквы", Ложь);
	Список.Добавить(ТекущаяДата(), "Дата", Истина);

	Типы = Новый Массив;
	Типы.Добавить(Тип("Число"));
	Типы.Добавить(Тип("Строка"));
	Типы.Добавить(Тип("Дата"));
	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Значение",		 Новый ОписаниеТипов(Типы));
	ОжидаемоеЗначение.Колонки.Добавить("Представление",	 Новый ОписаниеТипов("Строка"));	
	ОжидаемоеЗначение.Колонки.Добавить("Пометка",		 Новый ОписаниеТипов("Булево"));	
	Для каждого ЭлементСписка Из Список Цикл
		СтрокаТаблицы = ОжидаемоеЗначение.Добавить();
		СтрокаТаблицы.Значение		 = ЭлементСписка.Значение;
		СтрокаТаблицы.Представление	 = ЭлементСписка.Представление;
		СтрокаТаблицы.Пометка			 = ЭлементСписка.Пометка;
	КонецЦикла;

	Результат = Модуль.ТаблицаЗначенийИзСпискаЗначений(Список);

	Ожидаем.Что(Результат, "Получили таблицу").ИмеетТип("ТаблицаЗначений");
	Ожидаем.Что(Результат, "Она заполнена").Заполнено();
	Ожидаем.Что(Результат.Количество()).Равно(ОжидаемоеЗначение.Количество());
	Ожидаем.Что(Результат.Колонки.Количество()).Равно(ОжидаемоеЗначение.Колонки.Количество());
	Для ИндексСтроки = 0 По ОжидаемоеЗначение.Количество() - 1 Цикл
		Для ИндексКолонки = 0 По ОжидаемоеЗначение.Колонки.Количество() - 1 Цикл
			Ожидаем
				.Что(Результат[ИндексСтроки][ИндексКолонки])
				.Равно(ОжидаемоеЗначение[ИндексСтроки][ИндексКолонки]);
		КонецЦикла;
	КонецЦикла;

	#КонецОбласти

КонецПроцедуры

Процедура ТаблицаЗначенийИзМассива() Экспорт

	ИмяМетода = "ТаблицаЗначенийИзМассива";

	// Исключение, если передан не список значений
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(Неопределено);
	Ожидаем
		.Что(Модуль, "Исключение, если передан не список значений")
		.Метод(ИмяМетода, Параметры).ВыбрасываетИсключение();

	#Область Полный

	Массив = Новый Массив;
	Массив.Добавить(123);
	Массив.Добавить("АБВ");
	Массив.Добавить('20010101');

	ИмяКолонки = "Колонка";

	Типы = Новый Массив;
	Типы.Добавить(Тип("Число"));
	Типы.Добавить(Тип("Строка"));
	Типы.Добавить(Тип("Дата"));
	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(Типы));
	Для каждого ЭлементМассива Из Массив Цикл
		ОжидаемоеЗначение.Добавить()[0] = ЭлементМассива;	
	КонецЦикла; 

	Результат = Модуль.ТаблицаЗначенийИзМассива(Массив, ИмяКолонки);

	Ожидаем.Что(Результат, "Получили таблицу").ИмеетТип("ТаблицаЗначений");
	Ожидаем.Что(Результат, "Она заполнена").Заполнено();
	Ожидаем.Что(Результат.Количество(), "Проверяем количество строк").Равно(ОжидаемоеЗначение.Количество());
	Ожидаем.Что(Результат.Колонки.Количество(), "Проверяем количество колонок").Равно(1);
	Ожидаем.Что(Результат.Колонки[0].Имя, "Проверяем имя колонки").Равно(ИмяКолонки);
	Для ИндексСтроки = 0 По ОжидаемоеЗначение.Количество() - 1 Цикл
		Ожидаем
			.Что(Результат[ИндексСтроки][0])
			.Равно(ОжидаемоеЗначение[ИндексСтроки][0]);
	КонецЦикла;
	
	#КонецОбласти

КонецПроцедуры

Процедура СтруктураИзДереваЗначений() Экспорт

	ИмяМетода = "СтруктураИзДереваЗначений";

	ТекстСообщения = "Пустое дерево";
	ДеревоЗначенией = Новый ДеревоЗначений;
	КлючСтроки	 = "Строки";
	КлючРодитель = "Родитель";
	КлючВладелец = "Владелец";
	Результат = Модуль.СтруктураИзДереваЗначений(ДеревоЗначенией, , КлючСтроки, КлючРодитель, КлючВладелец);
	Ожидаем
		.Что(Результат, ТекстСообщения)
		.ИмеетТип("Структура");
	Ожидаем
		.Что(Результат.Свойство(КлючСтроки), "Есть свойство Строки")
		.ЭтоИстина();
	Ожидаем
		.Что(Результат.Количество(), "Только один элемент")
		.Равно(1);
	Ожидаем.Что(Результат[КлючСтроки]).Не_().Заполнено();

	ТекстСообщения = "Небольшое дерево";
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
		ДеревоЗначений.Строки.Добавить()[0] = "0";
			ДеревоЗначений.Строки[0].Строки.Добавить()[0] = "0.0";
		ДеревоЗначений.Строки.Добавить()[0] = "1";
			ДеревоЗначений.Строки[1].Строки.Добавить()[0] = "1.0";
			ДеревоЗначений.Строки[1].Строки.Добавить()[0] = "1.1";
				ДеревоЗначений.Строки[1].Строки[1].Строки.Добавить()[0] = "1.1.1";
	ДеревоЗначений.Колонки.Добавить("НенужнаяКолонка");
	КлючСтроки	 = "Строки";
	КлючРодитель = "Родитель";
	КлючВладелец = "Владелец";
	Результат = Модуль.СтруктураИзДереваЗначений(ДеревоЗначений, "Значение", КлючСтроки, КлючРодитель, КлючВладелец);

			

КонецПроцедуры

ПередЗапускомТеста();

#Область РучноеВыполнение

ТекстСообщения = "Небольшое дерево";
ДеревоЗначений = Новый ДеревоЗначений;
ДеревоЗначений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Строки.Добавить()[0] = "0";
		ДеревоЗначений.Строки[0].Строки.Добавить()[0] = "0.0";
	ДеревоЗначений.Строки.Добавить()[0] = "1";
		ДеревоЗначений.Строки[1].Строки.Добавить()[0] = "1.0";
		ДеревоЗначений.Строки[1].Строки.Добавить()[0] = "1.1";
			ДеревоЗначений.Строки[1].Строки[1].Строки.Добавить()[0] = "1.1.1";
ДеревоЗначений.Колонки.Добавить("НенужнаяКолонка");
КлючСтроки	 = "Строки";
КлючРодитель = "Родитель";
КлючВладелец = "Владелец";
Результат = Модуль.СтруктураИзДереваЗначений(ДеревоЗначений, "Значение", КлючСтроки, КлючРодитель, КлючВладелец);



#КонецОбласти // РучноеВыполнение