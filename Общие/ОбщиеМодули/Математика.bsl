
// Рассчитывает факториал
//
// Параметры:
//  Основание	 - Число	 - Основание для расчета факториала
//  Факториалы	 - Массив	 - Расчитанные факториалы для повторного использования.
// 
// Возвращаемое значение:
//  Число - Рассчитаный факториал
//
Функция Факториал(Основание, Факториалы = Неопределено)

	Если Факториалы = Неопределено Тогда
		Факториалы = Новый Массив(2);
		Факториалы[0] = 1;
		Факториалы[1] = 1;
	КонецЕсли; 
	
	Если Факториалы.ВГраница() < Основание Тогда
		Факториалы.Вставить(Основание, Основание * Факториал(Основание - 1, Факториалы));
	КонецЕсли;
	
	Возврат Факториалы[Основание];

КонецФункции // Факториал()

// Получает все n! возможных перестановок массива
//
// Параметры:
//  Массив	 - Массив	 - Исходный массив
// 
// Возвращаемое значение:
//  Массив - Перечень перестановок. Элемент: Массив - перестановка исходного массива.
//
Функция ВсеПерестановкиМассива(Массив)
	
	КешФакториалы = Неопределено;
	Перестановки = Новый Массив;
	Для ИндексПерестановки = 0 По Факториал(Массив.Количество(), КешФакториалы) - 1 Цикл
		КопияМассива = Новый Массив(Массив.Количество());
		Для Индекс = 0 По Массив.ВГраница() Цикл
			КопияМассива[Индекс] = Массив[Индекс];
		КонецЦикла;
		Перестановки.Добавить(ПерестановкаМассива(КопияМассива, ИндексПерестановки, КешФакториалы));
	КонецЦикла; 	
	Возврат Перестановки;

КонецФункции // ВсеПерестановкиМассива()

// Получает перестановку массива
// - комбинацию, полученную перестановкой элементов исходного массива.
//
// Параметры:
//  Массив				 - Массив	 - Исходный массив
//  ИндексПерестановки	 - Число	 - Индекс номера перестановки. Для массива Mn: [0, n!)
//									Если не указан - используется случайный.
//  Факториалы			 - Массив	 - Рассчитанные факториалы для повторного использования.
// 
// Возвращаемое значение:
//  Массив - Результат перестановки
//
Функция ПерестановкаМассива(Массив, ИндексПерестановки = Неопределено, Факториалы = Неопределено)

	Если ИндексПерестановки = Неопределено Тогда
		
		Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
		ФакториалКоличества = Факториал(Массив.Количество(), Факториалы);
		ИндексПерестановки = Генератор.СлучайноеЧисло(1, ФакториалКоличества) - 1;
		
	КонецЕсли; 
		
	КоличествоЭлементов = Массив.Количество();
	РазбегПерестановки = ИндексПерестановки + 1;	// РазбегПерестановки, в начале = НомерПерестановки
	Результат = Новый Массив;
	Для НомерЭлемента = 1 По Массив.Количество() Цикл
		
		ФакториалОстатка = Факториал(КоличествоЭлементов - НомерЭлемента, Факториалы);	// ФакториалОстатка
		ИндексЗамены = Цел((РазбегПерестановки + ФакториалОстатка - 1) / ФакториалОстатка) - 1;
		Результат.Добавить(СраститьМассив(Массив, ИндексЗамены, 1)[0]);
	    РазбегПерестановки = РазбегПерестановки - ИндексЗамены * ФакториалОстатка;
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(Массив) Тогда
		Результат.Добавить(Массив[0]);		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции // ПерестановкаМассива()

// Округляет число вверх.
//
// Параметры:
//	Число		 - Число - Округляемое число
//	Разрядность	 - Число - Число разрядов после запятой при округлении.
//
// Возвращаемое значение:
//	Число
//
Функция ОкрВверх(Число, Разрядность = 0) Экспорт

	Если ТипЗнч(Число) <> Тип("Число") Тогда 
		ВызватьИсключение "Параметр Число: Ожидается число";
	КонецЕсли;
	Если ТипЗнч(Число) <> Тип("Число") 
		Или Разрядность <> Цел(Разрядность) Тогда 
		ВызватьИсключение "Параметр Разрядность: Ожидается целое число";
	КонецЕсли;

	Знак = ?(Число < 0, -1, 1);

	Если Разрядность = 0 Тогда
		Возврат ?(Число = Цел(Число), Число, Цел(Число) + 1 * Знак);
	КонецЕсли;

	Смещение = Pow(10, Разрядность);
	Операнд = Число * Смещение;
	Операнд = ?(Операнд = Цел(Операнд), Операнд, Цел(Операнд) + 1 * Знак);
	Операнд = Операнд / Смещение;

	Возврат Операнд;

КонецФункции

#Область СлужебныеПроцедурыИФункции

Функция СраститьМассив(Массив, Индекс = 0, КоличествоУдаляемых = 0, Вставка = Неопределено)

	Модуль = ЗагрузитьСценарий(".\ОбщегоНазначения\ОбщегоНазначенияКлиентСервер.bsl");
	Возврат Модуль.СраститьМассив(Массив, Индекс, КоличествоУдаляемых, Вставка);

КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
