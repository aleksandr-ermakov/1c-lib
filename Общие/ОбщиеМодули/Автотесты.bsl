#Область Автотест

// Чтобы выполнить автотест, нужно:
// - описать тесты в Автотест_ПереченьТестов()
// - выполнить Автотест()

// Здесь описываются проводимые тесты
// 
// Возвращаемое значение:
//  Массив - Элемент: Структура. см. функцию Автотест_НовыйАвтотестМетода()
//
Функция Автотест_ПереченьТестов()

	ПереченьАвтотестов = Новый Массив;	// Массив структур, см. НовыйАвтотестМетода() 
	
	#Область Метод
	//
	//ИмяМетода = "ИмяИсполняемогоМетода";
	//
	//Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	//Автотест.ИмяМетода				 = ИмяМетода;
	//Автотест.Описание				 = "Описание автотеста";
	//Автотест.Использование			 = Истина;
	//#Область ОписаниеАвтотеста
	//Автотест.ПараметрыВызова.Добавить("Параметр метода");
	//Автотест.ОжидаетсяЗначение		 = Ложь;
	//Автотест.ОжидаемоеЗначение		 = Неопределено;
	//Автотест.ОжидаетсяИсключение	 = Ложь;
	//Автотест.КодПроверкиРезультата	 = "";
	//#КонецОбласти // ОписаниеАвтотеста 
	//
	#КонецОбласти // Метод 
		
	Возврат ПереченьАвтотестов;
	
КонецФункции // Автотест_ПереченьТестов()

// Выполняет перечень автотестов и выводит результат.
//
// #СДЕЛАТЬ Работу на клиенте
//  #СДЕЛАТЬ Процедуру теста - в отдельную процедуре
//  #СДЕЛАТЬ Вывод в сообщения - отдельно
//  #СДЕЛАТЬ Успешные тесты выводить по параметру
//
// Параметры:
//  ПереченьАвтотестов	 - Массив	 - Перечень тестов. см. НовыйАвтотестМетода()
//
Процедура Автотест(ПереченьАвтотестов = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если ПереченьАвтотестов = Неопределено Тогда
		ПереченьАвтотестов = Автотест_ПереченьТестов();
	КонецЕсли

	#Область ВыполнениеАвтотеста
	
	ПротоколТеста = Новый Массив;
	
	НомерТеста = 0;
	Для каждого Автотест Из ПереченьАвтотестов Цикл
		
		Если Не Автотест.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		НомерТеста = НомерТеста + 1;
		Успех = Истина;
		
		ИмяМетода				 = Автотест.ИмяМетода;
		ПараметрыВызова			 = Автотест.ПараметрыВызова;
		ОжидаетсяЗначение		 = Автотест.ОжидаетсяЗначение;
		ОжидаемоеЗначение		 = Автотест.ОжидаемоеЗначение;
		ОжидаетсяИсключение		 = Автотест.ОжидаетсяИсключение;
		КодПроверкиРезультата	 = Автотест.КодПроверкиРезультата;
		Описание				 = Автотест.Описание;
		
		СтрокаПараметрыВызова = Новый Массив;
		Для Индекс = 0 По ПараметрыВызова.ВГраница() Цикл
			СтрокаПараметрыВызова.Добавить(СтрШаблон("ПараметрыВызова[%1]", Формат(Индекс, "ЧН=0")));
		КонецЦикла;
		СтрокаПараметрыВызова = СтрСоединить(СтрокаПараметрыВызова, ", ");
		
		Если ОжидаетсяЗначение Тогда
			ИсполняемыйМетод = СтрШаблон("ПолученноеЗначение = %1(%2)", ИмяМетода, СтрокаПараметрыВызова);	// Функция
		Иначе
			ИсполняемыйМетод = СтрШаблон("%1(%2)", ИмяМетода, СтрокаПараметрыВызова);	// Процедура
		КонецЕсли; 
		
		ПереченьОшибок = Новый Массив;
		
		ПолученноеЗначение = Неопределено;
		Попытка
			ВремяСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Выполнить(ИсполняемыйМетод);	// Точка останова на последнем тесте: ПереченьАвтотестов.Найти(Автотест) = ПереченьАвтотестов.ВГраница()
			ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяСтарта;
			Если ОжидаетсяИсключение Тогда
				Успех = Ложь;
				ПереченьОшибок.Добавить("Ожидается исключение.");
			ИначеЕсли ОжидаетсяЗначение Тогда
				Успех = Автотест_ЗначенияИдентичны(ОжидаемоеЗначение, ПолученноеЗначение);
				Если Не Успех Тогда
					ПереченьОшибок.Добавить("Возвращаемое значение отличается от контрольного.");
				КонецЕсли; 
			Иначе
				Успех = Истина;
			КонецЕсли; 
		Исключение
			Успех = ОжидаетсяИсключение И Не ОжидаетсяЗначение;
			Если ОжидаетсяИсключение Тогда
				Автотест.Выполнен = Истина;
			КонецЕсли; 
			Если не Успех Тогда
				ПереченьОшибок.Добавить(ОписаниеОшибки());
			КонецЕсли; 
		КонецПопытки; 
		
		// Дополнительная проверка результата
		Если Успех И ЗначениеЗаполнено(КодПроверкиРезультата) Тогда
			Успех = Ложь;
			Попытка
				Выполнить(КодПроверкиРезультата);
				Если не Успех Тогда
					ПереченьОшибок.Добавить("Программная проверка не пройдена.");
				КонецЕсли; 
			Исключение
				ПереченьОшибок.Добавить(ОписаниеОшибки());
			КонецПопытки; 
		КонецЕсли; 
		
		// Заполняем протокол
		Если Успех Тогда
			Автотест_ДобавитьЗаписьПротокола(ПротоколТеста, НомерТеста, ИмяМетода, Описание, Успех, "");
		Иначе
			Для каждого Сообщение Из ПереченьОшибок Цикл
				Автотест_ДобавитьЗаписьПротокола(ПротоколТеста, НомерТеста, ИмяМетода, Описание, Успех, Сообщение);
			КонецЦикла; 
		КонецЕсли; 
		#Если Сервер Тогда
		Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			Автотест_ДобавитьЗаписьПротокола(ПротоколТеста, НомерТеста, ИмяМетода, Описание, Успех, Сообщение.Текст);
		КонецЦикла; 
		#КонецЕсли 
		
		АвтоТест.ВремяВыполнения = ВремяВыполнения;
		Автотест.Выполнен		 = Истина;
		Автотест.Пройден		 = Успех;
		
		Отказ = Отказ Или Не Успех; 
		
	КонецЦикла; 
	
	#КонецОбласти // ВыполнениеАвтотеста 

	#Область ВыводРезультатовСообщения
	
	// Выводится по одному сообщению для каждого описания теста; успешные - отдельно.
	// Пройденные тесты выводятся вместе, ошибочные - каждый отдельно (может быть много ошибок в рамках каждого теста)
		
	ТекИмяМетода = Неопределено;
	ТекОписание	 = Неопределено;
	НачатьСообщение = Истина;
	Для каждого ПозицияПротокола Из ПротоколТеста Цикл
		
		Если ПозицияПротокола.Пройден Тогда
			Если НачатьСообщение Тогда
				ТекстСообщения = СтрШаблон(
					"%1. Метод:	 %2()
					|%3",
					ПозицияПротокола.НомерТеста,
					ПозицияПротокола.ИмяМетода,
					"Пройдены успешно тесты:");
			КонецЕсли; 
			ТекстСообщения = ТекстСообщения 
			+ Символы.ПС
			+ Символы.Таб
			+ ПозицияПротокола.Описание;
		
		Иначе	
			Если НачатьСообщение Тогда
				ТекстСообщения = СтрШаблон(
					"%1. Метод:	 %2()
					|Тест:	 %3
					|%4",
					ПозицияПротокола.НомерТеста,
					ПозицияПротокола.ИмяМетода,
					ПозицияПротокола.Описание,
					"Тест не пройден:");
			КонецЕсли; 
			ТекстСообщения = ТекстСообщения 
			+ Символы.ПС
			+ Символы.Таб
			+ ПозицияПротокола.Сообщение;
		
		КонецЕсли; 
		НачатьСообщение = Ложь;
		
		ЭтоПоследнееСообщение = (ПротоколТеста.Найти(ПозицияПротокола) = (ПротоколТеста.Количество() - 1));
		Если ЭтоПоследнееСообщение Тогда
			ВывестиСообщение = Истина;
		Иначе
			СледПозицияПротокола = ПротоколТеста[ПротоколТеста.Найти(ПозицияПротокола) + 1];
			ВывестиСообщение = ПозицияПротокола.ИмяМетода <> СледПозицияПротокола.ИмяМетода
				Или ПозицияПротокола.Сообщение <> СледПозицияПротокола.Сообщение
				Или Не ПозицияПротокола.Пройден
				Или ПозицияПротокола.Пройден <> СледПозицияПротокола.Пройден;
		КонецЕсли; 
			
		Если ВывестиСообщение Тогда
			Сообщить(ТекстСообщения);
			
			НачатьСообщение = Не ЭтоПоследнееСообщение;
		КонецЕсли; 
		
	КонецЦикла; 
	
	#КонецОбласти // ВыводРезультатовСообщения
	
	#Область ВыводРезультатовВЖурналРегистрации
		
	#КонецОбласти // ВыводРезультатовВЖурналРегистрации 
	
КонецПроцедуры // Автотест()

// Формирует служебную структуру описания автотеста метода
// 
// Возвращаемое значение:
//  Структура - Элементы соответствуют параметрам вызова. Элементы:
//  * ИмяМетода				 - Строка		 - Имя процедуры или функции
//  * ПараметрыВызова		 - Массив		 - Параметры вызываемого метода
//  * ОжидаетсяЗначение		 - Булево		 - Метод будет выполнен как функция; будет проверено ожидаемое значение.
//  * ОжидаемоеЗначение		 - Произвольный	 - Ожидаемое возвращаемое значение выполняемой функции.
//  * ОжидаетсяИсключение	 - Булево		 - Истина, если условие прохождения теста - возникновение исключения.
//  * КодПроверкиРезультата	 - Строка        - Код, который вызывается после выполнения метода для проверки результата исполнения.
// 											 Результатом успешной проверки является установка переменной Успех = Истина.
//  * Описание				 - Строка		 - Текстовое описание теста.
//  * Использование			 - Булево		 - Признак выполнения автотеста. По умолчанию: Истина.
//  * Выполнен				 - Булево		 - Служебный. Признак выполнения теста.
//  * Пройден				 - Булево		 - Служебный. Признак успешного выполнения теста.
//  * ВремяВыполнения		 - Число		 - Служебный. Время выполнения в мсек.
//
Функция Автотест_НовыйАвтотестМетода()

	ПараметрыАвтотеста = Новый Структура;
	ПараметрыАвтотеста.Вставить("ИмяМетода",				 "");
	ПараметрыАвтотеста.Вставить("Описание",					 "");
	ПараметрыАвтотеста.Вставить("Использование",			 Истина);
	ПараметрыАвтотеста.Вставить("ПараметрыВызова",			 Новый Массив);
	ПараметрыАвтотеста.Вставить("ОжидаетсяЗначение",		 Ложь);
	ПараметрыАвтотеста.Вставить("ОжидаемоеЗначение",		 Неопределено);
	ПараметрыАвтотеста.Вставить("ОжидаетсяИсключение",		 Ложь);
	ПараметрыАвтотеста.Вставить("КодПроверкиРезультата",	 "");
	ПараметрыАвтотеста.Вставить("Выполнен",					 Ложь);
	ПараметрыАвтотеста.Вставить("Пройден",					 Ложь);
	ПараметрыАвтотеста.Вставить("ВремяВыполнения",			 0);
	
	Возврат ПараметрыАвтотеста;

КонецФункции // НовыйАвтотестМетода()

// Добавляет новое описание автотеста в коллекцию автотестов и возвращает его.
//
// Параметры:
//  КоллекцияАвтотестов	 - Массив	 - Коллекция автотестов.
// 
// Возвращаемое значение:
//   - Структура   - см. Автотест_НовыйАвтотестМетода(). Элементы:
//  	* ИмяМетода				 - Строка
//  	* ПараметрыВызова		 - Массив
//		* ОжидаетсяЗначение		 - Булево
//  	* ОжидаемоеЗначение		 - Произвольный
//  	* ОжидаетсяИсключение	 - Булево
//		* КодПроверкиРезультата	 - Строка
//		* Описание				 - Строка
//
Функция Автотест_ДобавитьАвтотестМетода(КоллекцияАвтотестов)

	ЭкземплярАвтотеста = Автотест_НовыйАвтотестМетода();
	КоллекцияАвтотестов.Добавить(ЭкземплярАвтотеста);
	Возврат ЭкземплярАвтотеста;

КонецФункции // Автотест_ДобавитьАвтотестМетода()

// Добавляет запись протокола автотеста и возвращает её.
//
// Параметры:
//  Протокол	 - Массив	 - Протокол автотеста
//  Номер		 - Число	 - Номер в серии тестов
//  ИмяМетода	 - Строка	 - Имя тестируемого метода
//  Описание	 - Строка	 - Описание теста
//  Пройден		 - Булево	 - Признак успешного прохождения теста
//  Сообщение	 - Строка	 - Сообщение об ошибке
// 
// Возвращаемое значение:
//   - Структура   - Поля соответствуют параметрам.
//
Функция Автотест_ДобавитьЗаписьПротокола(
	Протокол,
	НомерТеста	 = 0,
	ИмяМетода	 = "",
	Описание	 = "",
	Пройден		 = Ложь,
	Сообщение	 = "")

	ЗаписьПротокола = Новый Структура;
	ЗаписьПротокола.Вставить("НомерТеста",	 НомерТеста);
	ЗаписьПротокола.Вставить("ИмяМетода",	 ИмяМетода);
	ЗаписьПротокола.Вставить("Описание",	 Описание);
	ЗаписьПротокола.Вставить("Пройден",		 Пройден);
	ЗаписьПротокола.Вставить("Сообщение",	 Сообщение);
	
	Протокол.Добавить(ЗаписьПротокола);
	Возврат ЗаписьПротокола;

КонецФункции // Автотест_ДобавитьЗаписьПротокола()

Функция Автотест_ЗначенияИдентичны(ПервоеЗначение, ВтороеЗначение)
	
	//ЗаписьXML = Новый ЗаписьXML();
	//
	//ЗаписьXML.УстановитьСтроку();
	//СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ПервоеЗначение);
	//ПервоеЗначениеСтрока = ЗаписьXML.Закрыть();
	//
	//ЗаписьXML.УстановитьСтроку();
	//СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ВтороеЗначение);
	//ВтороеЗначениеСтрока = ЗаписьXML.Закрыть();

	ПервоеЗначениеСтрока = XMLСтрока(ПервоеЗначение);
	ВтороеЗначениеСтрока = XMLСтрока(ВтороеЗначение);

	Возврат СтрСравнить(ПервоеЗначениеСтрока, ВтороеЗначениеСтрока) = 0;

КонецФункции // Автотест_ЗначенияИдентичны()

#КонецОбласти // Автотест 

