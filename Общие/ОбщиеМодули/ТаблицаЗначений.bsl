// Получает таблицу значений по набору данных схемы компоновки или макета компоновки данных
//
// Параметры:
//  НаборДанных				 - Строка, НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных	 - Набор - источник колонок таблицы.
//		Если указана Строка, производится поиск набора данных в КоллекцияНаборовДанных по имени объекта
//  КоллекцияНаборовДанных	 - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных, Массив	 - Коллекция наборов данных, доступная к перебору циклом.
//		Указывается, если производится поиск набора.
// Вариант вызова:
//		НовыйТаблицаЗначенийПоНаборуДанных(Строка, НаборыДанныхСхемыКомпоновкиДанных)	 - Поиск набора данных по имени объекта.
//		НовыйТаблицаЗначенийПоНаборуДанных(НаборДанныхОбъектСхемыКомпоновкиДанных)		 - Формирование таблицы по указанному набору.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, сформированная по набору. Если найбор не найден, будет возвращено Неопределено.
//
Функция НовыйТаблицаЗначенийПоНаборуДанных(Знач НаборДанных, КоллекцияНаборовДанных = Неопределено)
	
	Если ТипЗнч(НаборДанных) <> Тип("Строка")
		И ТипЗнч(НаборДанных) <> Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
		И ТипЗнч(НаборДанных) <> Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗнч(НаборДанных) = Тип("Строка") Тогда
		// Поиск по имени объекта
	
		Для каждого ТекущийНаборДанных Из КоллекцияНаборовДанных Цикл
			Если ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
				Или ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных")
				И ТекущийНаборДанных.ИмяОбъекта = НаборДанных Тогда
				
				НаборДанных = ТекущийНаборДанных;					
							
			    Прервать;
				
			ИначеЕсли ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
				Или ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
				
				ТаблицаПоНабору = НовыйТаблицаЗначенийПоНаборуДанных(НаборДанных, ТекущийНаборДанных.Элементы);	// Рекурсивный вызов для дочернего набора
				Если ТипЗнч(ТаблицаПоНабору) = Тип("ТаблицаЗначений") Тогда
					Возврат ТаблицаПоНабору;
				КонецЕсли; 
				
			КонецЕсли; 	
		КонецЦикла; 
	
	КонецЕсли; 
	
	ТаблицаПоНабору = Неопределено;
	
	Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
		Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
		
		ТаблицаПоНабору = Новый ТаблицаЗначений;
		Для каждого ПолеНабора Из НаборДанных.Поля Цикл
			
			Если ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных")
				или  ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхМакетаКомпоновкиДанных") Тогда
				
				ТаблицаПоНабору.Колонки.Добавить(ПолеНабора.Поле, ПолеНабора.ТипЗначения, ПолеНабора.Заголовок);	
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли;  
	
	Возврат ТаблицаПоНабору;

КонецФункции // НовыйТаблицаЗначенийПоНаборуДанных()

// Изменяет Тип колонки таблицы значений.
//  Порядок колонок и индексы таблицы сохраняются.
//
// Параметры:
//  ТаблицаЗначений				 - ТаблицаЗначений				 - Изменяемая таблица
//  Колонка						 - Строка						 - Имя изменяемой колонка
//								 - КолонкаТаблицыЗначений		 - Изменияемая колонка
//								 - Число						 - Индекс изменяемой колонки
//  ДобавляемыеТипы				 - Массив						 - Массив типов. Элемент: Тип
//								 - Строка						 - Типы через запятую
//  ВычитаемыеТипы				 - Массив						 - Массив типов. Элемент: Тип
//								 - Строка						 - Типы через запятую
//  КвалификаторыЧисла			 - КвалификаторыЧисла			 - Новые квалификаторы значений
//  КвалификаторыСтроки			 - КвалификаторыСтроки			 - Новые квалификаторы значений 
//  КвалификаторыДаты			 - КвалификаторыДаты			 - Новые квалификаторы значений
//  КвалификаторыДвоичныхДанных	 - КвалификаторыДвоичныхДанных	 - Новые квалификаторы значений
//
Процедура ИзменитьТипКолонкиТаблицыЗначений(ТаблицаЗначений, 
	Знач Колонка, 
	Знач ДобавляемыеТипы		 = Неопределено, 
	Знач ВычитаемыеТипы			 = Неопределено,
	КвалификаторыЧисла			 = Неопределено,
	КвалификаторыСтроки			 = Неопределено,
	КвалификаторыДаты			 = Неопределено,
	КвалификаторыДвоичныхДанных	 = Неопределено
	)

	Если Ложь Тогда 
		ТаблицаЗначений = Новый ТаблицаЗначений;
		Колонка = ТаблицаЗначений.Колонки[0];
	КонецЕсли;
	
	#Область ПараметрКолонка
	Если ТипЗнч(Колонка) = Тип("КолонкаТаблицыЗначений") Тогда
		// Ничего
		ИндексКолонки = ТаблицаЗначений.Колонки.Индекс(Колонка);
		Если ИндексКолонки = -1 Тогда
			ВызватьИсключение "Параметр Колонка: Колонка не принадлежит таблице";
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Колонка) = Тип("Строка") Тогда
		Колонка = ТаблицаЗначений.Колонки.Найти(Колонка);
		Если Колонка = Неопределено Тогда
			ВызватьИсключение "Параметр Колонка: Нет колонки с указанным именем";
		КонецЕсли; 
		ИндексКолонки = ТаблицаЗначений.Колонки.Индекс(Колонка);
	ИначеЕсли ТипЗнч(Колонка) = Тип("Число") Тогда
		ИндексКолонки = Колонка;
		Если ИндексКолонки >= ТаблицаЗначений.Колонки.Количество() Тогда
			ВызватьИсключение "Параметр Колонка: Индекс колонки больше максимального";
		КонецЕсли; 
		Колонка = ТаблицаЗначений.Колонки[ИндексКолонки];
	Иначе
		ВызватьИсключение "Параметр Колонка: Ожидается Строка, Число, или КолонкаТаблицыЗначений";
	КонецЕсли; 
	#КонецОбласти // ПараметрКолонка 

	#Область УдалениеИндексов
	Индексы = Новый Массив;	// Массив строковых представлений индексов, которые нужно удалить, затем восстановить
	УдаляемыеИндексы = Новый Массив;
	Для каждого ИндексТаблицы Из ТаблицаЗначений.Индексы Цикл
		СоставИндекса = Новый Массив;
		УдалитьИндекс = Ложь;
		Для каждого ИмяКолонкиИндекса Из ИндексТаблицы Цикл
			СоставИндекса.Добавить(ИмяКолонкиИндекса);
			УдалитьИндекс = УдалитьИндекс Или Колонка.Имя = ИмяКолонкиИндекса;
		КонецЦикла; 
		Если УдалитьИндекс Тогда
			Индексы.Добавить(СтрСоединить(СоставИндекса, ", "));	// Запоминаем состав для восстановления
			УдаляемыеИндексы.Добавить(ИндексТаблицы);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Индекс Из УдаляемыеИндексы Цикл
		ТаблицаЗначений.Индексы.Удалить(Индекс);
	КонецЦикла; 
	#КонецОбласти // УдалениеИндексов 
	
	#Область ДобавлениеКолонки
	ОписаниеТиповНовойКолонки = Новый ОписаниеТипов(
		Колонка.ТипЗначения,
		ДобавляемыеТипы,
		ВычитаемыеТипы,
		КвалификаторыЧисла,
		КвалификаторыСтроки,
		КвалификаторыДаты,
		КвалификаторыДвоичныхДанных);
	НоваяКолонка = ТаблицаЗначений.Колонки.Добавить(, ОписаниеТиповНовойКолонки, Колонка.Заголовок, Колонка.Ширина);
	МаксИндексКолонок = ТаблицаЗначений.Колонки.Количество() - 1;
	ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Колонка), НоваяКолонка);
	ТаблицаЗначений.Колонки.Сдвинуть(НоваяКолонка, 	ИндексКолонки - МаксИндексКолонок + 1);
	ИмяКолонки = Колонка.Имя;
	ТаблицаЗначений.Колонки.Удалить(Колонка);
	НоваяКолонка.Имя = ИмяКолонки;
	#КонецОбласти // ДобавлениеКолонки 	
	
	#Область ВосстановлениеИндексов
	Для каждого СоставИндекса Из Индексы Цикл
		ТаблицаЗначений.Индексы.Добавить(СоставИндекса);	
	КонецЦикла; 	
	#КонецОбласти // ВосстановлениеИндексов 

КонецПроцедуры	// ИзменитьТипКолонкиТаблицыЗначений()

Процедура ИзменитьТипКолонкиТаблицыЗначений_Автотест()

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Число",			 Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Идентификатор",	 Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаЗначений.Колонки.Добавить("Дата",			 Новый ОписаниеТипов("Дата"));
	
	#Область Заполнение
	
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	СтрокТаблицы = 9999;
	МаксЧисло = pow(2, 24);
	СекундВГоду = КонецГода(ТекущаяДата()) - НачалоГода(ТекущаяДата());
	НачалоГода = НачалоГода(ТекущаяДата());
	
	Для НомерСтроки = 1 По СтрокТаблицы Цикл
		
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		СтрокаТаблицы.Число			 = Генератор.СлучайноеЧисло(0, МаксЧисло);
		СтрокаТаблицы.Идентификатор	 = Новый УникальныйИдентификатор();
		СтрокаТаблицы.Дата			 = НачалоГода + Генератор.СлучайноеЧисло(0, СекундВГоду);
	
	КонецЦикла; 	
	
	#КонецОбласти // Заполнение 
	
	ТаблицаЗначений.Индексы.Добавить("Число");
	ТаблицаЗначений.Индексы.Добавить("Число, Идентификатор");
	ТаблицаЗначений.Индексы.Добавить("Идентификатор, Дата");
	ТаблицаЗначений.Индексы.Добавить("Число, Дата");
	ТаблицаЗначений.Индексы.Добавить("Дата");
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(36);
	
	// Просто добавим тип Строка
	ИзменитьТипКолонкиТаблицыЗначений(
		ТаблицаЗначений,
	    "Идентификатор",
		"Строка");
		
	// Добавим булево, Уберем строку
	ИзменитьТипКолонкиТаблицыЗначений(
		ТаблицаЗначений,
	    ТаблицаЗначений.Колонки[1],
		"Булево",
		"Строка");
		
	// Добавим строку, уберем булево и уникальный идентификатор.
	// Ожидаем что преобразуются значения.
	ИзменитьТипКолонкиТаблицыЗначений(
		ТаблицаЗначений,
	    1,
		"Строка",
		"УникальныйИдентификатор, Булево",,
		КвалификаторСтроки);
		
КонецПроцедуры	// ИзменитьТипКолонкиТаблицыЗначений_Автотест()


