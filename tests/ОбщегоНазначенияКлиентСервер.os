// BSLLS-off
// cSpell:disable

#Использовать asserts


Перем ЮнитТестирование;
Перем Данные;
Перем Модуль;

Перем ОбщегоНазначенияКлиентСервер;

Процедура ПередЗапускомТеста() Экспорт
	
	Контекст = Новый Структура;
	Модуль = ЗагрузитьСценарий(
			".\Общие\ОбщиеМодули\ОбщегоНазначения\ОбщегоНазначенияКлиентСервер.bsl",
			Контекст
		);
	ОбщегоНазначенияКлиентСервер = Модуль;
	
КонецПроцедуры

// основной метод для тестирования
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ВсеТесты = Новый Массив;
	
	#Область ОписанияТипов
	ВсеТесты.Добавить("ОбъединениеОписанийТипов");
	ВсеТесты.Добавить("ПересечениеОписанийТипов");
	ВсеТесты.Добавить("ОписаниеТиповПоСтроке");
	ВсеТесты.Добавить("ОписаниеТипаПоСтроке");
	ВсеТесты.Добавить("ОписанияТиповСовпадают");
	#КонецОбласти // ОписанияТипов
	
	#Область Коллекции

	#Область Агрегаты

	ВсеТесты.Добавить("Агрегат");

	#КонецОбласти // Агрегаты

	
	#Область Деревья
	
	#КонецОбласти // Деревья
	
	#Область Соответствие
	
	#КонецОбласти // Соответствие
	
	#Область Структура
	
	ВсеТесты.Добавить("СтруктурыРавны");
	
	#КонецОбласти // Структура

	#Область Индексирование
	ВсеТесты.Добавить("ПостроитьИндексКоллекции");
	ВсеТесты.Добавить("НайтиПоИндексуКоллекции");
	#КонецОбласти // Индексирование
	
	#КонецОбласти // Коллекции
	
	ВсеТесты.Добавить("РимскийЛитерал");
	ВсеТесты.Добавить("РимскийЛитерал_Исключения");
	ВсеТесты.Добавить("ОбратныйПорядок");
	ВсеТесты.Добавить("ОбеспечитьСвойствоСтруктуры");
	ВсеТесты.Добавить("РаспределитьДатыПоХронологии");
	ВсеТесты.Добавить("ЭтоВисокосныйГод");
	ВсеТесты.Добавить("СтрНайтиЦеликом");
	
	#Область Объекты
	
	ВсеТесты.Добавить("ЕстьСвойство");
	ВсеТесты.Добавить("ПеренестиЗначенияСвойств");
	ВсеТесты.Добавить("Родители");
	
	#КонецОбласти // Объекты
	
	#Область Коллекции
	
	#Область Массив
	
	ВсеТесты.Добавить("ЕстьПересечениеМассивов");
	ВсеТесты.Добавить("МассивИзЗначения");
	ВсеТесты.Добавить("МассивЗначений");
	ВсеТесты.Добавить("МассивОдинаковыхЗначений");
	ВсеТесты.Добавить("МассивОтсортирован");
	ВсеТесты.Добавить("МассивыСовпадают");
	ВсеТесты.Добавить("РазностьМассивов");
	ВсеТесты.Добавить("ПересечениеМассивов");

	#КонецОбласти // Массив

	ВсеТесты.Добавить("Первые");
	ВсеТесты.Добавить("Последние");
	ВсеТесты.Добавить("Средние");
	ВсеТесты.Добавить("ВыгрузитьПолеКоллекции");
	ВсеТесты.Добавить("НайтиЭлементыКоллекцииПоТипу");
	ВсеТесты.Добавить("ПоменятьМестамиКлючиИЗначения");
	ВсеТесты.Добавить("СкопироватьКоллекцию");
	ВсеТесты.Добавить("СортироватьКоллекцию");
	ВсеТесты.Добавить("УдалитьЗначениеИзМассива");
	ВсеТесты.Добавить("ОбновитьКоллекцию");


	#КонецОбласти // Коллекции
	
	#Область Строки
	
	#Область РимскоеЧисло
	ВсеТесты.Добавить("РимскоеЧисло_Простой");
	// ВсеТесты.Добавить("РимскоеЧисло_ПолнаяТаблица");
	#КонецОбласти // РимскоеЧисло
	
	#Область ЧислоИзРимскогоЧисла
	ВсеТесты.Добавить("ЧислоИзРимскогоЧисла");
	#КонецОбласти // ЧислоИзРимскогоЧисла
	
	ВсеТесты.Добавить("ЭтоУникальныйИдентификатор");
	
	#Область Конвертация
	ВсеТесты.Добавить("ИмяОбъектаВалидно");
	ВсеТесты.Добавить("ИмяОбъектаИзСинонима");
	ВсеТесты.Добавить("СинонимОбъектаИзИмени");
	
	#КонецОбласти // Конвертация
	
	ВсеТесты.Добавить("РазделитьСтрокуПоНомерамСимволов");

	#КонецОбласти // Строки

	#Область Ссылки
	ВсеТесты.Добавить("СоставПредставленияДокумента");
	#КонецОбласти // Ссылки
	
	Возврат ВсеТесты;
	
КонецФункции

#Область ОписанияТипов

Процедура ОбъединениеОписанийТипов() Экспорт
	
	УчитыватьКвалификаторы = Ложь;	// Для проверки типов.

	ТекстСообщения = "Пустые описания";
	ОписаниеТиповА = Новый ОписаниеТипов();
	ОписаниеТиповБ = Новый ОписаниеТипов();
	ОписаниеТиповЭталон = Новый ОписаниеТипов();
	ОписаниеТиповРезультат = Модуль.ОбъединениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТиповРезультат, ОписаниеТиповЭталон, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);
	
	ТекстСообщения = "Простые описания";
	ОписаниеТиповА = Новый ОписаниеТипов("Число");
	ОписаниеТиповБ = Новый ОписаниеТипов("Строка");
	ОписаниеТиповЭталон = Новый ОписаниеТипов("Число, Строка");
	ОписаниеТиповРезультат = Модуль.ОбъединениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТиповРезультат, ОписаниеТиповЭталон, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);

	ТекстСообщения = "Расширение длины в квалификаторе";
	ОписаниеТиповА = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(3, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБ = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Любой));
	ОписаниеТиповЭталон = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(6, 3, ДопустимыйЗнак.Любой));
	ОписаниеТиповРезультат = Модуль.ОбъединениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТиповРезультат, ОписаниеТиповЭталон, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);
	
КонецПроцедуры // ОбъединениеОписанийТипов()

Процедура РазностьМассивов() Экспорт
	// Тест 1: Разность двух массивов с общими элементами
	Массив1 = Новый Массив;
	Массив1.Добавить(1);
	Массив1.Добавить(2);
	Массив1.Добавить(3);

	Массив2 = Новый Массив;
	Массив2.Добавить(2);
	Массив2.Добавить(3);
	Массив2.Добавить(4);

	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(1);

	Результат = Модуль.РазностьМассивов(Массив1, Массив2);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

	// Тест 2: Разность двух массивов без общих элементов
	Массив1 = Новый Массив;
	Массив1.Добавить(1);
	Массив1.Добавить(2);

	Массив2 = Новый Массив;
	Массив2.Добавить(3);
	Массив2.Добавить(4);

	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(1);
	ОжидаемыйРезультат.Добавить(2);

	Результат = Модуль.РазностьМассивов(Массив1, Массив2);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

	// Тест 3: Разность пустого массива и непустого массива
	Массив1 = Новый Массив;

	Массив2 = Новый Массив;
	Массив2.Добавить(1);
	Массив2.Добавить(2);

	ОжидаемыйРезультат = Новый Массив;

	Результат = Модуль.РазностьМассивов(Массив1, Массив2);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

	// Тест 4: Разность двух одинаковых массивов
	Массив1 = Новый Массив;
	Массив1.Добавить(1);
	Массив1.Добавить(2);

	Массив2 = Новый Массив;
	Массив2.Добавить(1);
	Массив2.Добавить(2);

	ОжидаемыйРезультат = Новый Массив;

	Результат = Модуль.РазностьМассивов(Массив1, Массив2);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

	// Тест 5: Разность массива с повторяющимися элементами
	Массив1 = Новый Массив;
	Массив1.Добавить(1);
	Массив1.Добавить(2);
	Массив1.Добавить(2);
	Массив1.Добавить(3);

	Массив2 = Новый Массив;
	Массив2.Добавить(2);

	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(1);
	ОжидаемыйРезультат.Добавить(3);

	Результат = Модуль.РазностьМассивов(Массив1, Массив2);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);
КонецПроцедуры

Процедура ПересечениеОписанийТипов() Экспорт
	
	ТекстСообщения = "Пустые описания";
	ОписаниеТиповА = Новый ОписаниеТипов();
	ОписаниеТиповБ = Новый ОписаниеТипов();
	Результат = Модуль.ПересечениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	Ожидаем.Что(ЗначениеЗаполнено(Результат.Типы()), ТекстСообщения).Равно(Ложь);

	ТекстСообщения = "Простые типы";
	ОписаниеТиповА = Новый ОписаниеТипов("Число, Строка");
	ОписаниеТиповБ = Новый ОписаниеТипов("Строка, Дата");
	Результат = Модуль.ПересечениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	Ожидаем.Что(Результат.СодержитТип(Тип("Число")), ТекстСообщения).Равно(Ложь);
	Ожидаем.Что(Результат.СодержитТип(Тип("Строка")), ТекстСообщения).Равно(Истина);
	Ожидаем.Что(Результат.СодержитТип(Тип("Дата")), ТекстСообщения).Равно(Ложь);
	
	ТекстСообщения = "Пустой и простой тип";
	ОписаниеТиповА = Новый ОписаниеТипов();
	ОписаниеТиповБ = Новый ОписаниеТипов("Дата");
	Результат = Модуль.ПересечениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	Ожидаем.Что(Результат.Типы().Количество(), ТекстСообщения).Равно(1);
	Ожидаем.Что(Результат.СодержитТип(Тип("Дата")), ТекстСообщения).Равно(Истина);
	
	ТекстСообщения = "Комплекс";
	ОписаниеТиповА = Новый ОписаниеТипов(
		"Число, Строка, Дата",
		Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный),
		Новый КвалификаторыСтроки(148, ДопустимаяДлина.Фиксированная),
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)
	);
	ОписаниеТиповБ = Новый ОписаниеТипов(
		"Число, Строка, Дата",
		Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой),
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная),
		Новый КвалификаторыДаты(ЧастиДаты.Дата)
	);
	Референс = Новый ОписаниеТипов(
		"Число, Строка, Дата",
		Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный),
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная),
		Новый КвалификаторыДаты(ЧастиДаты.Дата)
	);
	Результат = Модуль.ПересечениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	УчитыватьКвалификаторы = Истина;
	Ожидаем.Что(Модуль.ОписанияТиповСовпадают(Результат, Референс, УчитыватьКвалификаторы), ТекстСообщения).Равно(Истина);

	ТекстСообщения = "Несовпадающие типы";
	ОписаниеТиповА = Новый ОписаниеТипов(
		"Число, Строка, Дата",
		Новый КвалификаторыЧисла(6, 0),
		Новый КвалификаторыСтроки(148, ДопустимаяДлина.Переменная),
		Новый КвалификаторыДаты(ЧастиДаты.Дата)
	);
	ОписаниеТиповБ = Новый ОписаниеТипов(
		"Число, Строка, Дата",
		Новый КвалификаторыЧисла(6, 6, ДопустимыйЗнак.Любой),
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная),
		Новый КвалификаторыДаты(ЧастиДаты.Время)
	);
	Референс = Новый ОписаниеТипов(
		"Строка",
		,
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)
	);
	Результат = Модуль.ПересечениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	УчитыватьКвалификаторы = Истина;
	Ожидаем.Что(
		Модуль.ОписанияТиповСовпадают(Результат, Референс, УчитыватьКвалификаторы), 
		ТекстСообщения
	).Равно(Истина);

	ТекстСообщения = "Ограничение произвольного типа";
	ОписаниеТиповА = Новый ОписаниеТипов();
	ОписаниеТиповБ = Новый ОписаниеТипов(
		"Число, Строка, Дата",
		Новый КвалификаторыЧисла(12, 3, ДопустимыйЗнак.Неотрицательный),
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная),
		Новый КвалификаторыДаты(ЧастиДаты.Дата)
	);
	Референс = ОписаниеТиповБ;
	Результат = Модуль.ПересечениеОписанийТипов(ОписаниеТиповА, ОписаниеТиповБ);
	УчитыватьКвалификаторы = Истина;
	Ожидаем.Что(
		Модуль.ОписанияТиповСовпадают(Результат, Референс, УчитыватьКвалификаторы), 
		ТекстСообщения
	).Равно(Истина);


КонецПроцедуры // ПересечениеОписанийТипов()

Процедура ОписаниеТиповПоСтроке() Экспорт
	
	УчитыватьКвалификаторы = Истина;	// Для проверки типов.

	ТекстСообщения = "Пустое описание";
	ОписаниеТиповСтрокой = "";
	ОжидаемоеОписаниеТипов = Новый ОписаниеТипов();
	ОписаниеТипов = Модуль.ОписаниеТиповПоСтроке(ОписаниеТиповСтрокой);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТипов, ОжидаемоеОписаниеТипов, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);
	
	ТекстСообщения = "Простое описание";
	ОписаниеТиповСтрокой = "Число, Строка, Дата";
	ОжидаемоеОписаниеТипов = Новый ОписаниеТипов("Число, Строка, Дата");
	Разделитель = ",";
	ОписаниеТипов = Модуль.ОписаниеТиповПоСтроке(ОписаниеТиповСтрокой, Разделитель);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТипов, ОжидаемоеОписаниеТипов, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);
	
	ТекстСообщения = "Описание Булево";
	ОписаниеТиповСтрокой = "Булево";
	ОжидаемоеОписаниеТипов = Новый ОписаниеТипов("Булево");
	Разделитель = ",";
	ОписаниеТипов = Модуль.ОписаниеТиповПоСтроке(ОписаниеТиповСтрокой, Разделитель);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТипов, ОжидаемоеОписаниеТипов, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);

КонецПроцедуры // ОписаниеТиповПоСтроке()

Процедура ОписаниеТипаПоСтроке() Экспорт
	
	УчитыватьКвалификаторы = Истина;	// Для проверки типов.

	ТекстСообщения = "Пустое описание";
	ОписаниеТипаСтрокой = "";
	ОжидаемоеОписаниеТипов = Новый ОписаниеТипов();
	ОписаниеТипов = Модуль.ОписаниеТипаПоСтроке(ОписаниеТипаСтрокой);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТипов, ОжидаемоеОписаниеТипов, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);
	
	ТекстСообщения = "Простое описание";
	ОписаниеТипаСтрокой = "Строка";
	ОжидаемоеОписаниеТипов = Новый ОписаниеТипов("Строка");
	ОписаниеТипов = Модуль.ОписаниеТипаПоСтроке(ОписаниеТипаСтрокой);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТипов, ОжидаемоеОписаниеТипов, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);
	
	ТекстСообщения = "Полное описание квалификатров";
	ОписаниеТипаСтрокой = "Строка(36, ДопустимаяДлина.Фиксированная)";
	ОжидаемоеОписаниеТипов = Новый ОписаниеТипов("Строка", , 
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная));
	ОписаниеТипов = Модуль.ОписаниеТипаПоСтроке(ОписаниеТипаСтрокой);
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТипов, ОжидаемоеОписаниеТипов, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);

	// Частичное описание квалификаторов не поддерживается OScript - не сработает 
	
КонецПроцедуры // ОписаниеТипаПоСтроке()

Процедура ОписанияТиповСовпадают() Экспорт
	
	ТекстСообщения = "Пустые описания типов совпадают";
	ОписаниеТиповА = Новый ОписаниеТипов();
	ОписаниеТиповБ = Новый ОписаниеТипов();
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТиповА, ОписаниеТиповБ);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);

	ТекстСообщения = "Разные простые описания типов не совпадают";
	ОписаниеТиповА = Новый ОписаниеТипов("Число");
	ОписаниеТиповБ = Новый ОписаниеТипов("Строка");
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТиповА, ОписаниеТиповБ);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Ложь);
	
	ТекстСообщения = "Проверка без учета квалификаторов";
	ОписаниеТиповА = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Любой));
	ОписаниеТиповБ = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Неотрицательный));
	УчитыватьКвалификаторы = Ложь;
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТиповА, ОписаниеТиповБ, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Истина);
	
	ТекстСообщения = "Проверка с учетом квалификаторов";
	ОписаниеТиповА = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Любой));
	ОписаниеТиповБ = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Неотрицательный));
	УчитыватьКвалификаторы = Истина;
	Результат = Модуль.ОписанияТиповСовпадают(ОписаниеТиповА, ОписаниеТиповБ, УчитыватьКвалификаторы);
	Ожидаем.Что(Результат, ТекстСообщения).Равно(Ложь);
	
КонецПроцедуры // ОписанияТиповСовпадают()

#КонецОбласти // ОписанияТипов

#Область ПримитивныеТипы

#КонецОбласти // ПримитивныеТипы

#Область Объекты

Процедура ЕстьСвойство() Экспорт
	
	ИмяМетода = "ЕстьСвойство";

	Параметры = Новый Массив;
	Параметры.Добавить(Неопределено);
	Параметры.Добавить("Свойство");
	Ожидаем
		.Что(Модуль, "Исключение при пустом объекте")
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение();

	Параметры = Новый Массив;
	Параметры.Добавить(Новый Структура);
	Параметры.Добавить(Неопределено);
	Ожидаем
		.Что(Модуль, "Исключение при неверном имени свойства")
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение();

	Объект = Новый Структура("Свойство");
	ИмяСвойства = "Свойство";
	Ожидаем
		.Что(Модуль.ЕстьСвойство(Объект, ИмяСвойства), "Проверка, свойство есть")
		.Равно(Истина);
	
	Объект = Новый Структура("Свойство");
	ИмяСвойства = "ДрвугоеСвойство";
	Ожидаем
		.Что(Модуль.ЕстьСвойство(Объект, ИмяСвойства), "Проверка, свойство есть")
		.Равно(Ложь);

КонецПроцедуры

Процедура ПеренестиЗначенияСвойств() Экспорт
	
	Источник = Новый Структура("Один, Два", 1, 2);
	Приемник = Новый Структура("Первый, Второй, Третий");
	Свойства = Новый Структура("Первый, Второй", "Один", "Два");
	
	Модуль.ПеренестиЗначенияСвойств(Приемник, Источник, Свойства);
	ТекстСообщения = "Свойства по структуре перенеслись верно";
	Ожидаем
		.Что(Приемник["Первый"], ТекстСообщения).Равно(Источник["Один"])
		.Что(Приемник["Второй"], ТекстСообщения).Равно(Источник["Два"])
		.Что(Приемник["Третий"], ТекстСообщения).Равно(Неопределено);
	
КонецПроцедуры

Процедура Родители() Экспорт
	
	ИмяМетода = "Родители";

	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Поле");
	Эталон = Новый Массив;
	Родитель = Дерево;
	Для Уровень = 0 По 12 Цикл
		Если ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений") Тогда
			Эталон.Вставить(0, Родитель);
		КонецЕсли;
		Строка = Родитель.Строки.Добавить();
		Строка[0] = Уровень;
		Родитель = Строка;
	КонецЦикла;
	Результат = Модуль.Родители(Строка);
	Ожидаем.Что(Результат, "Есть результат")
		.Заполнено();
	Ожидаем.Что(Результат.Количество(), "Количество элементов результате равно эталонному")
		.Равно(Эталон.Количество());
	Для Индекс = 0 По Эталон.ВГраница() Цикл
		Ожидаем.Что(Результат[Индекс], "Родители правильные")
			.Равно(Эталон[Индекс]);
	КонецЦикла;

КонецПроцедуры


#КонецОбласти // Объекты

#Область Коллекции

#Область Агрегаты

Процедура Агрегат() Экспорт

	ИмяМетода = "Агрегат";
	
	Параметры = Новый Массив(1); // Один параметр - Неопределено
	Ожидаем
		.Что(Модуль, "Исключение при неверном параметре")
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение();

	Параметры = Новый Массив(2);
	Параметры[0] = Новый Массив;
	Параметры[1] = "Пыщ пыщ ололо";
	Ожидаем
		.Что(Модуль, "Исключение при неверном параметре")
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение("Непредвиденное значение");

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3, Неопределено, ТекущаяДата());
	АгрегатнаяФункция = "Сумма";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Сумма").Равно(6);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3, Неопределено, ТекущаяДата());
	АгрегатнаяФункция = "Среднее";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Среднее").Равно(2);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3);
	АгрегатнаяФункция = "Минимум";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Минимум").Равно(1);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3);
	АгрегатнаяФункция = "Максимум";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Максимум").Равно(3);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3, Неопределено, ТекущаяДата());
	АгрегатнаяФункция = "Количество";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Количество").Равно(5);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3, Неопределено, ТекущаяДата());
	АгрегатнаяФункция = "КоличествоРазличных";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "КоличествоРазличных, разные значения").Равно(5);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 1, 1, 2, 3, Неопределено, ТекущаяДата());
	АгрегатнаяФункция = "КоличествоРазличных";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "КоличествоРазличных, но значения дублируются").Равно(5);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3, Истина, Ложь);
	АгрегатнаяФункция = "Любой";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Любой").Равно(Истина);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(Ложь, ТекущаяДата());
	АгрегатнаяФункция = "Любой";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Любой").Равно(Ложь);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3, Истина, Ложь);
	АгрегатнаяФункция = "Каждый";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Каждый").Равно(Ложь);

	Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(1, 2, 3, Истина);
	АгрегатнаяФункция = "Каждый";
	Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
	Ожидаем.Что(Результат, "Каждый").Равно(Истина);


КонецПроцедуры

#КонецОбласти // Агрегаты

#Область Массив

Процедура ЕстьПересечениеМассивов() Экспорт
	
	ПервыйМассив = Новый Массив;
	ПервыйМассив.Добавить(1);
	ПервыйМассив.Добавить(2);
	ПервыйМассив.Добавить(3);
	
	ВторойМассив = Новый Массив;
	ВторойМассив.Добавить(4);
	ВторойМассив.Добавить(2);
	ВторойМассив.Добавить(3);
	
	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(2);
	ОжидаемыйРезультат.Добавить(3);
	
	Результат = Модуль.ЕстьПересечениеМассивов(ПервыйМассив, ВторойМассив);
	
	Если Результат = Ложь Тогда
		ВызватьИсключение "Неожиданный результат";
	КонецЕсли;
	
КонецПроцедуры

Процедура МассивИзЗначения() Экспорт
	
	Значение = Новый УникальныйИдентификатор;
	Результат = Модуль.МассивИзЗначения(Значение);
	Ожидаем.Что(Результат).ИмеетТип("Массив").ИмеетДлину(1);
	Ожидаем.Что(Результат[0]).Равно(Значение);
	
КонецПроцедуры

Процедура МассивЗначений() Экспорт
	
	Результат = Модуль.МассивЗначений();
	Ожидаем.Что(Результат).ИмеетТип("Массив").НЕ_().Заполнено();
	
	Результат = Модуль.МассивЗначений(1, 2, 3);
	Ожидаем.Что(Результат).ИмеетТип("Массив").Заполнено().ИмеетДлину(3);
	Ожидаем.Что(Результат[0]).Равно(1);
	Ожидаем.Что(Результат[1]).Равно(2);
	Ожидаем.Что(Результат[2]).Равно(3);
	
	// Первый Null должен попасть в массив, второй - нет.
	
	Результат = Модуль.МассивЗначений(1, Null, 3, Null);
	Ожидаем.Что(Результат).ИмеетТип("Массив").Заполнено().ИмеетДлину(3);
	Ожидаем.Что(Результат[0]).Равно(1);
	Ожидаем.Что(Результат[1]).Равно(Null);
	Ожидаем.Что(Результат[2]).Равно(3);
	
КонецПроцедуры

Процедура МассивОдинаковыхЗначений() Экспорт

	ИмяМетода = "МассивОдинаковыхЗначений";

	Значение = Новый УникальныйИдентификатор();
	Количество = 42;
	Результат = Модуль.МассивОдинаковыхЗначений(Значение, Количество);
	Ожидаем
		.Что(Результат.Количество(), "Правильное количество")
		.Равно(Количество);
	Для Каждого Элемент Из Результат Цикл
		Ожидаем.Что(Элемент, "Правильное значение").Равно(Значение);
	КонецЦикла;
	
КонецПроцедуры // МассивОдинаковыхЗначений()

Процедура МассивОтсортирован() Экспорт
	
	ИмяМетода = "МассивОтсортирован";
	
	Параметры = Новый Массив(1); // Один параметр - Неопределено
	Ожидаем
		.Что(Модуль, "Исключение при неверном параметре")
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение();
	
	Массив = Новый Массив;
	Результат = Модуль.МассивОтсортирован(Массив);
	Ожидаем
		.Что(Результат, "Пустой массив отсортирован")
		.Равно(Истина);
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(3);
	Результат = Модуль.МассивОтсортирован(Массив);
	Ожидаем
		.Что(Результат, "Простой массив отсортирован")
		.Равно(Истина);
	
	Массив = Новый Массив;
	Массив.Добавить(3);
	Массив.Добавить(2);
	Массив.Добавить(1);
	ПоУбыванию = Истина;
	Результат = Модуль.МассивОтсортирован(Массив, ПоУбыванию);
	Ожидаем
		.Что(Результат, "Простой массив отсортирован по убыванию")
		.Равно(Истина);
	
	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(3);
	Массив.Добавить(2);
	Результат = Модуль.МассивОтсортирован(Массив);
	Ожидаем
		.Что(Результат, "Простой неотсортированный массив")
		.Равно(Ложь);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Неопределено);
	Список.Добавить(Ложь);
	Список.Добавить(0);
	Список.Добавить('00010101');
	Список.СортироватьПоЗначению();
	Массив = Список.ВыгрузитьЗначения();
	Результат = Модуль.МассивОтсортирован(Массив);
	Ожидаем
		.Что(Результат, "Отсортированный массив со смешанными типами")
		.Равно(Истина);
	
КонецПроцедуры // МассивОтсортирован()

Процедура МассивыСовпадают() Экспорт
	
	ПервыйМассив = Новый Массив;
	ВторойМассив = Новый Массив;
	
	Ожидаем
		.Что(Модуль.МассивыСовпадают(ПервыйМассив, ВторойМассив), "Пустые массивы равны")
		.ЭтоИстина();
	
	ПервыйМассив.Добавить(1);
	ПервыйМассив.Добавить(2);
	ПервыйМассив.Добавить(3);
	
	ВторойМассив.Очистить();
	ВторойМассив.Добавить(1);
	ВторойМассив.Добавить(2);
	ВторойМассив.Добавить(3);
	
	Ожидаем
		.Что(Модуль.МассивыСовпадают(ПервыйМассив, ВторойМассив), "Одинаковые массивы равны")
		.ЭтоИстина();
	
	ВторойМассив.Очистить();
	ВторойМассив.Добавить(1);
	ВторойМассив.Добавить(2);
	
	Ожидаем
		.Что(Модуль.МассивыСовпадают(ПервыйМассив, ВторойМассив), "Разные массивы не равны")
		.ЭтоЛожь();
	
	ВторойМассив.Очистить();
	ВторойМассив.Добавить(3);
	ВторойМассив.Добавить(2);
	ВторойМассив.Добавить(1);
	
	Ожидаем
		.Что(Модуль.МассивыСовпадают(ПервыйМассив, ВторойМассив), "Разный порядок элементов")
		.ЭтоЛожь();
	
КонецПроцедуры // МассивыСовпадают()

Процедура ПересечениеМассивов() Экспорт
	
	ПервыйМассив = Новый Массив;
	ПервыйМассив.Добавить(1);
	ПервыйМассив.Добавить(2);
	ПервыйМассив.Добавить(3);
	
	ВторойМассив = Новый Массив;
	ВторойМассив.Добавить(4);
	ВторойМассив.Добавить(2);
	ВторойМассив.Добавить(3);
	
	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(2);
	ОжидаемыйРезультат.Добавить(3);
	
	Результат = Модуль.ПересечениеМассивов(ПервыйМассив, ВторойМассив);
	
	Если ОжидаемыйРезультат.Количество() <> Результат.Количество() Тогда
		ВызватьИсключение "Неожиданные количество в результате";
	КонецЕсли;
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Если Результат[Индекс] <> ОжидаемыйРезультат[Индекс] Тогда
			ВызватьИсключение "Неожиданные элементы в результате";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗначениеИзМассива() Экспорт

	// Тест 1: Удаление существующего значения
	ИсходныйМассив = Новый Массив;
	ИсходныйМассив.Добавить(1);
	ИсходныйМассив.Добавить(2);
	ИсходныйМассив.Добавить(3);
	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(1);
	ОжидаемыйРезультат.Добавить(3);
	Результат = Модуль.УдалитьЗначениеИзМассива(ИсходныйМассив, 2);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

	// Тест 2: Удаление несуществующего значения
	ИсходныйМассив = Новый Массив;
	ИсходныйМассив.Добавить(1);
	ИсходныйМассив.Добавить(2);
	ИсходныйМассив.Добавить(3);
	ОжидаемыйРезультат = ИсходныйМассив;
	Результат = Модуль.УдалитьЗначениеИзМассива(ИсходныйМассив, 4);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

	// Тест 3: Удаление значения из пустого массива
	ИсходныйМассив = Новый Массив;
	ОжидаемыйРезультат = Новый Массив;
	Результат = Модуль.УдалитьЗначениеИзМассива(ИсходныйМассив, 1);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

	// Тест 4: Удаление всех вхождений значения
	ИсходныйМассив = Новый Массив;
	ИсходныйМассив.Добавить(1);
	ИсходныйМассив.Добавить(2);
	ИсходныйМассив.Добавить(2);
	ИсходныйМассив.Добавить(3);
	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(1);
	ОжидаемыйРезультат.Добавить(3);
	Результат = Модуль.УдалитьЗначениеИзМассива(ИсходныйМассив, 2);
	Ожидаем.Что(Модуль.МассивыСовпадают(Результат, ОжидаемыйРезультат)).Равно(Истина);

КонецПроцедуры



#КонецОбласти // Массив

#Область Соответствие

#КонецОбласти // Соответствие

#Область Структура

Процедура СтруктурыРавны() Экспорт
	
	ПерваяСтруктура = Новый Структура;
	ВтораяСтруктура = Новый Структура;
	
	Ожидаем
		.Что(Модуль.СтруктурыРавны(ПерваяСтруктура, ВтораяСтруктура), "Пустые структуры равны")
		.ЭтоИстина();
	
	ПерваяСтруктура.Вставить("Раз", 1);
	ПерваяСтруктура.Вставить("Два", 2);
	ПерваяСтруктура.Вставить("Три", 3);
	
	ВтораяСтруктура.Вставить("Раз", 1);
	ВтораяСтруктура.Вставить("Два", 2);
	ВтораяСтруктура.Вставить("Три", 3);
	
	Ожидаем
		.Что(Модуль.СтруктурыРавны(ПерваяСтруктура, ВтораяСтруктура), "Одинаковые структуры равны")
		.ЭтоИстина();
	
	ВтораяСтруктура.Очистить();
	ВтораяСтруктура.Вставить("Раз", 1);
	ВтораяСтруктура.Вставить("Два", 2);
	
	Ожидаем
		.Что(Модуль.СтруктурыРавны(ПерваяСтруктура, ВтораяСтруктура), "Разное количество элементов")
		.ЭтоЛожь();
	
	ВтораяСтруктура.Очистить();
	ВтораяСтруктура.Вставить("Раз", 1);
	ВтораяСтруктура.Вставить("Два", 2);
	ВтораяСтруктура.Вставить("Три", 3);
	ВтораяСтруктура.Вставить("Четыре", 4);
	
	Ожидаем
		.Что(Модуль.СтруктурыРавны(ПерваяСтруктура, ВтораяСтруктура), "Разное количество элементов")
		.ЭтоЛожь();
	
	
КонецПроцедуры // СтруктурыРавны()

#КонецОбласти // Структура

#Область Индексирование

Процедура ПостроитьИндексКоллекции() Экспорт
	
	КоличествоСтрок = 42;
	Коллекция = Новый ТаблицаЗначений;
	Коллекция.Колонки.Добавить("Индекс1", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Коллекция.Колонки.Добавить("Индекс2", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Коллекция.Колонки.Добавить("Поле", Новый ОписаниеТипов("Число"));
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ЭлементКоллекции = Коллекция.Добавить();
		ЭлементКоллекции.Индекс1 = Новый УникальныйИдентификатор();
		ЭлементКоллекции.Индекс2 = Новый УникальныйИдентификатор();
		ЭлементКоллекции.Поле = ГСЧ.СлучайноеЧисло(1, 999);
	КонецЦикла;

	Результат = Модуль.ПостроитьИндексКоллекции(Коллекция, "Индекс1, Индекс2");
	Ожидаем.Что(Результат)
		.ИмеетТип("Структура")
		.Заполнено();
	Ожидаем.Что(Модуль.ЕстьСвойство(Результат, "Поля")).ЭтоИстина();
	Ожидаем.Что(Модуль.ЕстьСвойство(Результат, "ПоляСтрокой")).ЭтоИстина();
	Ожидаем.Что(Модуль.ЕстьСвойство(Результат, "Индекс")).ЭтоИстина();
	Ожидаем.Что(Результат.Поля)
		.ИмеетТип("Массив")
		.Заполнено();
	Ожидаем.Что(Результат.Поля.Количество()).Равно(2);
	Ожидаем.Что(Результат.ПоляСтрокой).ИмеетТип("Строка").Заполнено();
	Ожидаем.Что(Результат.Индекс).ИмеетТип("Соответствие").Заполнено();

	Индекс = Результат.Индекс;
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		Сообщение = СтрШаблон("Проверяем строку %1", Коллекция.Индекс(ЭлементКоллекции) + 1);
		Ожидаем.Что(Индекс[ЭлементКоллекции[0]], Сообщение).ИмеетТип("Соответствие");
		Ожидаем.Что(Индекс[ЭлементКоллекции[0]][ЭлементКоллекции[1]], Сообщение).ИмеетТип("Массив");
		Ожидаем.Что(Индекс[ЭлементКоллекции[0]][ЭлементКоллекции[1]][0], Сообщение).Равно(ЭлементКоллекции);
	КонецЦикла;

КонецПроцедуры

Процедура НайтиПоИндексуКоллекции() Экспорт
	
	КоличествоСтрок = 42;
	Коллекция = Новый ТаблицаЗначений;
	Коллекция.Колонки.Добавить("Индекс1", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Коллекция.Колонки.Добавить("Индекс2", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Коллекция.Колонки.Добавить("Поле", Новый ОписаниеТипов("Число"));
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ЭлементКоллекции = Коллекция.Добавить();
		ЭлементКоллекции.Индекс1 = Новый УникальныйИдентификатор();
		ЭлементКоллекции.Индекс2 = Новый УникальныйИдентификатор();
		ЭлементКоллекции.Поле = ГСЧ.СлучайноеЧисло(1, 999);
	КонецЦикла;

	ИндексКоллекции = Модуль.ПостроитьИндексКоллекции(Коллекция, "Индекс1, Индекс2");
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		Сообщение = СтрШаблон("Проверяем строку %1", Коллекция.Индекс(ЭлементКоллекции) + 1);
		ПараметрыПоиска = Модуль.ПараметрыПоискаПоИндексуКоллекции(ИндексКоллекции, ЭлементКоллекции);
		Результат = Модуль.НайтиПоИндексуКоллекции(ИндексКоллекции, ПараметрыПоиска);
		Ожидаем.Что(Результат, Сообщение).ИмеетТип("Массив").Заполнено();
		Ожидаем.Что(Результат[0]).Равно(ЭлементКоллекции);
	КонецЦикла;

КонецПроцедуры // НайтиПоИндексуКоллекции()

#КонецОбласти // Индексирование

Процедура Первые() Экспорт

	Всего = 420;
	Количество = 42;
	Коллекция = Новый Массив;
	Для НомерЭлемента = 1 По Всего Цикл
		Коллекция.Добавить(Новый УникальныйИдентификатор());
	КонецЦикла;
	Эталон = Новый Массив;
	Для Индекс = 0 По Количество - 1 Цикл
		Эталон.Добавить(Коллекция[Индекс]);
	КонецЦикла;
	Результат = Модуль.Первые(Коллекция, Количество);
	Ожидаем
		.Что(Результат, "Правильный тип и длину")
		.ИмеетТип(Тип("Массив"))
		.ИмеетДлину(Эталон.Количество());
	Для Индекс = 0 По Эталон.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], "Элементы результата и эталона соответствуют.")
			.Равно(Эталон[Индекс]);
	КонецЦикла;
	
КонецПроцедуры

Процедура Последние() Экспорт

	Всего = 420;
	Количество = 42;
	Коллекция = Новый Массив;
	Для НомерЭлемента = 1 По Всего Цикл
		Коллекция.Добавить(Новый УникальныйИдентификатор());
	КонецЦикла;
	Эталон = Новый Массив;
	Для Индекс = Коллекция.ВГраница() - Количество По Коллекция.ВГраница() Цикл
		Эталон.Добавить(Коллекция[Индекс]);
	КонецЦикла;
	Результат = Модуль.Последние(Коллекция, Количество);
	Ожидаем
		.Что(Результат, "Правильный тип и длину")
		.ИмеетТип(Тип("Массив"))
		.ИмеетДлину(Эталон.Количество());
	Для Индекс = 0 По Эталон.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], "Элементы результата и эталона соответствуют.")
			.Равно(Эталон[Индекс]);
	КонецЦикла;
	
КонецПроцедуры

Процедура Средние() Экспорт

	Всего = 420;
	НачальныйИндекс = 123;
	Количество = 42;
	Коллекция = Новый Массив;
	Для НомерЭлемента = 1 По Всего Цикл
		Коллекция.Добавить(Новый УникальныйИдентификатор());
	КонецЦикла;
	Эталон = Новый Массив;
	Для Индекс = НачальныйИндекс По НачальныйИндекс + Количество - 1 Цикл
		Эталон.Добавить(Коллекция[Индекс]);
	КонецЦикла;
	Результат = Модуль.Средние(Коллекция, НачальныйИндекс, Количество);
	Ожидаем
		.Что(Результат, "Правильный тип и длину")
		.ИмеетТип(Тип("Массив"))
		.ИмеетДлину(Эталон.Количество());
	Для Индекс = 0 По Эталон.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], "Элементы результата и эталона соответствуют.")
			.Равно(Эталон[Индекс]);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоменятьМестамиКлючиИЗначения() Экспорт
	
	// Структура:
	Коллекция = Новый Структура("Раз, Два, Три", "One", "Two", "Three");
	Референс = Новый Структура("One, Two, Three", "Раз", "Два", "Три");
	Результат = Модуль.ПоменятьМестамиКлючиИЗначения(Коллекция);
	Ожидаем
		.Что(Результат).ИмеетТип("Структура")
		.Заполнено()
		.Что(Результат.Количество()).Равно(Референс.Количество());
	Для Каждого Элемент Из Референс Цикл
		Ожидаем
			.Что(Результат[Элемент.Ключ]).Равно(Референс[Элемент.Ключ]);
	КонецЦикла;
	
	// Соответствие:
	Коллекция = Новый Соответствие;
	Коллекция["Раз"] = "One";
	Коллекция["Два"] = "Two";
	Коллекция["Три"] = "Three";
	Референс = Новый Соответствие;
	Референс["One"] = "Раз";
	Референс["Two"] = "Два";
	Референс["Three"] = "Три";
	Результат = Модуль.ПоменятьМестамиКлючиИЗначения(Коллекция);
	Ожидаем
		.Что(Результат).ИмеетТип("Соответствие")
		.Заполнено()
		.Что(Результат.Количество()).Равно(Референс.Количество());
	Для Каждого Элемент Из Референс Цикл
		Ожидаем
			.Что(Результат[Элемент.Ключ]).Равно(Референс[Элемент.Ключ]);
	КонецЦикла;
	
КонецПроцедуры // ПоменятьМестамиКлючиИЗначения()

Процедура СкопироватьКоллекцию() Экспорт
	
	ТестироватьТаблицуДерево = Истина;
	
	
	
КонецПроцедуры // СкопироватьКоллекцию()

Процедура СортироватьКоллекцию() Экспорт
	
	ИмяМетода = "СортироватьКоллекцию";
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ИсходнаяТаблица = Новый ТаблицаЗначений;
	ИсходнаяТаблица.Колонки.Добавить("Поле1", ОписаниеТипаЧисло);
	ИсходнаяТаблица.Колонки.Добавить("Поле2", ОписаниеТипаЧисло);
	ИсходнаяТаблица.Колонки.Добавить("Поле3", ОписаниеТипаЧисло);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	Семя = ГСЧ.СлучайноеЧисло(1, 999);
	// Семя = 384;
	ГСЧ = Новый ГенераторСлучайныхЧисел(Семя);
	ЧислоСтрок = 1000;
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		НоваяСтрока = ИсходнаяТаблица.Добавить();
		НоваяСтрока[0] = ГСЧ.СлучайноеЧисло(0, 9);
		НоваяСтрока[1] = ГСЧ.СлучайноеЧисло(0, 9);
		НоваяСтрока[2] = ГСЧ.СлучайноеЧисло(0, 9);
	КонецЦикла;
	
	Поля = "Поле1, Поле2 Убыв, Поле3 Возр";
	Референс = ИсходнаяТаблица.Скопировать();
	Референс.Сортировать(Поля);
	Коллекция = ИсходнаяТаблица.Скопировать();
	Модуль.СортироватьКоллекцию(Коллекция, Поля);
	Для Индекс = 0 По Референс.Количество() - 1 Цикл
		Для Каждого Колонка Из Референс.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			ТекстСообщения = СтрШаблон(
					"Таблица значений отсортирована так же как методом Сортировать()
					|Индекс: %1
					|Поле: %2
					|Семя: %3",
					Индекс,
					ИмяПоля,
					Семя
				);
			Ожидаем
				.Что(Коллекция[Индекс][ИмяПоля], ТекстСообщения)
				.Равно(Референс[Индекс][ИмяПоля]);
		КонецЦикла;
	КонецЦикла;
	
	// Массив структур:
	Поля = "Поле1, Поле2 Убыв, Поле3 Возр";
	Референс = ИсходнаяТаблица.Скопировать();
	Референс.Сортировать(Поля);
	ПоляСтруктуры = Новый Массив;
	Для Каждого Колонка Из ИсходнаяТаблица.Колонки Цикл
		ПоляСтруктуры.Добавить(Колонка.Имя);
	КонецЦикла;
	ПоляСтруктуры = СтрСоединить(ПоляСтруктуры, ", ");
	Коллекция = Новый Массив;
	Для Каждого ТекущаяСтрока Из ИсходнаяТаблица Цикл
		ЭлементКоллекции = Новый Структура(ПоляСтруктуры);
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ТекущаяСтрока);
		Коллекция.Добавить(ЭлементКоллекции);
	КонецЦикла;
	Модуль.СортироватьКоллекцию(Коллекция, Поля);
	Для Индекс = 0 По Референс.Количество() - 1 Цикл
		Для Каждого Колонка Из Референс.Колонки Цикл
			ИмяПоля = Колонка.Имя;
			ТекстСообщения = СтрШаблон(
					"Массив структур отсортирован так же как методом ТаблицаЗанчений.Сортировать()
					|Индекс: %1
					|Поле: %2
					|Семя: %3",
					Индекс,
					ИмяПоля,
					Семя
				);
			Ожидаем
				.Что(Коллекция[Индекс][ИмяПоля], ТекстСообщения)
				.Равно(Референс[Индекс][ИмяПоля]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // СортироватьКоллекцию()

Процедура ВыгрузитьПолеКоллекции() Экспорт
	
	ИмяМетода = "ВыгрузитьПолеКоллекции";
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Поле");
	
	ЧислоЭлементов = 42;
	Генератор = Новый ГенераторСлучайныхЧисел;
	Для НомерЭлемента = 1 По ЧислоЭлементов Цикл
		Таблица.Добавить().Поле = Генератор.СлучайноеЧисло(1, 99);
	КонецЦикла;
	
	Референс = Таблица.ВыгрузитьКолонку(0);
	Результат = Модуль.ВыгрузитьПолеКоллекции(Таблица, "Поле");
	Для Индекс = 0 По Референс.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], "Результат соответствует ТаблицаЗначений.ВыгрузитьКолонку()")
			.Равно(Референс[Индекс]);
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьПолеКоллекции()

Процедура НайтиЭлементыКоллекцииПоТипу() Экспорт
	
	#Область ИзвлечениеЗначенийПоТипу
	
	Коллекция = Новый Массив;
	Коллекция.Добавить(Неопределено);
	Коллекция.Добавить(Истина);
	Коллекция.Добавить(1);
	Коллекция.Добавить("два");
	Коллекция.Добавить('20030303');
	
	Тип = Тип("Число");
	
	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(1);
	
	Результат = Модуль.НайтиЭлементыКоллекцииПоТипу(Коллекция, Тип);
	Если ОжидаемыйРезультат.Количество() <> Результат.Количество() Тогда
		ВызватьИсключение "Неожиданные количество в результате";
	КонецЕсли;
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Если Результат[Индекс] <> ОжидаемыйРезультат[Индекс] Тогда
			ВызватьИсключение "Неожиданные элементы в результате";
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти // ИзвлечениеЗначенийПоТипу
	
	#Область ИзвлечениеЗначенийПоТипам
	
	Коллекция = Новый Массив;
	Коллекция.Добавить(Неопределено);
	Коллекция.Добавить(Истина);
	Коллекция.Добавить(1);
	Коллекция.Добавить("два");
	Коллекция.Добавить('20030303');
	
	Тип = Новый ОписаниеТипов("Строка, Число");
	
	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(Неопределено);
	ОжидаемыйРезультат.Добавить(1);
	ОжидаемыйРезультат.Добавить("два");
	
	Результат = Модуль.НайтиЭлементыКоллекцииПоТипу(Коллекция, Тип);
	Если ОжидаемыйРезультат.Количество() <> Результат.Количество() Тогда
		ВызватьИсключение "Неожиданные количество в результате";
	КонецЕсли;
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Если Результат[Индекс] <> ОжидаемыйРезультат[Индекс] Тогда
			ВызватьИсключение "Неожиданные элементы в результате";
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти // ИзвлечениеЗначенийПоТипам
	
	#Область ИзвлечениеЗначенийПоТипамСтрокой
	
	Коллекция = Новый Массив;
	Коллекция.Добавить(Неопределено);
	Коллекция.Добавить(Истина);
	Коллекция.Добавить(1);
	Коллекция.Добавить("два");
	Коллекция.Добавить('20030303');
	
	Тип = "Строка, Число";
	
	ОжидаемыйРезультат = Новый Массив;
	ОжидаемыйРезультат.Добавить(Неопределено);
	ОжидаемыйРезультат.Добавить(1);
	ОжидаемыйРезультат.Добавить("два");
	
	Результат = Модуль.НайтиЭлементыКоллекцииПоТипу(Коллекция, Тип);
	
	Если ОжидаемыйРезультат.Количество() <> Результат.Количество() Тогда
		ВызватьИсключение "Неожиданные количество в результате";
	КонецЕсли;
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Если Результат[Индекс] <> ОжидаемыйРезультат[Индекс] Тогда
			ВызватьИсключение "Неожиданные элементы в результате";
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти // ИзвлечениеЗначенийПоТипамСтрокой
	
КонецПроцедуры

Процедура ОбновитьКоллекцию() Экспорт

    // Тест 1: Обновление существующих элементов коллекции
    ИсходнаяКоллекция = Новый ТаблицаЗначений;
    ИсходнаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ИсходнаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

    Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "A";
    Строка.Значение = 1;

    Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "B";
    Строка.Значение = 2;

    ОбновляемаяКоллекция = Новый ТаблицаЗначений;
    ОбновляемаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ОбновляемаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

    Строка = ОбновляемаяКоллекция.Добавить();
    Строка.Ключ = "A";
    Строка.Значение = 10;

    Строка = ОбновляемаяКоллекция.Добавить();
    Строка.Ключ = "C";
    Строка.Значение = 3;

    ОжидаемаяКоллекция = Новый ТаблицаЗначений;
    ОжидаемаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ОжидаемаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "A";
    Строка.Значение = 10;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "B";
    Строка.Значение = 2;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "C";
    Строка.Значение = 3;

	Результат = ИсходнаяКоллекция.Скопировать();
	Добавлять = Истина;
	Удалять = Ложь;
	Сортировать = Ложь;
    Модуль.ОбновитьКоллекцию(Результат, ОбновляемаяКоллекция, "Ключ", Добавлять, Удалять, Сортировать);

    Ожидаем.Что(Результат, "Получили обновленную коллекцию").ИмеетТип("ТаблицаЗначений");
    Ожидаем.Что(Результат.Количество(), "Количество строк в коллекции").Равно(ОжидаемаяКоллекция.Количество());

    Для Индекс = 0 По Результат.Количество() - 1 Цикл
        Ожидаем.Что(Результат[Индекс].Ключ, "Ключи совпадают").Равно(ОжидаемаяКоллекция[Индекс].Ключ);
        Ожидаем.Что(Результат[Индекс].Значение, "Значения совпадают").Равно(ОжидаемаяКоллекция[Индекс].Значение);
    КонецЦикла;

    // Тест 2: Обновление пустой коллекции
    ИсходнаяКоллекция = Новый ТаблицаЗначений;
    ИсходнаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ИсходнаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

    ОбновляемаяКоллекция = Новый ТаблицаЗначений;
    ОбновляемаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ОбновляемаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

    Строка = ОбновляемаяКоллекция.Добавить();
    Строка.Ключ = "A";
    Строка.Значение = 10;

    Строка = ОбновляемаяКоллекция.Добавить();
    Строка.Ключ = "B";
    Строка.Значение = 20;

    ОжидаемаяКоллекция = Новый ТаблицаЗначений;
    ОжидаемаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ОжидаемаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "A";
    Строка.Значение = 10;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "B";
    Строка.Значение = 20;

	Результат = ИсходнаяКоллекция.Скопировать();
    Модуль.ОбновитьКоллекцию(Результат, ОбновляемаяКоллекция, "Ключ");

    Ожидаем.Что(Результат, "Получили обновленную коллекцию").ИмеетТип("ТаблицаЗначений");
    Ожидаем.Что(Результат.Количество(), "Количество строк в коллекции").Равно(ОжидаемаяКоллекция.Количество());

    Для Индекс = 0 По Результат.Количество() - 1 Цикл
        Ожидаем.Что(Результат[Индекс].Ключ, "Ключи совпадают").Равно(ОжидаемаяКоллекция[Индекс].Ключ);
        Ожидаем.Что(Результат[Индекс].Значение, "Значения совпадают").Равно(ОжидаемаяКоллекция[Индекс].Значение);
    КонецЦикла;

    // Тест 3: Сортировка коллекции
    ИсходнаяКоллекция = Новый ТаблицаЗначений;
    ИсходнаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ИсходнаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

	Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "A";
    Строка.Значение = 0;

    Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "B";
    Строка.Значение = 1;

    Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "C";
    Строка.Значение = 2;

    Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "D";
    Строка.Значение = 3;

    Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "E";
    Строка.Значение = 4;

    Строка = ИсходнаяКоллекция.Добавить();
    Строка.Ключ = "F";
    Строка.Значение = 5;

	ОбновляемаяКоллекция = Новый ТаблицаЗначений;
    ОбновляемаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ОбновляемаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

    Строка = ОбновляемаяКоллекция.Добавить();
    Строка.Ключ = "C";
    Строка.Значение = 2;

    Строка = ОбновляемаяКоллекция.Добавить();
    Строка.Ключ = "E";
    Строка.Значение = 4;

    Строка = ОбновляемаяКоллекция.Добавить();
    Строка.Ключ = "B";
    Строка.Значение = 1;

    ОжидаемаяКоллекция = Новый ТаблицаЗначений;
    ОжидаемаяКоллекция.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
    ОжидаемаяКоллекция.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

	Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "A";
    Строка.Значение = 0;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "C";
    Строка.Значение = 2;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "E";
    Строка.Значение = 4;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "D";
    Строка.Значение = 3;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "B";
    Строка.Значение = 1;

    Строка = ОжидаемаяКоллекция.Добавить();
    Строка.Ключ = "F";
    Строка.Значение = 5;

	Результат = ИсходнаяКоллекция.Скопировать();
	Добавлять = Истина;
	Удалять = Ложь;
	Сортировать = Истина;
    Модуль.ОбновитьКоллекцию(Результат, ОбновляемаяКоллекция, "Ключ", Добавлять, Удалять, Сортировать);

    Ожидаем.Что(Результат, "Получили обновленную коллекцию").ИмеетТип("ТаблицаЗначений");
    Ожидаем.Что(Результат.Количество(), "Количество строк в коллекции").Равно(ОжидаемаяКоллекция.Количество());
	Для Индекс = 0 По ОжидаемаяКоллекция.Количество() - 1 Цикл
		Ожидаем.Что(Результат[Индекс].Ключ, "Коллекция отсортирована правильно").Равно(ОжидаемаяКоллекция[Индекс].Ключ);
		Ожидаем.Что(Результат[Индекс].Значение).Равно(ОжидаемаяКоллекция[Индекс].Значение);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти // Коллекции

#Область Строка

#Область РимскийЛитерал

Процедура РимскийЛитерал() Экспорт
	
	// Ожидаем.Что(Модуль.РимскийЛитерал(0)).ВыбрасываетИсклю)чение();
	Ожидаем.Что(Модуль.РимскийЛитерал(1)).Равно("Ⅰ");
	Ожидаем.Что(Модуль.РимскийЛитерал(2)).Равно("Ⅱ");
	Ожидаем.Что(Модуль.РимскийЛитерал(3)).Равно("Ⅲ");
	Ожидаем.Что(Модуль.РимскийЛитерал(4)).Равно("Ⅳ");
	Ожидаем.Что(Модуль.РимскийЛитерал(5)).Равно("Ⅴ");
	Ожидаем.Что(Модуль.РимскийЛитерал(6)).Равно("Ⅵ");
	Ожидаем.Что(Модуль.РимскийЛитерал(7)).Равно("Ⅶ");
	Ожидаем.Что(Модуль.РимскийЛитерал(8)).Равно("Ⅷ");
	Ожидаем.Что(Модуль.РимскийЛитерал(9)).Равно("Ⅸ");
	Ожидаем.Что(Модуль.РимскийЛитерал(10)).Равно("Ⅹ");
	Ожидаем.Что(Модуль.РимскийЛитерал(11)).Равно("Ⅺ");
	Ожидаем.Что(Модуль.РимскийЛитерал(12)).Равно("Ⅻ");
	//Ожидаем.Что(Модуль.РимскийЛитерал(13)).ВыбрасываетИсключение();
	//Ожидаем.Что(Модуль.РимскийЛитерал(Неопределено)).ВыбрасываетИсключение();
	
КонецПроцедуры

Процедура РимскийЛитерал_Исключения() Экспорт
	
	ИмяМетода = "РимскийЛитерал";
	Параметры = Модуль.МассивЗначений(0);
	Ожидаем.Что(Модуль, "Вызываем с параметром 0").Метод(ИмяМетода, Параметры).ВыбрасываетИсключение();
	
КонецПроцедуры // РимскийЛитерал_Исключения()

#КонецОбласти // РимскийЛитерал

#Область РимскоеЧисло

Процедура РимскоеЧисло_Простой() Экспорт
	
	Ожидаем.Что(Модуль.РимскоеЧисло(1)).Равно("I");
	Ожидаем.Что(Модуль.РимскоеЧисло(5)).Равно("V");
	Ожидаем.Что(Модуль.РимскоеЧисло(10)).Равно("X");
	Ожидаем.Что(Модуль.РимскоеЧисло(50)).Равно("L");
	Ожидаем.Что(Модуль.РимскоеЧисло(100)).Равно("C");
	Ожидаем.Что(Модуль.РимскоеЧисло(500)).Равно("D");
	Ожидаем.Что(Модуль.РимскоеЧисло(1000)).Равно("M");
	
	Ожидаем.Что(Модуль.РимскоеЧисло(1666)).Равно("MDCLXVI");
	
	Ожидаем.Что(Модуль.РимскоеЧисло(499, 0)).Равно("CDXCIX");
	Ожидаем.Что(Модуль.РимскоеЧисло(499, 1)).Равно("LDVLIV");
	Ожидаем.Что(Модуль.РимскоеЧисло(499, 2)).Равно("XDIX");
	Ожидаем.Что(Модуль.РимскоеЧисло(499, 3)).Равно("VDIV");
	Ожидаем.Что(Модуль.РимскоеЧисло(499, 4)).Равно("ID");
	
	Ожидаем.Что(Модуль.РимскоеЧисло(1999, Истина)).Равно("MCMXCIX");
	Ожидаем.Что(Модуль.РимскоеЧисло(1999, Ложь)).Равно("MIM");
	
КонецПроцедуры

Процедура РимскоеЧисло_ПолнаяТаблица() Экспорт
	
	ТаблицаДляТеста = РимскоеЧисло_ПолнаяТаблицаИзФайла();
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляТеста Цикл
		Число = ТекущаяСтрока[0];
		Для Форма = 0 По 1 Цикл
			ОжидаемоеЗначение = ТекущаяСтрока[Форма + 1];
			Ожидаем.Что(Модуль.РимскоеЧисло(Число, Форма)).Равно(ОжидаемоеЗначение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция РимскоеЧисло_ПолнаяТаблицаИзФайла()
	
	ПолноеИмяФайлаЧисел = ".\tests\assets\РимскиеЧисла.csv";
	
	Файл = Новый Файл(ПолноеИмяФайлаЧисел);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Файл чисел не существует";
	КонецЕсли;
	
	// Файл - это CSV-таблица со строкой шапки из колонок:
	// Число;Римское0;Римское1;Римское2;Римское3;Римское4
	// где РимскоеN - это значение функции РИМСКОЕ(Число;N)
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ПолноеИмяФайлаЧисел);
	
	ТаблицаЧисел = Новый ТаблицаЗначений;
	ТаблицаЧисел.Колонки.Добавить("Число", Новый ОписаниеТипов("Число"));
	ТаблицаЧисел.Колонки.Добавить("Римское0", Новый ОписаниеТипов("Строка"));
	ТаблицаЧисел.Колонки.Добавить("Римское1", Новый ОписаниеТипов("Строка"));
	ТаблицаЧисел.Колонки.Добавить("Римское2", Новый ОписаниеТипов("Строка"));
	ТаблицаЧисел.Колонки.Добавить("Римское3", Новый ОписаниеТипов("Строка"));
	ТаблицаЧисел.Колонки.Добавить("Римское4", Новый ОписаниеТипов("Строка"));
	
	ЭтоСтрокаЗаголовка = Истина;
	Пока Истина Цикл
		ТекущаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		Если ТекущаяСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ЭтоСтрокаЗаголовка Тогда
			ЭтоСтрокаЗаголовка = Ложь;
			Продолжить;
		КонецЕсли;
		
		СоставСтроки = СтрРазделить(ТекущаяСтрока, ";");
		СтрокаЧисел = ТаблицаЧисел.Добавить();
		Для Индекс = 0 По 5 Цикл
			СтрокаЧисел[Индекс] = СоставСтроки[Индекс];
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	
	Возврат ТаблицаЧисел;
	
КонецФункции // РимскоеЧисло_ПолнаяТаблицаИзФайла()

#КонецОбласти // РимскоеЧисло

Процедура ЧислоИзРимскогоЧисла() Экспорт
	
	#Область Простой
	
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("I")).Равно(1);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("V")).Равно(5);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("X")).Равно(10);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("L")).Равно(50);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("C")).Равно(100);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("D")).Равно(500);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("M")).Равно(1000);
	
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("MDCLXVI")).Равно(1666);
	
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("CDXCIX")).Равно(499);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("LDVLIV")).Равно(499);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("XDIX")).Равно(499);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("VDIV")).Равно(499);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("ID")).Равно(499);
	
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("MCMXCIX")).Равно(1999);
	Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла("MIM")).Равно(1999);
	
	#КонецОбласти // Простой
	
	#Область Полный
	
	ТестироватьПолный = Ложь;
	Если ТестироватьПолный Тогда
		
		ТаблицаДляТеста = РимскоеЧисло_ПолнаяТаблицаИзФайла();
		
		Для Каждого ТекущаяСтрока Из ТаблицаДляТеста Цикл
			ОжидаемоеЗначение = ТекущаяСтрока[0];
			Для Форма = 0 По 1 Цикл
				РимскоеЧисло = ТекущаяСтрока[Форма + 1];
				Ожидаем.Что(Модуль.ЧислоИзРимскогоЧисла(РимскоеЧисло)).Равно(ОжидаемоеЗначение);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти // Полный
	
КонецПроцедуры

#КонецОбласти // Строка


Процедура ОбратныйПорядок() Экспорт
	
	ЧтоПроверяем = "Обратный порядок по пустому масиву";
	Ожидаем.Что(Модуль.ОбратныйПорядок(Новый Массив), ЧтоПроверяем)
		.ИмеетТип("Массив")
		.Не_().Заполнено();
	
	ЧтоПроверяем = "Обратный порядок списка значений";
	ИсходнаяКоллекция = Новый СписокЗначений;
	ИсходнаяКоллекция.Добавить(1);
	ИсходнаяКоллекция.Добавить(Истина);
	ИсходнаяКоллекция.Добавить('20010101');
	Результат = Модуль.ОбратныйПорядок(ИсходнаяКоллекция);
	Ожидаем.Что(Результат, ЧтоПроверяем).ИмеетТип("Массив");
	Ожидаем.Что(Результат, ЧтоПроверяем).ИмеетДлину(3);
	Ожидаем.Что(Результат[0]).Равно(ИсходнаяКоллекция[2]);
	Ожидаем.Что(Результат[1]).Равно(ИсходнаяКоллекция[1]);
	Ожидаем.Что(Результат[2]).Равно(ИсходнаяКоллекция[0]);
	
КонецПроцедуры

Процедура ОбеспечитьСвойствоСтруктуры() Экспорт
	
	ИмяМетода = "ОбеспечитьСвойствоСтруктуры";
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(Неопределено, "Ключ");
	Ожидаем
		.Что(Модуль, "Исключение при неверном параметре")
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение();
	
	Структура = Новый Структура;
	Ключ = "Ключ";
	Значение = 123;
	
	Ожидаем
		.Что(Модуль.ОбеспечитьСвойствоСтруктуры(Структура, Ключ, Значение), "Вернется значение из параметра")
		.Равно(Значение);
	
	Структура = Новый Структура(Ключ, 456);
	Ключ = "Ключ";
	Значение = 123;
	Ожидаем
		.Что(Модуль.ОбеспечитьСвойствоСтруктуры(Структура, Ключ, Значение), "Вернется значение из структуры")
		.Равно(456);
	
	Структура = Новый Структура(Ключ, 456);
	Ключ = "ВложеннаяСтруктура";
	Значение = Новый Структура;
	Ожидаем
		.Что(Модуль.ОбеспечитьСвойствоСтруктуры(Структура, Ключ, Значение), "Вернется переданное значение")
		.Равно(Значение);
	
КонецПроцедуры // ОбеспечитьСвойствоСтруктуры

Процедура РаспределитьДатыПоХронологии() Экспорт
	
	ИмяМетода = "РаспределитьДатыПоХронологии";
	
	ТекстСообщения = "Исключение на неожиданный параметр";
	ИсходныеДаты = Неопределено;
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(ИсходныеДаты);
	Ожидаем
		.Что(Модуль, ТекстСообщения)
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение();
	
	ТекстСообщения = "Исключение на число в массиве";
	ИсходныеДаты = Новый Массив;
	ИсходныеДаты.Добавить('20000101');
	ИсходныеДаты.Добавить(123456);
	ИсходныеДаты.Добавить('20000101');
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(ИсходныеДаты);
	Ожидаем
		.Что(Модуль, ТекстСообщения)
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение();
	
	ТекстСообщения = "Пустой результат на пустой масив";
	ИсходныеДаты = Новый Массив;
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты);
	Ожидаем
		.Что(Результат, ТекстСообщения)
		.ИмеетТип("Массив")
		.Не_().Заполнено();
	
	ТекстСообщения = "Проверяем изначально отсортированные даты";
	ИсходныеДаты = Новый Массив;
	ИсходныеДаты.Добавить(НачалоГода(ТекущаяДата()) + 0);
	ИсходныеДаты.Добавить(НачалоГода(ТекущаяДата()) + 1);
	ИсходныеДаты.Добавить(НачалоГода(ТекущаяДата()) + 2);
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты);
	Для Индекс = 0 По ИсходныеДаты.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], ТекстСообщения)
			.Равно(ИсходныеДаты[Индекс]);
	КонецЦикла;
	
	ТекстСообщения = "Простая перестановка одной даты";
	ИсходныеДаты = Новый Массив;
	ИсходныеДаты.Добавить(НачалоГода(ТекущаяДата()) + 0);
	ИсходныеДаты.Добавить(НачалоГода(ТекущаяДата()) + 2);
	ИсходныеДаты.Добавить(НачалоГода(ТекущаяДата()) + 1);
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты);
	Для Индекс = 0 По ИсходныеДаты.ВГраница() Цикл
		Ожидаем
			.Что(Результат[0], ТекстСообщения).Равно(ИсходныеДаты[0])
			.Что(Результат[1], ТекстСообщения).Равно(ИсходныеДаты[2])
			.Что(Результат[2], ТекстСообщения).Равно(ИсходныеДаты[1]);
	КонецЦикла;
	
	ТекстСообщения = "Большой массив одинаковых дат";
	РазмерМассива = 10000;
	ИсходныеДаты = Новый Массив;
	Дата = НачалоГода(ТекущаяДата());
	Для НомерЭлемента = 1 По РазмерМассива Цикл
		ИсходныеДаты.Добавить(Дата);
	КонецЦикла;
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты);
	Ожидаем.Что(Результат.Количество(), ТекстСообщения).Равно(ИсходныеДаты.Количество());
	Для Индекс = 1 По ИсходныеДаты.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], ТекстСообщения).Больше(Результат[Индекс - 1]);
	КонецЦикла;
	
	ТекстСообщения = "Большой массив случайных дат";
	РазмерМассива = 1000;
	ИсходныеДаты = Новый Массив;
	НачалоГода = НачалоГода(ТекущаяДата());
	Генератор = Новый ГенераторСлучайныхЧисел;
	КоличествоСекундВГоду = 365 * 24 * 60 * 60;
	Для НомерЭлемента = 1 По РазмерМассива Цикл
		ИсходныеДаты.Добавить(Дата + Генератор.СлучайноеЧисло(0, КоличествоСекундВГоду - 1));
	КонецЦикла;
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты);
	Ожидаем.Что(Результат.Количество(), ТекстСообщения).Равно(ИсходныеДаты.Количество());
	Для Индекс = 1 По ИсходныеДаты.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], ТекстСообщения)
			.Больше(Результат[Индекс - 1]);
	КонецЦикла;
	
	ТекстСообщения = "Слишком много дат на одну минуту";
	РазмерМассива = 99;
	ИсходныеДаты = Новый Массив;
	Дата = НачалоГода(ТекущаяДата());
	Для НомерЭлемента = 1 По РазмерМассива Цикл
		ИсходныеДаты.Добавить(Дата);
	КонецЦикла;
	Период = "Минута";
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(ИсходныеДаты, Период);
	ФрагментИсключения = "много дат";
	Ожидаем
		.Что(Модуль, ТекстСообщения)
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение(ФрагментИсключения);
	
	ТекстСообщения = "Нужно разместить даты до закрытия дня со сдвигом назад, чтобы все попали в один день";
	РазмерМассива = 5;
	ИсходныеДаты = Новый Массив;
	Дата = Дата(2023, 12, 31, 23, 59, 59);
	Для НомерЭлемента = 1 По РазмерМассива Цикл
		ИсходныеДаты.Добавить(Дата);
	КонецЦикла;
	Период = "День";
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты, Период);
	Для Индекс = 1 По ИсходныеДаты.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], ТекстСообщения)
			.МеньшеИлиРавно(КонецДня(Дата));
	КонецЦикла;
	
	ТекстСообщения = "Запрет перехода дат между периодами";
	ИсходныеДаты = Новый Массив;
	ИсходныеДаты.Добавить('20120102');
	ИсходныеДаты.Добавить('20120101');
	Период = "День";
	Параметры = ОбщегоНазначенияКлиентСервер.МассивЗначений(ИсходныеДаты, Период);
	ФрагментИсключения = "период";
	Ожидаем
		.Что(Модуль, ТекстСообщения)
		.Метод(ИмяМетода, Параметры)
		.ВыбрасываетИсключение(ФрагментИсключения);
	
	ТекстСообщения = "Минимальная дата между Максимальными";
	ИсходныеДаты = Новый Массив;
	ИсходныеДаты.Добавить('20120101120000'); // 12:00
	ИсходныеДаты.Добавить('20120101');
	ИсходныеДаты.Добавить('20120101130000'); // 13:00
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты);
	Для Индекс = 1 По ИсходныеДаты.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], ТекстСообщения)
			.Больше(Результат[Индекс - 1]);
	КонецЦикла;
	
	ТекстСообщения = "Минимальная дата между Максимальными";
	ИсходныеДаты = Новый Массив;
	ИсходныеДаты.Добавить('20120101200001'); // 20:00:01
	ИсходныеДаты.Добавить('20120101000002');
	ИсходныеДаты.Добавить('20120101000003');
	ИсходныеДаты.Добавить('20120101000003');
	ИсходныеДаты.Добавить('20120101200000'); // 20:00
	ИсходныеДаты.Добавить('20120101230000'); // 23:00
	Период = "День";
	Результат = Модуль.РаспределитьДатыПоХронологии(ИсходныеДаты, Период);
	Для Индекс = 1 По ИсходныеДаты.ВГраница() Цикл
		Ожидаем
			.Что(Результат[Индекс], ТекстСообщения)
			.Больше(Результат[Индекс - 1]);
	КонецЦикла;
	
	
КонецПроцедуры // РаспределитьДатыПоХронологии

Процедура ЭтоВисокосныйГод() Экспорт
	
	Годы = Новый Соответствие;
	Годы[2001] = Ложь;
	Годы[2345] = Ложь;
	Годы['20240101'] = Истина;
	Годы[1700] = Ложь;
	Годы[1800] = Ложь;
	Годы[1900] = Ложь;
	Годы[2100] = Ложь;
	Годы[2200] = Ложь;
	Годы[2300] = Ложь;
	Годы[2500] = Ложь;
	Годы[2600] = Ложь;
	Годы[2600] = Ложь;
	Годы[1600] = Истина;
	Годы[2000] = Истина;
	Годы[2400] = Истина;
	
	ИмяМетода = "ЭтоВисокосныйГод";
	
	Для Каждого ВариантГода Из Годы Цикл
		Год = ВариантГода.Ключ;
		Високосный = ВариантГода.Значение;
		ТекстСообщения = СтрШаблон(
				"Год %1 - %2",
				?(ТипЗнч(Год) = Тип("Число"), Год, Год(Год)),
				?(Високосный, "Високосный", "НЕ високосный")
			);
		Ожидаем
			.Что(Модуль.ЭтоВисокосныйГод(Год), ТекстСообщения).Равно(Високосный);
	КонецЦикла;
	
КонецПроцедуры

#Область Строки

Процедура СтрНайтиЦеликом() Экспорт
	
	ИмяМетода = "СтрНайтиЦеликом";
	
	КонтрольнаяФраза =
		"Кроваво-черное ничто пустилось вить систему клеток, связанных внутри, клеток, связанных внутри, 
		|клеток в едином стебле и явственно, до жути на фоне тьмы ввысь белым бил фонтан.";
	
	Строка = "";
	ПодстрокаПоиска = "тест";
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска);
	Ожидаем
		.Что(Результат, "по пустой строке - пустой результат")
		.Равно(0);
	
	Строка = КонтрольнаяФраза;
	ПодстрокаПоиска = "черное";
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска);
	Ожидаем
		.Что(Результат, "Находим ""черное"", отделенное дефисом")
		.Равно(СтрДлина("Кроваво-") + 1);
	
	Строка = КонтрольнаяФраза;
	ПодстрокаПоиска = "систем";
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска);
	Ожидаем
		.Что(Результат, "Не находим ""систем"", оно часть слова ""систему""")
		.Равно(0);
	
	Строка = КонтрольнаяФраза;
	ПодстрокаПоиска = "фонтан";
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска, НаправлениеПоиска.СКонца);
	Ожидаем
		.Что(Результат, "Находим ""фонтан"", с конца строки")
		.Больше(0);
	
	Строка = КонтрольнаяФраза;
	ПодстрокаПоиска = "связанных внутри";
	НомерВхождения = 2;
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска, , НомерВхождения);
	Ожидаем
		.Что(Результат, "Находим второе вхождение ""связанных внутри""")
		.Больше(0);
	
	Строка = КонтрольнаяФраза;
	ПодстрокаПоиска = "связанных внутри";
	НомерВхождения = 3;
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска, , , НомерВхождения);
	Ожидаем
		.Что(Результат, "Не находим третье вхождение ""связанных внутри""")
		.Равно(0);
	
	Строка = КонтрольнаяФраза;
	ПодстрокаПоиска = "клеток";
	Направление = НаправлениеПоиска.СКонца;
	НомерВхождения = 3;
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска, Направление, , НомерВхождения);
	Ожидаем
		.Что(Результат, "Находим третье вхождение ""клеток"" с конца")
		.Больше(0);
	
	Строка = КонтрольнаяФраза;
	ПодстрокаПоиска = "клеток";
	НачальнаяПозиция = СтрНайти(Строка, ПодстрокаПоиска) + СтрДлина(ПодстрокаПоиска);
	НомерВхождения = 3;
	Результат = Модуль.СтрНайтиЦеликом(Строка, ПодстрокаПоиска, , НачальнаяПозиция, НомерВхождения);
	Ожидаем
		.Что(Результат, "Не находим третье вхождение ""клеток"", поскольку искали после первого вхождения")
		.Равно(0);
	
КонецПроцедуры

Процедура СоставПредставленияДокумента() Экспорт

	// Платформенное преобрабование в дату не поддерживается OneScript

	ПредставлениеДокумента = "Имя документа АБВГ-123456 от 01.02.2003 04:05:06";
	Результат = Модуль.СоставПредставленияДокумента(ПредставлениеДокумента);
	Ожидаем.Что(Результат.Наименование).Равно("Имя документа");
	Ожидаем.Что(Результат.Номер).Равно("АБВГ-123456");
	Ожидаем.Что(Результат.Дата).Равно('20030201040506');

	
КонецПроцедуры // СоставПредставленияДокумента()

#КонецОбласти // Строки

#Область Ссылки

Процедура РазделитьСтрокуПоНомерамСимволов() Экспорт

	// Платформенное преобрабование в дату не поддерживается OneScript

	Строка = "абвгде";
	НомераСимволов = Новый Массив;
	НомераСимволов.Добавить(3);
	НомераСимволов.Добавить(5);
	Результат = Модуль.РазделитьСтрокуПоНомерамСимволов(Строка, НомераСимволов);
	Ожидаем.Что(Результат.Количество()).Равно(3);
	Ожидаем.Что(Результат[0]).Равно("аб");
	Ожидаем.Что(Результат[1]).Равно("вг");
	Ожидаем.Что(Результат[2]).Равно("де");
	
КонецПроцедуры // РазделитьСтрокуПоНомерамСимволов()

#КонецОбласти // Ссылки

#Область УникальныйИдентификатор

Процедура ЭтоУникальныйИдентификатор() Экспорт
	
	ВариантыПроверки = Новый Соответствие;
	
	КоличествоИдентификаторов = 100;
	Для НомерИдентификатора = 1 По КоличествоИдентификаторов Цикл
		ВариантыПроверки[Строка(Новый УникальныйИдентификатор())] = Истина;
	КонецЦикла;
	ВариантыПроверки["123e4567-e89b-12d3-a456-426655440000"] = Истина;
	ВариантыПроверки["123e4567-e89b-12d3-a45642665544-0000"] = Ложь;
	ВариантыПроверки["фффффффф-фффф-фффф-фффф-фффффффффффф"] = Ложь;
	ВариантыПроверки["123e4567-e89b-12d3-a456-42665544"] = Ложь;
	ВариантыПроверки["{123e4567-e89b-12d3-a456-426655440000}"] = Ложь;
	
	ДопускатьСкобки = Ложь;
	Для Каждого ВариантПроверки Из ВариантыПроверки Цикл
		ТекстСообщения = СтрШаблон(
				"Строка ""%1"" - Это %2 (%3)",
				ВариантПроверки.Ключ,
				?(ВариантПроверки.Значение, "УникальныйИдентификатор", ("НЕ УникальныйИдентфикатор")),
				?(ДопускатьСкобки, "со скобками", "без скобок")
			);
		Ожидаем
			.Что(Модуль.ЭтоУникальныйИдентификатор(ВариантПроверки.Ключ, ДопускатьСкобки), ТекстСообщения)
			.Равно(ВариантПроверки.Значение);
	КонецЦикла;
	
	#Область Скобки
	
	ДопускатьСкобки = Истина;
	ВариантыПроверки.Очистить();
	ВариантыПроверки["123e4567-e89b-12d3-a456-426655440000"] = Истина;
	ВариантыПроверки["{123e4567-e89b-12d3-a456-426655440000}"] = Истина;
	ВариантыПроверки["(123e4567-e89b-12d3-a456-426655440000)"] = Истина;
	ВариантыПроверки["(123e4567-e89b-12d3-a456-426655440000}"] = Ложь;
	ВариантыПроверки["({123e4567-e89b-12d3-a456-426655440000})"] = Ложь;
	ВариантыПроверки["{(123e4567-e89b-12d3-a456-426655440000)}"] = Ложь;
	ВариантыПроверки["[123e4567-e89b-12d3-a456-426655440000]"] = Ложь;
	ВариантыПроверки["123e4567-e89b-12{}-a456-426655440000"] = Ложь;
	ВариантыПроверки["{123e4567-e89b-12{}-a456-426655440000}"] = Ложь;
	
	Для Каждого ВариантПроверки Из ВариантыПроверки Цикл
		ТекстСообщения = СтрШаблон(
				"Строка ""%1"" - Это %2 (%3)",
				ВариантПроверки.Ключ,
				?(ВариантПроверки.Значение, "УникальныйИдентификатор", ("НЕ УникальныйИдентфикатор")),
				?(ДопускатьСкобки, "со скобками", "без скобок")
			);
		Ожидаем
			.Что(Модуль.ЭтоУникальныйИдентификатор(ВариантПроверки.Ключ, ДопускатьСкобки), ТекстСообщения)
			.Равно(ВариантПроверки.Значение);
	КонецЦикла;
	
	#КонецОбласти // Скобки
	
	
КонецПроцедуры

#КонецОбласти // УникальныйИдентификатор

#Область Конвертация

Процедура ИмяОбъектаВалидно() Экспорт
	
	Примеры = Новый Соответствие;
	Примеры["ИмяОбъекта"] = Истина;
	Примеры["ИмяОбъекта123"] = Истина;
	Примеры["_Имя_Объекта_123_"] = Истина;
	Примеры["111одинодин"] = Ложь;
	Примеры[""] = Ложь;
	Примеры["ObjectNаme123"] = Истина;
	Примеры["451поФаренгейту"] = Ложь;
	
	Для каждого Пример Из Примеры Цикл
		Результат = Модуль.ИмяОбъектаВалидно(Пример.Ключ);
		Эталон = Пример.Значение;
		ТекстСообщения = СтрШаблон("""%1"" %2", Пример.Ключ,?(Пример.Значение, "Валидно", "НЕ валидно"));
		Ожидаем.Что(Результат, ТекстСообщения).Равно(Эталон);
	КонецЦикла;

КонецПроцедуры // ИмяОбъектаВалидно()

Процедура ИмяОбъектаИзСинонима() Экспорт
	
	Примеры = Новый Соответствие;
	Примеры[""] = "";
	Примеры["Я знаю три слова, три матерных слова"] = "ЯЗнаюТриСловаТриМатерныхСлова";
	Примеры["ЭтоНазваниеПеременной"] = "ЭтоНазваниеПеременной";
	Примеры["5 - это отлично"] = "_5ЭтоОтлично";
	Примеры["451поФаренгейту"] = "_451поФаренгейту";

	Для каждого Пример Из Примеры Цикл
		Результат = Модуль.ИмяОбъектаИзСинонима(Пример.Ключ);
		Эталон = Пример.Значение;
		ТекстСообщения = СтрШаблон("""%1"" -> ""%2""", Пример.Ключ, Пример.Значение);
		Ожидаем.Что(Результат, ТекстСообщения).Равно(Эталон);
	КонецЦикла;

КонецПроцедуры // ИмяОбъектаИзСинонима()

Процедура СинонимОбъектаИзИмени() Экспорт
	Примеры = Новый Соответствие;
	Примеры[""] = "";
	Примеры["Слово"] = "Слово";
	Примеры["слово"] = "Слово";
	Примеры["АА"] = "АА";
	Примеры["АА_"] = "А а";
	Примеры["ААа"] = "А аа";
	Примеры["АААааа"] = "АААааа";
	Примеры["_АаАаААааАААаааААААааааААААА_АА_ААА_123_АА"] = "Аа аа а ааа АААааа ААААаааа ААААА а а ААА 123 АА";

	Для каждого Пример Из Примеры Цикл
		Результат = Модуль.СинонимОбъектаИзИмени(Пример.Ключ);
		Эталон = Пример.Значение;
		ТекстСообщения = СтрШаблон("""%1"" -> ""%2""", Пример.Ключ, Пример.Значение);
		Ожидаем.Что(Результат, ТекстСообщения).Равно(Эталон);
	КонецЦикла;

КонецПроцедуры // СинонимОбъектаИзИмени()

#КонецОбласти // Конвертация

ПередЗапускомТеста();

#Область РучноеВыполнение

// Значения = ОбщегоНазначенияКлиентСервер.МассивЗначений(Ложь, ТекущаяДата());
// АгрегатнаяФункция = "Любой";
// Результат = Модуль.Агрегат(Значения, АгрегатнаяФункция);
// НайтиПоИндексуКоллекции();
ОбновитьКоллекцию();

#КонецОбласти // РучноеВыполнение