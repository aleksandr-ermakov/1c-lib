// Присоединяет схему запроса к существуещей схеме.
//
// Параметры:
//  ИсходнаяСхемаЗапроса            - СхемаЗапроса  - Обобщающая схема
//  ПрисоединяемаяСхемаЗапроса      - СхемаЗапроса  - схема, которая будет добавлена к исходной
//
Процедура ПрисоединитьСхемуЗапроса(ИсходнаяСхемаЗапроса, ПрисоединяемаяСхемаЗапроса)

	Если Ложь Тогда 
		ИсходнаяСхемаЗапроса		= Новый СхемаЗапроса;
		ПрисоединяемаяСхемаЗапроса	= Новый СхемаЗапроса;
	КонецЕсли;
	
	Для каждого ЗапросСхемыПрисоединяемый Из ПрисоединяемаяСхемаЗапроса.ПакетЗапросов Цикл
		Если ИсходнаяСхемаЗапроса.ПакетЗапросов.Количество() = 1
			И ТипЗнч(ИсходнаяСхемаЗапроса.ПакетЗапросов[0]) = Тип("ЗапросВыбораСхемыЗапроса")
			И НЕ ИсходнаяСхемаЗапроса.ПакетЗапросов[0].Колонки.Количество() Тогда     // Первый запрос пакета не задан
			ЗапросСхемыПрисоединенный = ИсходнаяСхемаЗапроса.ПакетЗапросов[0];
		Иначе
			ЗапросСхемыПрисоединенный = ИсходнаяСхемаЗапроса.ПакетЗапросов.Добавить(ТипЗнч(ЗапросСхемыПрисоединяемый));
		КонецЕсли;
		Если ТипЗнч(ЗапросСхемыПрисоединяемый) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ЗапросСхемыПрисоединенный.УстановитьТекстЗапроса(ЗапросСхемыПрисоединяемый.ПолучитьТекстЗапроса());
		ИначеЕсли ТипЗнч(ЗапросСхемыПрисоединяемый) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			ЗапросСхемыПрисоединенный.ИмяТаблицы        = ЗапросСхемыПрисоединяемый.ИмяТаблицы;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Создаёт запросы пакета на уничтожение временных таблиц
//
// Параметры:
//  СхемаЗапроса             - СхемаЗапроса  -
//
Процедура ДобавитьУничтожениеВременныхТаблицСхемыЗапроса(СхемаЗапроса)

	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
	КонецЕсли;

	СуществующиеВременныеТаблицы = Новый Массив; // Удалённые после создания схемы временные таблицы почему-то остаются среди доступных
	Для каждого ЗапросСхемы Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Если ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
					СуществующиеВременныеТаблицы.Добавить(ЗапросСхемы.ТаблицаДляПомещения);
			КонецЕсли;
		Иначе  // Уничтожение
			Индекс = СуществующиеВременныеТаблицы.Найти(ЗапросСхемы.ИмяТаблицы);
			Если Индекс <> Неопределено Тогда
					СуществующиеВременныеТаблицы.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ИмяВременнойТаблицыРезультата = ЗапросСхемы.ТаблицаДляПомещения;     // На случай, если результатом запроса является временная таблица

	// Уничтожим временные таблицы:
	ГруппыДоступныхТаблиц = ЗапросСхемы.ДоступныеТаблицы;
	ДоступныеТаблицы = ГруппыДоступныхТаблиц[ГруппыДоступныхТаблиц.Количество() - 1].Состав;    // Временные таблицы
	Для каждого ДоступнаяТаблица Из ДоступныеТаблицы Цикл
		Если ДоступнаяТаблица.Имя = ИмяВременнойТаблицыРезультата Тогда Продолжить КонецЕсли;
		Если СуществующиеВременныеТаблицы.Найти(ДоступнаяТаблица.Имя) = Неопределено Тогда Продолжить КонецЕсли;
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросСхемы.ИмяТаблицы = ДоступнаяТаблица.Имя;
	КонецЦикла;

КонецПроцедуры    // ДобавитьУничтожениеВременныхТаблицСхемыЗапроса()

// Добавляет источник - временную таблицу из менеджера временных таблиц
//
// Параметры:
//  ОператорСхемы			 - ОператорВыбратьСхемыЗапроса	 - Оператор, в который добавляется источник.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - Источник сведений о таблице
//  ИмяТаблицы				 - Строка	 - Имя таблицы в менеджере
//  Псевдоним				 - Строка	 - Псевдоним добавляемого источника
//
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Добавленный источник
//
Функция ДобавитьИсточникСхемыЗапросаВременнуюТаблицу(ОператорСхемы, МенеджерВременныхТаблиц, ИмяТаблицы, Псевдоним = "")

	Если Ложь Тогда СхемаЗапроса = Новый СхемаЗапроса; ОператорСхемы = СхемаЗапроса.ПакетЗапросов[0].Операторы[0] КонецЕсли;
	Если Ложь Тогда МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц КонецЕсли;

	ВременнаяТаблица = МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы);
	ИсточникСхемы = ОператорСхемы.Источники.Добавить(
		Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), 
		ВременнаяТаблица.ПолноеИмя, 
		?(ЗначениеЗаполнено(Псевдоним), Псевдоним, Неопределено));
	Для каждого Колонка Из ВременнаяТаблица.Колонки Цикл
		Тип = ТипЗнч(Колонка.ТипЗначения.ПривестиЗначение());
		Если Тип = Тип("Неопределено") Тогда 
			Тип = Неопределено;
		КонецЕсли;
		Если Тип = Тип("Строка") Тогда 
			Тип = Неопределено;	// Для последующей связи по строке возможны проблемы, т.к. по умолчанию это строка неограниченной длины.
		КонецЕсли;		
		ИсточникСхемы.Источник.ДоступныеПоля.Добавить(Колонка.Имя, Тип);
	КонецЦикла;
	Псевдоним = ИсточникСхемы.Источник.Псевдоним;
	Возврат ИсточникСхемы;

КонецФункции // ДобавитьИсточникСхемыЗапросаВременнуюТаблицу()

// Производит поиск временной таблицы с указанным именем
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса	 - Схема, в которой будет произведён поиск
//  ИмяТаблицы	 - Строка		 - Имя искомой таблицы
// 
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса, Неопределено - Найденный запрос. Если запрос отсутствует, будет возвращено Неопределено.
//
Функция НайтиВременнуюТаблицуСхемыЗапроса(СхемаЗапроса, ИмяТаблицы)
	
	Для каждого ЗапросСхемы Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") 
			И ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) 
			И ЗапросСхемы.ТаблицаДляПомещения = ИмяТаблицы Тогда
			Возврат ЗапросСхемы;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиВременнуюТаблицуСхемыЗапроса()

// Производит поиск временных таблиц с указанным именем
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса	 - Схема, в которой будет произведён поиск
//  ИмяТаблицы	 - Строка		 - Имя искомой таблицы
// 
// Возвращаемое значение:
//  Массив - Найденые таблицы. Элемент: ЗапросВыбораСхемыЗапроса
//
Функция НайтиВременныеТаблицыСхемыЗапроса(СхемаЗапроса, ИмяТаблицы)
	
	Перем ЗапросСхемы, НайденныеЗапросыСхемы;
	
	НайденныеЗапросыСхемы = Новый Массив;
	Для каждого ЗапросСхемы Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") 
			И ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) 
			И ЗапросСхемы.ТаблицаДляПомещения = ИмяТаблицы Тогда
			НайденныеЗапросыСхемы.Добавить(ЗапросСхемы);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат НайденныеЗапросыСхемы;

КонецФункции

// Выполняет замену запроса схемы пакетом запросов другой схемы.
// Последний запрос заменяющей схемы используется вместо заменяемого запроса.
// Следует использовать для замены запросов-болванок полноценными запросами, формируемыми отдельно.
// Из заменяемой таблицы берутся:
//  * Выбираемые поля
//  * Имя таблицы для помещения
//  * Индексы
//
// Параметры:
//  ИсходнаяСхемаЗапроса	 - СхемаЗапроса				 - Модифицируемая схема запроса
//  ЗаменяемыйЗапросСхемы	 - ЗапросВыбораСхемыЗапроса	 - Заменяемый запрос схемы
//  ЗаменяющаяСхемаЗапроса	 - СхемаЗапроса				 - Схема, запросы которой заменяют ЗаменяемыйЗапросСхемы
//  ПрефиксЗаменяющихТаблиц	 - Строка					 - Префикс, который будет установлен заменяющим запросам на формирование временных таблиц
//  СоответствиеИменПолей	 - Соответствие				 - Поля соответствия последнего запроса заменяющей схемы и заменяемого запроса. 
//		Ключ: Имя поля заменяющий схемы. Значение: Целевое имя поля (заменяемого запроса).
//		Поля, присутствующие в исходном запросе, переименованы не будут.
//
Процедура ЗаменитьВременнуюТаблицуСхемойЗапроса(
	ИсходнаяСхемаЗапроса, 
	ЗаменяемыйЗапросСхемы, 
	Знач ЗаменяющаяСхемаЗапроса, 
	ПрефиксЗаменяющихТаблиц = "", 
	Знач СоответствиеИменПолей = Неопределено)

	Если Ложь Тогда 
		ИсходнаяСхемаЗапроса = Новый СхемаЗапроса;
		ЗаменяемыйЗапросСхемы = ИсходнаяСхемаЗапроса.ПакетЗапросов.Добавить();
	КонецЕсли;
	
	Если СоответствиеИменПолей = Неопределено Тогда
		СоответствиеИменПолей = новый Соответствие;
	КонецЕсли; 
	
	СхемаЗапросаПрисоединяемая = Новый СхемаЗапроса;
	СхемаЗапросаПрисоединяемая.УстановитьТекстЗапроса(ЗаменяющаяСхемаЗапроса.ПолучитьТекстЗапроса());
	
	// Префиксация:
	Если ЗначениеЗаполнено(ПрефиксЗаменяющихТаблиц) Тогда
		Для каждого ЗапросСхемы Из СхемаЗапросаПрисоединяемая.ПакетЗапросов Цикл
			Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") И ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
				ЗапросСхемы.ТаблицаДляПомещения = ПрефиксЗаменяющихТаблиц + ЗапросСхемы.ТаблицаДляПомещения;
			ИначеЕсли ТипЗнч(ЗапросСхемы) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				ЗапросСхемы.ИмяТаблицы = ПрефиксЗаменяющихТаблиц + ЗапросСхемы.ИмяТаблицы;
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли;
	
	// Замена:
	Для каждого ПрисоединяемыйЗапрос Из СхемаЗапросаПрисоединяемая.ПакетЗапросов Цикл
		
		ИндексПрисоединяемогоЗапроса = СхемаЗапросаПрисоединяемая.ПакетЗапросов.Индекс(ПрисоединяемыйЗапрос);
		МаксИндексПрисоединяемойСхемы = (СхемаЗапросаПрисоединяемая.ПакетЗапросов.Количество() - 1);
		ЭтоПоследнийЗапросПрисоединяемойСхемы = ИндексПрисоединяемогоЗапроса = МаксИндексПрисоединяемойСхемы;
		
		Если Не ЭтоПоследнийЗапросПрисоединяемойСхемы Тогда
			
			// Вставка до заменяемого запроса
			
			ЗапросСхемыПрисоединенный = ИсходнаяСхемаЗапроса.ПакетЗапросов.Добавить(ТипЗнч(ПрисоединяемыйЗапрос));
			Если ТипЗнч(ПрисоединяемыйЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
				ЗапросСхемыПрисоединенный.УстановитьТекстЗапроса(ПрисоединяемыйЗапрос.ПолучитьТекстЗапроса());
			ИначеЕсли ТипЗнч(ПрисоединяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				ЗапросСхемыПрисоединенный.ИмяТаблицы = ПрисоединяемыйЗапрос.ИмяТаблицы;
			КонецЕсли;
			ИсходнаяСхемаЗапроса.ПакетЗапросов.Сдвинуть(
			ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗапросСхемыПрисоединенный),
			ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗаменяемыйЗапросСхемы));
		
		Иначе	
			
			// Замена запроса с установкой аттрибутов
			
			ЗапросСхемыИсточник = ПрисоединяемыйЗапрос;
			ЗапросСхемыПриемник = ЗаменяемыйЗапросСхемы;
			ЗапросСхемыДубликатПриемника = ИсходнаяСхемаЗапроса.ПакетЗапросов.ДобавитьКопию(
				// Используется для проверки колонок и переноса атрибутов.
				ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗапросСхемыПриемник));	
			
			// Удаление лишних колонок
			УдаляемыеКолонки = Новый Массив;
			Для каждого КолонкаСхемы Из ЗапросСхемыИсточник.Колонки Цикл
				Если ЗапросСхемыДубликатПриемника.Колонки.Найти(КолонкаСхемы.Псевдоним) = Неопределено 
					и СоответствиеИменПолей.Получить(КолонкаСхемы.Псевдоним) = Неопределено  Тогда
					УдаляемыеКолонки.Добавить(КолонкаСхемы);	// Пропуск поля
				КонецЕсли; 				
			КонецЦикла;
			Для каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
				ЗапросСхемыИсточник.Колонки.Удалить(ЗапросСхемы.Колонки.Индекс(УдаляемаяКолонка));
			КонецЦикла; 
			
			// Переименование колонок:
			Для каждого КолонкаСхемы Из ЗапросСхемыИсточник.Колонки Цикл
				Если ЗапросСхемыДубликатПриемника.Колонки.Найти(КолонкаСхемы.Псевдоним) = Неопределено 
					и СоответствиеИменПолей.Получить(КолонкаСхемы.Псевдоним) <> Неопределено  Тогда
					КолонкаСхемы.Псевдоним = СоответствиеИменПолей[КолонкаСхемы.Псевдоним];
				КонецЕсли; 
			КонецЦикла; 
			
			ЗапросСхемыИсточник.ТаблицаДляПомещения = ЗапросСхемыПриемник.ТаблицаДляПомещения;
			ЗапросСхемыПриемник.УстановитьТекстЗапроса(ЗапросСхемыИсточник.ПолучитьТекстЗапроса());
			
			Для каждого ВыражениеИндексаДубликат Из ЗапросСхемыДубликатПриемника.Индекс Цикл
				Если ТипЗнч(ВыражениеИндексаДубликат.Выражение) = Тип("КолонкаСхемыЗапроса") Тогда
					КолонкаСхемы = ЗапросСхемыПриемник.Колонки.Найти(ВыражениеИндексаДубликат.Выражение.Псевдоним);
					ЗапросСхемыПриемник.Индекс.Добавить(КолонкаСхемы);
				Иначе	// ВыражениеСхемыЗапроса
					ЗапросСхемыПриемник.Индекс.Добавить(ВыражениеИндексаДубликат.Выражение);
				КонецЕсли; 
			КонецЦикла;
			
			ИсходнаяСхемаЗапроса.ПакетЗапросов.Удалить(ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗапросСхемыДубликатПриемника));
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // ЗаменитьВременнуюТаблицуСхемойЗапроса()

// Получает параметр виртуальной таблицы по его имени, как оно указано в конструкторе запроса.
//
// Параметры:
//  ТаблицаСхемы - ТаблицаСхемыЗапроса	 - Таблица, параметры которой получаются.
//  ИмяПараметра - Строка				 - Имя искомого параметра.
//		Допустимые значения:
//
//		 Регистр сведений (срез первых и последних):
//			* Период
//			* Условие
//		
//		 Регистр накопления, остатки:
//			* Период
//			* Условие
//		
//		 Регистр накопления, обороты:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* Условие
//		
//		 Регистр накопления, остатки и обороты:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* МетодДополнения
//			* Условие
//		
//		 Регистр бухгалтерии, остатки:
//			* Период
//			* УсловиеСчета
//			* Субконто
//			* Условие
//		
//		 Регистр бухгалтерии, обороты:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* УсловиеСчета
//			* Субконто
//			* Условие
//			* УсловиеКорСчета	 - (при поддержке корреспонденции)
//			* КорСубконто		 - (при поддержке корреспонденции)
//		
//		 Регистр бухгалтерии, обороты Дт Кт:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* УсловиеСчетаДт
//			* СубконтоДт
//			* УсловиеСчетаКт
//			* СубконтоКт
//			* Условие
//		
//		 Регистр бухгалтерии, остатки и обороты: 
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* МетодДополнения
//			* УсловиеСчета
//			* Субконто
//			* Условие
//		
//		 Регистр бухгалтерии, движения с субконто: 
//			* НачалоПериода
//			* КонецПериода
//			* Условие
//			* Упорядочивание
//			* Первые
//		
//		 Регистр расчета, фактический период действия:
//			* Условие
//		
//		 Регистр расчета, данные графика:
//			* Условие
//		
//		 Регистр расчета, таблица базовых данных:
//			* ИзмеренияОсновногоРегистра
//			* ИзмеренияБазовогоРегистра
//			* Разрезы
//			* Условие
//		
//		 Критерий отбора:
//			* Значение
//		
//		 Задача, задачи по исполнителю
//			* Исполнитель
//			* Условие
// 
// Возвращаемое значение:
//  - ПараметрТаблицыСхемыЗапроса - Найденный параметр. 
//	- Неопределено - Если параметр не найден.
//
Функция ПолучитьПараметрВиртуальнойТаблицыСхемыЗапроса(ТаблицаСхемы, ИмяПараметра)
	
	Если Ложь Тогда 
		СхемаЗапроса	 = Новый СхемаЗапроса;
		ЗапросСхемы		 = СхемаЗапроса.ПакетЗапросов[0];
		ОператорСхемы	 = ЗапросСхемы.Операторы[0];
		ТаблицаСхемы	 = ОператорСхемы.Источники[0].Источник;
	КонецЕсли;
	
	ИменаПараметров		 = Новый Массив;	// Имена параметров в порядке их следования
	
	ИмяТаблицы = ТаблицаСхемы.ИмяТаблицы;
	Если СтрНачинаетсяС(ИмяТаблицы, "РегистрСведений.")
		И (СтрЗаканчиваетсяНа(ИмяТаблицы, ".СрезПервых")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".СрезПоследних")) Тогда
		
		ИменаПараметров.Добавить("Период");
		ИменаПараметров.Добавить("Условие");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрНакопления.")
		И СтрЗаканчиваетсяНа(ИмяТаблицы, ".Остатки") Тогда
		
		ИменаПараметров.Добавить("Период");
		ИменаПараметров.Добавить("Условие");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрНакопления.")
		И СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОстаткиИОбороты") Тогда
		
		ИменаПараметров.Добавить("НачалоПериода");
		ИменаПараметров.Добавить("КонецПериода");
		ИменаПараметров.Добавить("Периодичность");
		ИменаПараметров.Добавить("МетодДополнения");
		ИменаПараметров.Добавить("Условие");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрБухгалтерии.") Тогда
		
		Если СтрЗаканчиваетсяНа(ИмяТаблицы, ".Остатки") Тогда
		
			ИменаПараметров.Добавить("Период");
			ИменаПараметров.Добавить("УсловиеСчета");
			ИменаПараметров.Добавить("Субконто");
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".Обороты") Тогда
		
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Периодичность");
			ИменаПараметров.Добавить("УсловиеСчета");
			ИменаПараметров.Добавить("Субконто");
			ИменаПараметров.Добавить("Условие");
			
			ЕстьКорреспонденция = ТаблицаСхемы.Параметры.Количество() > ИменаПараметров.Количество();
			Если ЕстьКорреспонденция Тогда
				ИменаПараметров.Добавить("УсловиеКорСчета");
				ИменаПараметров.Добавить("КорСубконто");
			КонецЕсли; 
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОборотыДтКт") Тогда
		
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Периодичность");
			ИменаПараметров.Добавить("УсловиеСчетаДт");
			ИменаПараметров.Добавить("СубконтоДт");
			ИменаПараметров.Добавить("УсловиеСчетаКт");
			ИменаПараметров.Добавить("СубконтоКт");
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОстаткиИОбороты") Тогда
				
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Периодичность");
			ИменаПараметров.Добавить("МетодДополнения");
			ИменаПараметров.Добавить("УсловиеСчета");
			ИменаПараметров.Добавить("Субконто");
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ДвиженияССубконто") Тогда
				
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Условие");
			ИменаПараметров.Добавить("Упорядочивание");
			ИменаПараметров.Добавить("Первые");
		
		Иначе
			
			Возврат Неопределено;
		
		КонецЕсли; 
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрРасчетов.") Тогда
		
		Если СтрЗаканчиваетсяНа(ИмяТаблицы, ".ФактическийПериодДействия") Тогда
			
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ДанныеГрафика") Тогда
			
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрНайти(ИмяТаблицы, ".База") Тогда
			
			ИменаПараметров.Добавить("ИзмеренияОсновногоРегистра");
			ИменаПараметров.Добавить("ИзмеренияБазовогоРегистра");
			ИменаПараметров.Добавить("Разрезы");
			ИменаПараметров.Добавить("Условие");
			
		Иначе
			
			Возврат Неопределено;
		
		КонецЕсли; 
				
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "КритерийОтбора.") Тогда
		
		ИменаПараметров.Добавить("Значение");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "Задача")
		И СтрЗаканчиваетсяНа(ИмяТаблицы, ".ЗадачиПоИсполнителю") Тогда
		
			ИменаПараметров.Добавить("Исполнитель");
			ИменаПараметров.Добавить("Условие");
		
	Иначе
		
		Возврат Неопределено;
	
	КонецЕсли; 
	
	ИндексыПараметровВРег	 = Новый Соответствие;
	Для Индекс = 0 По ИменаПараметров.ВГраница() Цикл
		ИндексыПараметровВРег.Вставить(ВРег(ИменаПараметров[Индекс]), Индекс);
	КонецЦикла;  
	
	ИндексПараметра = ИндексыПараметровВРег[ВРег(ИмяПараметра)];
	
	Если ИндексПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ТаблицаСхемы.Параметры[ИндексПараметра];
	
КонецФункции // ПолучитьПараметрВиртуальнойТаблицыСхемыЗапроса()

// Добавляет в запрос схемы запроса оператор.
//
// Параметры:
//  ЗапросСхемы				 - ЗапросВыбораСхемыЗапроса				 - Запрос, к которому будет присоединен новый оператор
//  ДобавляемыйЗапрос		 - ОператорВыбратьСхемыЗапроса, Строка	 - Добавляемый запрос или его текст
//  ТипОбъединения			 - ТипОбъединенияСхемыЗапроса			 - Тип объединения присоединяемого запроса. По умолчанию: ОБЪЕДИНИТЬ ВСЕ
//  СопоставитьПоляПоИменам	 - Булево								 - Значения:
//		* Истина - поля присоединяемого запроса и исходного запроса сопоставляются по именам. 
//		* Ложь	 - поля сопоставляются по индексам. Недостающие поля заменяются NULL
//	ДобавитьОтсутствующиеПоля - Булево								 - Если Истина, отсутствующие в модифицируемом запросе, но присутствующие в добавляемом запросе поля 
//																		будут добавлены в запрос.
//
Функция ДобавитьОператорСхемыЗапросаКопированием(ЗапросСхемы, ДобавляемыйЗапрос, ТипОбъединения = Неопределено, СопоставитьПоляПоИменам = Истина, ДобавитьОтсутствующиеПоля = Ложь) Экспорт
	
	Если ТипЗнч(ЗапросСхемы) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
		ВызватьИсключение "Параметр ЗапросСхемы: Ожидается тип ЗапросВыбораСхемыЗапроса";
	КонецЕсли; 	
	
	Если ТипОбъединения = Неопределено Тогда
		ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	КонецЕсли; 
	
	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	КонецЕсли;
	
	Если ТипЗнч(ДобавляемыйЗапрос) = Тип("ОператорВыбратьСхемыЗапроса") Тогда
		ИсхОператорСхемы = ДобавляемыйЗапрос;
		ИсхСхемаЗапроса = Новый СхемаЗапроса();
		ИсхСхемаЗапроса.УстановитьТекстЗапроса(ДобавляемыйЗапрос.Представление());
	Иначе
		ИсхСхемаЗапроса = Новый СхемаЗапроса;
		ИсхСхемаЗапроса.УстановитьТекстЗапроса(ДобавляемыйЗапрос);
		ИсхОператорСхемы = ИсхСхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	КонецЕсли; 
	ИсхЗапросСхемы = ИсхСхемаЗапроса.ПакетЗапросов[0];
	
	#Область Проверки
	Если ИсхСхемаЗапроса.ПакетЗапросов.Количество() > 1 Тогда
		ВызватьИсключение "Добавляемый запрос содержит более одного запроса в пакете";
	ИначеЕсли ИсхЗапросСхемы.Операторы.Количество() > 1 Тогда
		ВызватьИсключение "Добавляемый запрос содержит более одного оператора ВЫБРАТЬ";
	ИначеЕсли ТипЗнч(ИсхОператорСхемы) <> Тип("ОператорВыбратьСхемыЗапроса") Тогда
		ВызватьИсключение "Добавляется не оператор ВЫБРАТЬ";	
	Иначе 
	КонецЕсли; 
	
	Если СопоставитьПоляПоИменам Тогда
		Для каждого Колонка Из ЗапросСхемы.Колонки Цикл
			Если ИсхСхемаЗапроса.ПакетЗапросов[0].Колонки.Найти(Колонка.Псевдоним) = Неопределено Тогда
				ВызватьИсключение "Не все колонки есть в добавляемом запросе";
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	#КонецОбласти // Проверки 
	
	#Область Добавление
		
	НовОператорСхемы = ЗапросСхемы.Операторы.Добавить();	
	
	ДобавитьИсточникиСхемыЗапросаКопированием(НовОператорСхемы.Источники, ИсхОператорСхемы.Источники);
	
	// Выбираемые поля:
	ДобавляемыеКолонки = Новый СписокЗначений;
	НовКолонки = ЗапросСхемы.Колонки;
	ИсхКолонки = ИсхЗапросСхемы.Колонки;
	Для каждого Колонка Из НовКолонки Цикл
		Если СопоставитьПоляПоИменам Тогда
			ИсхКолонка = ИсхКолонки.Найти(Колонка.Псевдоним);
			
		ИначеЕсли ЗапросСхемы.Колонка.Количество() <= ИсхЗапросСхемы.Колонка.Количество() Тогда
			ИсхКолонка = ИсхКолонки[НовКолонки.Индекс(Колонка)];
			
		Иначе
			ИсхКолонка = Неопределено;
		
		КонецЕсли; 
		
		Если ИсхКолонка <> Неопределено Тогда
			ДобавляемыеКолонки.Добавить(ИсхКолонка.Поля[0], ИсхКолонка.Псевдоним);		
		Иначе
			ДобавляемыеКолонки.Добавить("NULL", Колонка.Псевдоним);
		КонецЕсли;  		
	КонецЦикла; 
	Если ДобавитьОтсутствующиеПоля Тогда
		Для каждого ИсхКолонка Из ИсхЗапросСхемы.Колонки Цикл
			Если СопоставитьПоляПоИменам И ЗапросСхемы.Колонки.Найти(ИсхКолонка.Псевдоним) = Неопределено 
				Или Не СопоставитьПоляПоИменам И ИсхЗапросСхемы.Колонки.Индекс(ИсхКолонка) > (ЗапросСхемы.Колонки.Количество() - 1) Тогда
				
				ДобавляемыеКолонки.Добавить(ИсхКолонка.Поля[0], ИсхКолонка.Псевдоним);
				
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли; 
	Для каждого ДобавляемаяКолонка Из ДобавляемыеКолонки Цикл
		
		ДобавляемоеПоле = ДобавляемаяКолонка.Значение;
		ПсевдонимКолонки = ДобавляемаяКолонка.Представление;
		Колонка = ЗапросСхемы.Колонки.Найти(ПсевдонимКолонки);
		
		Если Колонка <> Неопределено Тогда
		    ИндексКолонки = ЗапросСхемы.Колонки.Индекс(Колонка);
			НовОператорСхемы.ВыбираемыеПоля.Добавить(Строка(ДобавляемоеПоле), ИндексКолонки);
			
		Иначе
			НовОператорСхемы.ВыбираемыеПоля.Добавить(Строка(ДобавляемоеПоле));
			
		КонецЕсли; 
		
		Если Колонка = Неопределено Тогда
			Колонка = ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество() - 1];
			Колонка.Псевдоним = ПсевдонимКолонки;
		КонецЕсли; 
		
	КонецЦикла; 
	Для каждого ИсхВыбираемоеПоле Из ИсхОператорСхемы.ВыбираемыеПоля Цикл
		
	КонецЦикла; 
	
	// ВыраженияОтбораКомпоновкиДанных:
	Для каждого ИсхВыражениеОтбора Из ИсхОператорСхемы.ВыраженияОтбораКомпоновкиДанных Цикл
		НовВыражениеКомпоновки = НовОператорСхемы.ВыраженияОтбораКомпоновкиДанных.Добавить(ИсхВыражениеОтбора.Выражение);										
		НовВыражениеКомпоновки.ИспользоватьРеквизиты = ИсхВыражениеОтбора.ИспользоватьРеквизиты;
		НовВыражениеКомпоновки.Псевдоним			 = ИсхВыражениеОтбора.Псевдоним;
	КонецЦикла; 
	
	// Группировки:
	Проверка = Новый Структура("Группировки");
	ЗаполнитьЗначенияСвойств(Проверка, НовОператорСхемы);
	ЕстьГруппирующиеНаборы = Проверка.Группировки <> Неопределено;
	Если ЕстьГруппирующиеНаборы И НовОператорСхемы.Группировки.Количество() > 1 Тогда
		
		Для каждого ИсхВыражениеСхемы Из ИсхОператорСхемы.Группировки[0] Цикл
			НовОператорСхемы.Группировки[0].Добавить(ИсхВыражениеСхемы);		
		КонецЦикла; 
		Для Индекс = 1 По ИсхОператорСхемы.Группировки.Количество() - 1 Цикл
			ИсхВыражениеСхемы = ИсхОператорСхемы.Группировки[Индекс];
			ДобавитьГруппировкуСхемыЗапросаКопированием(НовОператорСхемы.Группировки, ИсхВыражениеСхемы);
		КонецЦикла; 
		
	Иначе	// Просто группировки
		
		Для каждого ИсхВыражениеСхемы Из ИсхОператорСхемы.Группировка Цикл
			ДобавитьГруппировкуСхемыЗапросаКопированием(НовОператорСхемы.Группировка, ИсхВыражениеСхемы);
		КонецЦикла; 
	
	КонецЕсли; 
	// #СДЕЛАТЬ Группировки добавляются дважды, если в выбранных полях есть агрегатные функции 
	
	// Отбор:
	Для каждого ИсхВыражениеСхемы Из ИсхОператорСхемы.Отбор Цикл   
		НовОператорСхемы.Отбор.Добавить(ИсхВыражениеСхемы);		
	КонецЦикла; 
	
	НовОператорСхемы.ВыбиратьДляИзменения			 = ИсхОператорСхемы.ВыбиратьДляИзменения;
	// ТаблицыДляИзменения:
	Для каждого ИсхТаблицаДляИзменения Из ИсхОператорСхемы.ТаблицыДляИзменения Цикл
		НовОператорСхемы.ТаблицыДляИзменения.Добавить(ИсхТаблицаДляИзменения.ИмяТаблицы);
	КонецЦикла; 
	
	НовОператорСхемы.ВыбиратьРазличные				 = ИсхОператорСхемы.ВыбиратьРазличные;
	НовОператорСхемы.КоличествоПолучаемыхЗаписей	 = ИсхОператорСхемы.КоличествоПолучаемыхЗаписей;
	НовОператорСхемы.ТипОбъединения					 = ТипОбъединения;
	
	#КонецОбласти // Добавление 

	Возврат НовОператорСхемы;
	
КонецФункции // ДобавитьОператорСхемыЗапросаКопированием()

// Копирует источники схемы запроса из одной схемы в другую
//
// Параметры:
//  КоллекцияНазначение	 - ИсточникиСхемыЗапроса	 - Заполняемая коллекция
//  КоллекцияИсточник	 - ИсточникиСхемыЗапроса	 - Коллекция - источник элементов
//
Процедура ДобавитьИсточникиСхемыЗапросаКопированием(КоллекцияНазначение, КоллекцияИсточник) Экспорт
	
	Для каждого Источник Из КоллекцияИсточник Цикл
		ДобавитьИсточникСхемыЗапросаКопированием(КоллекцияНазначение, Источник);
	КонецЦикла; 		

КонецПроцедуры // ДобавитьИсточникиСхемыЗапросаКопированием()

// Копирует источник из одной схемы запроса в другой
//
// Параметры:
//  ИсточникиСхемыЗапроса	 - ИсточникиСхемыЗапроса	 - Коллекция, куда будет добавлен источник
//  КопируемыйИсточник		 - ИсточникСхемыЗапроса		 - Копируемый источник.
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Добавленный источник
//
Функция ДобавитьИсточникСхемыЗапросаКопированием(ИсточникиСхемыЗапроса, КопируемыйИсточник) Экспорт
	
	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
		ЗапросСхемы	 = СхемаЗапроса.ПакетЗапросов[0];
		ИсточникиСхемыЗапроса	 = ЗапросСхемы.Операторы[0].Источники;
		КопируемыйИсточник		 = ИсточникиСхемыЗапроса.Добавить();
	КонецЕсли;

	ИсточникиДляДобавления = Новый Массив;
	ИсточникиДляДобавления.Добавить(КопируемыйИсточник);
	
	ИсточникиДляДобавленияПсевдонимы = Новый Массив;
	ИсточникиДляДобавленияПсевдонимы.Добавить(КопируемыйИсточник.Источник.Псевдоним);
	
	СоединенияДляДобавления			 = Новый Соответствие;	// {Псевдоним источника:Строка; Массив}
	
	Для каждого ИсхИсточник Из ИсточникиДляДобавления Цикл
		
		Если Ложь Тогда 
			ИсхИсточник = КопируемыйИсточник;
		КонецЕсли;
		
		ТипИсточника = ТипЗнч(ИсхИсточник.Источник);
		ПсевдонимИсточника = ИсхИсточник.Источник.Псевдоним;
		
		Если ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ПсевдонимИсточника) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТипИсточника = Тип("ТаблицаСхемыЗапроса") Тогда
			НовИсточник = ИсточникиСхемыЗапроса.Добавить(ИсхИсточник.Источник.ИмяТаблицы, ПсевдонимИсточника);
			НовПараметры = НовИсточник.Источник.Параметры;
			ИсхПараметры = ИсхИсточник.Источник.Параметры;
			Для Индекс = 0 По ИсхПараметры.Количество() - 1 Цикл
				НовПараметры[Индекс].Выражение = ИсхПараметры[Индекс].Выражение;
			КонецЦикла; 
			НовПараметрыКомпоновки = НовИсточник.Источник.ПараметрыКомпоновкиДанных;
			ИсхПараметрыКомпоновки = ИсхИсточник.Источник.ПараметрыКомпоновкиДанных;
			Для Индекс = 0 По ИсхПараметрыКомпоновки.Количество() - 1 Цикл
				НовПараметрКомпоновки = НовПараметрыКомпоновки[Индекс];
				ИсхПараметрКомпоновки = ИсхПараметрыКомпоновки[Индекс];
				Если ТипЗнч(ИсхПараметрКомпоновки) = Тип("ВыраженияОтбораКомпоновкиДанныхСхемыЗапроса") Тогда
					Для каждого ИсхВыражениеОтбора Из ИсхПараметрКомпоновки Цикл
						НовВыражениеОтбора = ИсхПараметрКомпоновки.Добавить(ИсхВыражениеОтбора.Выражение);										
						НовВыражениеОтбора.ИспользоватьРеквизиты = ИсхВыражениеОтбора.ИспользоватьРеквизиты;
						НовВыражениеОтбора.Псевдоним			 = ИсхВыражениеОтбора.Псевдоним;
					КонецЦикла; 
					
				ИначеЕсли ТипЗнч(ИсхПараметрКомпоновки) = Тип("ПараметрыТаблицыСхемыЗапроса") Тогда
					Для Индекс = 0 По ИсхПараметрКомпоновки.Количество() - 1 Цикл
						НовПараметрКомпоновки[Индекс].Выражение = ИсхПараметрКомпоновки[Индекс].Выражение;
					КонецЦикла; 
				
				Иначе
					ВызватьИсключение "Неожиданный тип параметра таблицы";
				
				КонецЕсли; 
			КонецЦикла; 

		ИначеЕсли ТипИсточника = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			НовИсточник = ИсточникиСхемыЗапроса.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), ПсевдонимИсточника);
			ИсхТекстЗапроса = ИсхИсточник.Источник.Запрос.ПолучитьТекстЗапроса();
			НовИсточник.Источник.Запрос.УстановитьТекстЗапроса(ИсхТекстЗапроса);
			
		ИначеЕсли ТипИсточника = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			НовИсточник = ИсточникиСхемыЗапроса.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), ИсхИсточник.Источник.ИмяТаблицы, ПсевдонимИсточника);
			Для каждого ИсхДоступноеПоле Из ИсхИсточник.Источник.ДоступныеПоля Цикл
				ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно(НовИсточник.Источник.ДоступныеПоля, ИсхДоступноеПоле);		
			КонецЦикла;
			
		Иначе
			ВызватьИсключение "Неожиданный тип источника";
			
		КонецЕсли; 
		
		СоединенияДляДобавления.Вставить(ПсевдонимИсточника, Новый Массив);
		Для каждого ИсхСоединение Из ИсхИсточник.Соединения Цикл
			ИсхИсточникСоединения = ИсхСоединение.Источник;
			Если ИсточникиДляДобавленияПсевдонимы.Найти(ИсхИсточникСоединения.Источник.Псевдоним) = Неопределено
				И ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ИсхИсточникСоединения.Источник.Псевдоним) = Неопределено Тогда
				
				ИсточникиДляДобавления.Добавить(ИсхИсточникСоединения);
				ИсточникиДляДобавленияПсевдонимы.Добавить(ИсхИсточникСоединения.Источник.Псевдоним);
			
			КонецЕсли; 
			СоединенияДляДобавления[ПсевдонимИсточника].Добавить(ИсхСоединение);
		КонецЦикла; 
		
	КонецЦикла; 
	
	Для каждого СоединениеДляДобавления Из СоединенияДляДобавления Цикл
		
		ПсевдонимИсточника	 = СоединениеДляДобавления.Ключ;
		ИсхСоединения		 = СоединениеДляДобавления.Значение;
		
		ИсточникЛев = ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ПсевдонимИсточника);
		Для каждого ИсхСоединение Из ИсхСоединения Цикл
			ИсточникПрав = ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ИсхСоединение.Источник.Источник.Псевдоним);
			ИсточникЛев.Соединения.Добавить(ИсточникПрав, Строка(ИсхСоединение.Условие));
			ДобСоединение = ИсточникЛев.Соединения.НайтиПоПсевдониму(ИсточникПрав.Источник.Псевдоним);
			ДобСоединение.ТипСоединения							 = ИсхСоединение.ТипСоединения;
			ДобСоединение.ОбязательноеСоединение				 = ИсхСоединение.ОбязательноеСоединение;
			ДобСоединение.НачалоГруппыНеобязательныхСоединений	 = ИсхСоединение.НачалоГруппыНеобязательныхСоединений;
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ИсточникиСхемыЗапроса.НайтиПоПсевдониму(КопируемыйИсточник.Источник.Псевдоним);

КонецФункции // ДобавитьИсточникСхемыЗапросаКопированием()

// Копирует доступное поле из одного оператора в другой.
// Только для описания временной таблицы схемы запроса.
//
// Параметры:
//  ДоступныеПоля	 - ДоступныеПоляСхемыЗапроса										 - Коллекция, где будет размещено новое поле
//  КопируемоеПоле	 - ДоступноеПолеСхемыЗапроса, ДоступнаяВложеннаяТаблицаСхемыЗапроса	 - Копируемое поле
// 
// Возвращаемое значение:
//  ДоступноеПолеСхемыЗапроса, ДоступнаяВложеннаяТаблицаСхемыЗапроса - Созданное поле. 
//
Функция ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно(ДоступныеПоля, КопируемоеПоле) Экспорт
	
	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
		ДоступныеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники.Добавить().Источник.ДоступныеПоля;
		КопируемоеПоле = ДоступныеПоля.Добавить();
	КонецЕсли;
	
	Если ТипЗнч(ДоступныеПоля) <> Тип("ДоступныеПоляСхемыЗапроса") Тогда
		ВызватьИсключение "Параметр ДоступныеПоля: Ожидается тип ДоступныеПоляСхемыЗапроса";
	КонецЕсли; 
	
	ИмяПоля = КопируемоеПоле.Имя;
	Если ДоступныеПоля.Найти(ИмяПоля) <> Неопределено Тогда
		ВызватьИсключение "Добавляемое доступное поле с таким именем уже существует";
	КонецЕсли; 

	Если ТипЗнч(КопируемоеПоле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
		
		ИсхТипы = КопируемоеПоле.ТипЗначения.Типы();
		Если ИсхТипы.Количество() = 1 Тогда
			ИсхТип = ИсхТипы[0]
		Иначе
			ИсхТип = Неопределено;
		КонецЕсли; 
		
		ДоступныеПоля.Добавить(ИмяПоля, ИсхТип);
		ДобавленноеПоле = ДоступныеПоля.Найти(ИмяПоля);
		
	ИначеЕсли ТипЗнч(КопируемоеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
		
		ДоступныеПоля.Добавить(ИмяПоля, Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса"));
		ДобавленноеПоле = ДоступныеПоля.Найти(ИмяПоля);
		Для каждого ИсхДоступноеПоле Из КопируемоеПоле.Поля Цикл
			ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно(ДобавленноеПоле.Поля, ИсхДоступноеПоле);			
		КонецЦикла; 
		
	Иначе
		ВызватьИсключение "Параметр КопируемоеПоле: Ожидается тип ДоступноеПолеСхемыЗапроса, ДоступнаяВложеннаяТаблицаСхемыЗапроса";
	
	КонецЕсли; 			

	Возврат ДобавленноеПоле;
	
КонецФункции // ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно()
 
// Добавляет группировку схемы запроса
//
// Параметры:
//	ГруппировкиСхемы		 - ВыраженияСхемыЗапроса - Коллекция группировок. См. ОператорВыбратьСхемыЗапроса.Группировка
//	КопируемаяГруппировка	 - ВыражениеСхемыЗапроса - Копируемая группировка.
//							 - ВыраженияСхемыЗапроса - Группа копируемых группировок. 
//	ТолькоУникальные		 - Булево				 - Если Истина, будут добавлены только ранее не существующие группировки.
//
Процедура ДобавитьГруппировкуСхемыЗапросаКопированием(ГруппировкиСхемы, КопируемаяГруппировка, ТолькоУникальные = Ложь) Экспорт

	Если ТипЗнч(КопируемаяГруппировка) = Тип("ВыражениеСхемыЗапроса") Тогда

		Если ТолькоУникальные 
			И ГруппировкиСхемы.Найти(Строка(КопируемаяГруппировка)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если ГруппировкиСхемы.Найти(Строка(КопируемаяГруппировка)) = Неопределено Тогда
			ГруппировкиСхемы.Добавить(КопируемаяГруппировка);
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(КопируемаяГруппировка) = Тип("ВыраженияСхемыЗапроса") Тогда
		ГруппировкиСхемы.Добавить();
		ДобавленнаяГруппировка = ГруппировкиСхемы[ГруппировкиСхемы.Количество() - 1];
		Для каждого ВложеннаяГруппировка Из КопируемаяГруппировка Цикл
			ДобавитьГруппировкуСхемыЗапросаКопированием(ДобавленнаяГруппировка, ВложеннаяГруппировка);
		КонецЦикла; 
		
	Иначе
		ВызватьИсключение "Неожиданный тип добавляемой группировки";
	
	КонецЕсли; 			
	
КонецПроцедуры // ДобавитьГруппировкуСхемыЗапросаКопированием()



