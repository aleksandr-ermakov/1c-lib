// Формирует текст выражения запроса, подставляя в него преданные параметры
//
// Параметры:
//  ИмяПоля		 - Строка		 - Поле
//  Вид			 - ВидСравнения	 -
//  ИмяПервогоПараметра - Строка		 - Строка, превращается в имя параметра
//  ИмяПервогоПараметра - Строка		 - Строка, превращается в имя параметра. Используется в интервалах
//
// Возвращаемое значение:
//  Строка - Строка вида "ИмяПоля МЕЖДУ &ИмяПараметра И &ИмяВторогоПараметра"
//
Функция ВыражениеЗапросаСравнения(ИмяПоля, Вид, ИмяПервогоПараметра, ИмяВторогоПараметра = "") Экспорт

	Шаблоны = Новый Соответствие;
	Шаблоны.Вставить(ВидСравнения.Равно,					"%1 = %2");
	Шаблоны.Вставить(ВидСравнения.НеРавно,					"%1 <> %2");
	Шаблоны.Вставить(ВидСравнения.ВСписке,					"%1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВСписке,				"НЕ %1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.ВСписке,					"%1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВСписке,				"НЕ %1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.ВСпискеПоИерархии,		"%1 В ИЕРАРХИИ (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВСпискеПоИерархии,		"НЕ %1 В ИЕРАРХИИ (%2)");
	Шаблоны.Вставить(ВидСравнения.ВИерархии,				"%1 В ИЕРАРХИИ (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВИерархии,				"НЕ %1 В ИЕРАРХИИ (%2)");

	Шаблоны.Вставить(ВидСравнения.Больше,					"%1 > %2");
	Шаблоны.Вставить(ВидСравнения.БольшеИлиРавно,			"%1 >= %2");
	Шаблоны.Вставить(ВидСравнения.Меньше,					"%1 < %2");
	Шаблоны.Вставить(ВидСравнения.МеньшеИлиРавно,			"%1 <= %2");
	Шаблоны.Вставить(ВидСравнения.Интервал,					"%1 > %2 И %1 < %3");
	Шаблоны.Вставить(ВидСравнения.ИнтервалВключаяНачало,	"%1 >= %2 И %1 < %3");
	Шаблоны.Вставить(ВидСравнения.ИнтервалВключаяОкончание,	"%1 > %2 И %1 <= %3");
	Шаблоны.Вставить(ВидСравнения.ИнтервалВключаяГраницы,	"%1 МЕЖДУ %2 И %3");

	Шаблоны.Вставить(ВидСравнения.Содержит,		"%1 ПОДОБНО ""%""+%2+""%""");
	Шаблоны.Вставить(ВидСравнения.НеСодержит,	"НЕ %1 ПОДОБНО ""%""+%2+""%""");

	Шаблон = Шаблоны[Вид];
	Если Найти(Шаблон, "%3") > 0 Тогда
		Возврат СтрШаблон(Шаблон, ИмяПоля, ИмяПервогоПараметра, ИмяВторогоПараметра);
	КонецЕсли;
	Возврат СтрШаблон(Шаблон, ИмяПоля, ИмяПервогоПараметра);

КонецФункции // ВыражениеЗапросаСравнения()

// Формирует выражения получения пустого значения для использования в тексте запроса
//
// Параметры:
//  Значение - ОписаниеТипов, Тип, Произвольный	 - Значение, которое приводится к выражению запроса
//
// Возвращаемое значение:
//   - Строка	- Выражение запроса
//
Функция ПривестиПустоеЗначениеВыраженияЗапроса(Знач Значение) Экспорт

	Если Ложь Тогда ОписаниеТипов = Новый ОписаниеТипов КонецЕсли;

	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		ОписаниеТипов = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
		Типы = Новый Массив;
		Типы.Добавить(Значение);
		ОписаниеТипов = Новый ОписаниеТипов(Типы);
	Иначе
		Типы.Добавить(ТипЗнч(Значение));
		ОписаниеТипов = Новый ОписаниеТипов(Типы);
	КонецЕсли;

	Если ОписаниеТипов.Типы().Количество() > 1 Тогда
		Возврат "НЕОПРЕДЕЛЕНО";
	КонецЕсли;

	ПустоеЗначение = ОписаниеТипов.ПривестиЗначение();

	Если ТипЗнч(ПустоеЗначение) = Тип("Число")			Тогда Возврат "0"					КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Строка")			Тогда Возврат """"""				КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Булево")			Тогда Возврат "ЛОЖЬ"				КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Дата")			Тогда Возврат "ДАТАВРЕМЯ(1, 1, 1)"	КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Неопределено")	Тогда Возврат "НЕОПРЕДЕЛЕНО"		КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Null")			Тогда Возврат "NULL"				КонецЕсли;

	Менеджеры = Новый Соответствие;
	Менеджеры.Вставить(Справочники,				"Справочник");
	Менеджеры.Вставить(Документы,				"Документ");
	Менеджеры.Вставить(Перечисления,			"Перечисление");
	Менеджеры.Вставить(ПланыВидовХарактеристик,	"ПланВидовХарактеристик");
	Менеджеры.Вставить(ПланыСчетов,				"ПланСчетов");
	Менеджеры.Вставить(ПланыВидовРасчета,		"ПланВидовРасчета");
	Менеджеры.Вставить(ПланыОбмена,				"ПланОбмена");
	Менеджеры.Вставить(БизнесПроцессы,			"БизнесПроцесс");
	Менеджеры.Вставить(Задачи,					"Задача");

	ТипЗначения = ТипЗнч(ПустоеЗначение);

	Для каждого Менеджер Из Менеджеры Цикл
		Если Менеджер.Ключ.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
			Возврат СтрШаблон("ЗНАЧЕНИЕ(%1.%2.ПустаяСсылка)", Менеджер.Значение, ПустоеЗначение.Метаданные().Имя);
		КонецЕсли;
	КонецЦикла;

	Возврат "НЕОПРЕДЕЛЕНО";

КонецФункции // ПривестиПустоеЗначениеВыраженияЗапроса()


// Формирует текстовое представление поля для использования в запросе.
//
// Параметры:
//  Поле				 - Произвольный, ПолеКомпоновкиДанных, ДоступноеПолеОтбораКомпоновкиДанных, Прочие	 - Преобразуемое поле. Варианты использования:
//  	- Примитивные типы	- Преобразуются в текст запроса.
//  	- ПолеКомпоновкиДанных - Дополняется префиксом и помещается в текст запроса.
//  	- ДоступноеПолеОтбораКомпоновкиДанных - В параметры помещается коллекция возможных пустых значений поля.
//  	- Прочие - Значение помещается в параметр
//  ПараметрыЗапроса	 - Структура																		 - Параметры, полученные из полей
//  ПрефиксПоляДанных	 - Строка																			 - Префикс поля данных
//
// Возвращаемое значение:
//   - Строка - Текстовое представление поля
//
Функция ПолучитьПредставлениеПоляДляТекстаЗапроса(Поле, ПараметрыЗапроса, ПрефиксПоляДанных = "#")

	Если ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных") Тогда
		Возврат	ПрефиксПоляДанных + Строка(Поле);
	ИначеЕсли ТипЗнч(Поле) = Тип("Булево") Тогда
		Возврат ?(Поле, "ИСТИНА", "ЛОЖЬ");
	ИначеЕсли ТипЗнч(Поле) = Тип("Число") Тогда
		Возврат Формат(Поле, "ЧГ=0");
	ИначеЕсли ТипЗнч(Поле) = Тип("Строка") Тогда
		Возврат СтрШаблон("""%1""", Поле);
	ИначеЕсли ТипЗнч(Поле) = Тип("СтандартнаяДатаНачала") Тогда
		Возврат СтрШаблон("ДАТАВРЕМЯ(%1, %2, %3, %4, %5, %6)", 
			Формат(Год(Поле.Дата), "ЧГ=0"), 
			Месяц(Поле.Дата), День(Поле.Дата), 
			Час(Поле.Дата), 
			Минута(Поле.Дата), 
			Секунда(Поле.Дата));
	ИначеЕсли ТипЗнч(Поле) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		// Получаем все варианты не заданного значения
		ПустыеЗначения = Новый СписокЗначений;
		КоллекцияТипов = Поле.Тип.Типы();
		Если КоллекцияТипов.Количество() Тогда
			ПустыеЗначения.Добавить(Неопределено);
		КонецЕсли;
		Для каждого Тип Из КоллекцияТипов Цикл
			Типы = Новый Массив;
			Типы.Добавить(Тип);
			ОписаниеТипов = Новый ОписаниеТипов(Типы);
			ПустыеЗначения.Добавить(ОписаниеТипов.ПривестиЗначение());
		КонецЦикла;
		ИмяПараметра = "Параметр" + Формат(ПараметрыЗапроса.Количество() + 1, "ЧГ=0");
		ПредставлениеПоля = "&" + ИмяПараметра;
		ПараметрыЗапроса.Вставить(ИмяПараметра, ПустыеЗначения);
		Возврат ПредставлениеПоля;
	Иначе
		ИмяПараметра = "Параметр" + Формат(ПараметрыЗапроса.Количество() + 1, "ЧГ=0");
		ПредставлениеПоля = "&" + ИмяПараметра;
		ПараметрыЗапроса.Вставить(ИмяПараметра, Поле);
		Возврат ПредставлениеПоля;
	КонецЕсли;

	Возврат "";

КонецФункции

// Помещает заданную таблицу значений во временную таблицу 
// менеджера временных таблиц
//
// Параметры:
//	Таблица	 - ТаблицаЗначений - ПомещаемаяТаблица
//	Менеджер - МенеджерВременныхТаблиц - Менеджер, в котором будет размещена временная таблица
//	Имя		 - Строка - Имя временной таблицы
//	Поля	 - Строка - Перечень колонок временной таблицы, через запятую. Если не указан - будут помещены все колонки.
//	Индексы	 - Строка - Перечень колонок, по которым необходимо проиндексировать временную таблицу, через запятую.
//
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(Таблица, Менеджер, Имя, Поля = "", Индексы = "")
	
	ИменаКолонок = Новый Массив;
	Если ЗначениеЗаполнено(Поля) Тогда
		ИменаКолонок = СтрРазделить(Поля, ", ", Ложь);
	Иначе	// Все колонки таблицы
		Для каждого Колонка Из Таблица.Колонки Цикл
			ИменаКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
	КонецЕсли;

	Псевдоним = "т";

	ТекстЗапроса = "ВЫБРАТЬ";

	ТекстЗапроса = ТекстЗапроса + Символы.ПС + СтрСоединить(ИменаКолонок, ", ");

	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ПОМЕСТИТЬ " + Имя;

	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ &ТаблицаЗначений КАК " + Псевдоним;

	Если ЗначениеЗаполнено(Индексы) Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИНДЕКСИРОВАТЬ ПО " + Индексы;
	КонецЕсли; 

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("ТаблицаЗначений", Таблица);
	Запрос.Выполнить();

КонецПроцедуры

// Выгружает временную таблицу запроса
// 
// Параметры:
//	Источник - Запрос					 - Запрос, содержащий временную таблицу. 
//											Если запрос не содержит менеджер временных таблиц, 
//											запрос будет выполнен повторно.
//			 - МенеджерВременныхТаблиц	 - Менеджер временных таблиц, из которого выгружается таблица
//	ВременнаяТаблица - Строка			 - Имя временой таблицы
//					 - Число			 - Индекс временной таблицы
//
// Возвращаемое значение:
//	ТаблицаЗначений - Выгруженная таблица
//
// Совместимость: 8.3.8.
//
Функция ВыгрузитьВременнуюТаблицуЗапроса(Источник, ВременнаяТаблица) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Запрос") Тогда

		ЕстьМенеджер = Источник.МенеджерВременныхТаблиц <> Неопределено;
		Если ЕстьМенеджер Тогда

			Выгрузка = ВыгрузитьВременнуюТаблицуЗапроса(Источник.МенеджерВременныхТаблиц, ВременнаяТаблица);

		Иначе

			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = Источник.Текст;
			Для каждого ПараметрЗапроса Из Источник.Параметры Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
			Результат = Запрос.Выполнить();
			Выгрузка = ВыгрузитьВременнуюТаблицуЗапроса(МенеджерВременныхТаблиц, ВременнаяТаблица);
			МенеджерВременныхТаблиц.Закрыть();

		КонецЕсли;

	ИначеЕсли ТипЗнч(Источник) = Тип("МенеджерВременныхТаблиц") Тогда

		Если ТипЗнч(ВременнаяТаблица) = Тип("Строка") Тогда
			Таблица = Источник.Таблицы.Найти(ВременнаяТаблица);
			Если Таблица <> Неопределено Тогда
				Выгрузка = Таблица.ПолучитьДанные().Выгрузить();
			Иначе
				ВызватьИсключение СтрШаблон("Временная таблица %1 отсутствует в менеджере временных таблиц", ВременнаяТаблица);
			КонецЕсли;

		ИначеЕсли ТипЗнч(ВременнаяТаблица) = Тип("Число") Тогда
			Если ВременнаяТаблица < Источник.Таблицы.Количество() Тогда
				Таблица = Источник[ВременнаяТаблица];
				Выгрузка = Таблица.ПолучитьДанные().Выгрузить();
			Иначе
				ВызватьИсключение СтрШаблон("Временная таблица с индексом %1 отсутствует в менеджере временных таблиц", ВременнаяТаблица);
			КонецЕсли;

		Иначе
			ВызватьИсключение "Параметр ВременнаяТаблица: Ожидается Строка или Число";

		КонецЕсли;

	Иначе
		ВызватьИсключение "Параметр Источник: Ожидается Запрос или МенеджерВременныхТаблиц";
		
	КонецЕсли;

	Возврат Выгрузка;

КонецФункции // ВыгрузитьВременнуюТаблицуЗапроса()

// Выгружает все временные таблицы запроса
// 
// Параметры:
//	Источник - Запрос					 - Запрос, содержащий временную таблицу. 
//											Если запрос не содержит менеджер временных таблиц, 
//											запрос будет выполнен повторно.
//			 - МенеджерВременныхТаблиц	 - Менеджер временных таблиц, из которого выгружается таблица
//
// Возвращаемое значение:
//	Структура - Выгруженные таблицы. Элементы:
//		* Ключ		 - Строка			 - Имя временой таблицы
//		* Значение	 - ТаблицаЗначений	 - Содержимое временной таблицы.
//
// Совместимость: 8.3.8.
//
Функция ВыгрузитьВременныеТаблицыЗапроса(Источник) Экспорт

	Если ТипЗнч(Источник) = Тип("Запрос") Тогда

		ЕстьМенеджер = Источник.МенеджерВременныхТаблиц <> Неопределено;
		Если ЕстьМенеджер Тогда

			Выгрузка = ВыгрузитьВременныеТаблицыЗапроса(Источник.МенеджерВременныхТаблиц);

		Иначе

			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = Источник.Текст;
			Для каждого ПараметрЗапроса Из Источник.Параметры Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
			Результат = Запрос.Выполнить();
			Выгрузка = ВыгрузитьВременныеТаблицыЗапроса(МенеджерВременныхТаблиц);
			МенеджерВременныхТаблиц.Закрыть();

		КонецЕсли;

	ИначеЕсли ТипЗнч(Источник) = Тип("МенеджерВременныхТаблиц") Тогда

		Выгрузка = Новый Структура;

		Для каждого Таблица Из Источник.Таблицы Цикл
			Выгрузка.Вставить(Таблица.ПолноеИмя, Таблица.ПолучитьДанные().Выгрузить());
		КонецЦикла;

	Иначе
		ВызватьИсключение "Параметр Источник: Ожидается Запрос или МенеджерВременныхТаблиц";
		
	КонецЕсли;

	Возврат Выгрузка;
	
КонецФункции // ВыгрузитьВременныеТаблицыЗапроса()


// Выгружает запрос в строку XML, которую можно вставить в Консоль запросов.
//  Аналогична функции БСП ОбщегоНазначения.ЗапросВСтрокуXML(),
//	но выгружает временные таблицы в качестве параметров,
//	и дополняет текст запросами помещения таблиц из параметров во временные таблицы.
// Консоль запросов на ИТС: https://its.1c.ru/db/metod8dev/content/4500/hdoc
//
// Параметры:
//   Запрос - Запрос - запрос, который необходимо выгрузить в формат строки XML.
//
// Возвращаемое значение:
//   Строка - строка в формате XML, которую можно извлечь при помощи метода "ОбщегоНазначения.ЗначениеИзСтрокиXML".
//       После извлечения получится объект типа "Структура" с полями:
//       * Текст     - Строка - текст запроса.
//       * Параметры - Структура - параметры запроса.
//
Функция ЗапросВСтрокуXML(Запрос) Экспорт

	ТекстЗапроса = Запрос.Текст;
	ПараметрыЗапроса = Новый Структура;
	Для каждого ПараметрЗапроса Из Запрос.Параметры Цикл
		ПараметрыЗапроса.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	#Область ВременныеТаблицы
	МенеджерВремТаб = Запрос.МенеджерВременныхТаблиц;
	Если МенеджерВремТаб <> Неопределено И ЗначениеЗаполнено(МенеджерВремТаб.Таблицы) Тогда
		
		ЧастиЗапроса = Новый Массив;
		ТекстЗапросаВРег = ВРег(Запрос.Текст);

		Для каждого ВремТаблица Из МенеджерВремТаб.Таблицы Цикл
			
			ИмяВремТаблицы = ВремТаблица.ПолноеИмя;

			// Если таблица не упоминается в запросе, тогда не выгружаем.
			// Поиск простой - для скорости.
			Если СтрНайти(ТекстЗапросаВРег, ВРег(ИмяВремТаблицы)) = 0 Тогда
				Продолжить;
			КонецЕсли;

			СодержимоеВремТаблицы = ВремТаблица.ПолучитьДанные().Выгрузить();

			Счетчик = 0;
			ИмяПараметраЗанято = Истина;
			Пока ИмяПараметраЗанято Цикл
				ИмяПараметраВремТаблицы = "ВремТаб_" + ИмяВремТаблицы + Формат(Счетчик, "ЧГ=0");
				ИмяПараметраЗанято = ПараметрыЗапроса.Свойство(ИмяПараметраВремТаблицы);
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ПараметрыЗапроса.Вставить(ИмяПараметраВремТаблицы, СодержимоеВремТаблицы);

			#Область ТекстЗапроса
			ВыбираемыеПоля = Новый Массив;
			Для каждого Колонка Из ВремТаблица.Колонки Цикл
				ВыбираемыеПоля.Добавить("	вт." + Колонка.Имя);
			КонецЦикла;
			ВыбираемыеПоля = СтрСоединить(ВыбираемыеПоля, "," + Символы.ПС);

			ТекстЗапросаВремТаблицы = СтрШаблон(
				"ВЫБРАТЬ
				|%1
				|ПОМЕСТИТЬ %3
				|ИЗ &%2 КАК вт",
				ВыбираемыеПоля,
				ИмяПараметраВремТаблицы,
				ИмяВремТаблицы
			);

			ЧастиЗапроса.Добавить(ТекстЗапросаВремТаблицы);
			#КонецОбласти

		КонецЦикла;

		ЧастиЗапроса.Добавить(ТекстЗапроса);
		ТекстЗапроса = СтрСоединить(ЧастиЗапроса, 
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");

	КонецЕсли;

	#КонецОбласти // ВременныеТаблицы

	ЗапросСтруктурой = Новый Структура("Текст, Параметры", ТекстЗапроса, ПараметрыЗапроса);

	#Область ЗначениеВСтрокуXML

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЗапросСтруктурой, НазначениеТипаXML.Явное);
	
	ЗначениеСтрокойXML = ЗаписьXML.Закрыть();

	#КонецОбласти // ЗначениеВСтрокуXML

	Возврат ЗначениеСтрокойXML;

КонецФункции // ЗапросВСтрокуXML()

// Заменяет запрос пакета указанным запросом.
// см. ЗаменитьВременнуюТаблицуСхемойЗапроса()
//
// Параметры:
//  ИсходныйЗапрос			 - Запрос - Запрос, чей текст будет обработан
//							 - Строка - Текст исходного запроса
//  ЗаменяемыйЗапрос		 - Число - Индекс заменяемого запроса
//							 - Строка - Имя временной таблицы заменяемого запроса. Будет заменён первый запрос с таким именем.
//	ЗаменяющийЗапрос		 - Запрос - Запрос, чей текст будет подставлен.
//							 - Строка - Текст заменяющего запроса.
//  ПрефиксВременныхТаблиц	 - Строка		 - Префикс, который будет установлен заменяющим запросам на формирование временных таблиц
//  СоответствиеИменПолей	 - Соответствие	 - Поля соответствия последнего запроса заменяющей схемы и заменяемого запроса. 
//		Ключ: Имя поля заменяющего запроса. Значение: Целевое имя поля (заменяемого запроса).
//		Поля, присутствующие в исходном запросе, переименованы не будут.
//
Процедура ЗаменитьЗапросПакета(
	ИсходныйЗапрос, 
	ЗаменяемыйЗапрос, 
	ЗаменяющийЗапрос, 
	ПрефиксВременныхТаблиц = "", 
	Знач СоответствиеИменПолей = Неопределено) Экспорт
	
	Если ТипЗнч(ИсходныйЗапрос) = Тип("Запрос") Тогда
		ИсходныйТекстЗапроса = ИсходныйЗапрос.Текст;
	ИначеЕсли ТипЗнч(ИсходныйЗапрос) = Тип("Строка") Тогда
		ИсходныйТекстЗапроса = ИсходныйЗапрос;
	Иначе
		ВызватьИсключение "Параметр ИсходныйЗапрос: Неожиданный тип.";
	КонецЕсли;
	ИсходнаяСхемаЗапроса = Новый СхемаЗапроса;
	ИсходнаяСхемаЗапроса.УстановитьТекстЗапроса(ИсходныйТекстЗапроса);

	Если ТипЗнч(ЗаменяемыйЗапрос) = Тип("Число") Тогда
		ЗаменяемыйЗапросСхемы = ИсходнаяСхемаЗапроса.ПакетЗапросов[ЗаменяемыйЗапрос];
	ИначеЕсли ТипЗнч(ЗаменяемыйЗапрос) = Тип("Строка") Тогда
		ЗаменяемыйЗапросСхемы = Неопределено;
		Для Каждого ТекущийЗапросСхемы Из ИсходнаяСхемаЗапроса.ПакетЗапросов Цикл
			Если ТекущийЗапросСхемы.ТаблицаДляПомещения = ЗаменяемыйЗапрос Тогда
				ЗаменяемыйЗапросСхемы = ТекущийЗапросСхемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаменяемыйЗапросСхемы = Неопределено Тогда
			ВызватьИсключение "Не удалось найти заменяемый запрос схемы по имени временной таблицы.";
		КонецЕсли;
	Иначе
		ВызватьИсключение "Параметр ЗаменяемыйЗапрос: Неожиданный тип.";
	КонецЕсли;

	Если ТипЗнч(ЗаменяющийЗапрос) = Тип("Запрос") Тогда
		ТекстЗаменяющегоЗапроса = ЗаменяющийЗапрос.Текст;
	ИначеЕсли ТипЗнч(ЗаменяющийЗапрос) = Тип("Строка") Тогда
		ТекстЗаменяющегоЗапроса = ЗаменяющийЗапрос;
	Иначе
		ВызватьИсключение "Параметр ЗаменяющийЗапрос: Неожиданный тип.";
	КонецЕсли;
	ЗаменяющаяСхемаЗапроса = Новый СхемаЗапроса;
	ЗаменяющаяСхемаЗапроса.УстановитьТекстЗапроса(ТекстЗаменяющегоЗапроса);

	ЗаменитьВременнуюТаблицуСхемойЗапроса(
		ИсходнаяСхемаЗапроса, 
		ЗаменяемыйЗапросСхемы,
		ЗаменяющаяСхемаЗапроса,
		ПрефиксВременныхТаблиц,
		СоответствиеИменПолей
	);

	ИзмененныйТекстЗапроса = ИсходнаяСхемаЗапроса.ПолучитьТекстЗапроса();
	Если ТипЗнч(ИсходныйЗапрос) = Тип("Запрос") Тогда
		ИсходныйЗапрос.УстановитьТекстЗапроса(ИзмененныйТекстЗапроса);
	Иначе // Строка
		ИсходныйЗапрос = ИзмененныйТекстЗапроса;
	КонецЕсли;

КонецПроцедуры // ЗаменитьЗапросПакета()

#Область СхемаЗапроса

// Присоединяет схему запроса к существуещей схеме.
//
// Параметры:
//  ИсходнаяСхемаЗапроса            - СхемаЗапроса  - Обобщающая схема
//  ПрисоединяемаяСхемаЗапроса      - СхемаЗапроса  - схема, которая будет добавлена к исходной
//
Процедура ПрисоединитьСхемуЗапроса(ИсходнаяСхемаЗапроса, ПрисоединяемаяСхемаЗапроса)

	Если Ложь Тогда 
		ИсходнаяСхемаЗапроса		= Новый СхемаЗапроса;
		ПрисоединяемаяСхемаЗапроса	= Новый СхемаЗапроса;
	КонецЕсли;
	
	Для каждого ЗапросСхемыПрисоединяемый Из ПрисоединяемаяСхемаЗапроса.ПакетЗапросов Цикл
		Если ИсходнаяСхемаЗапроса.ПакетЗапросов.Количество() = 1
			И ТипЗнч(ИсходнаяСхемаЗапроса.ПакетЗапросов[0]) = Тип("ЗапросВыбораСхемыЗапроса")
			И НЕ ИсходнаяСхемаЗапроса.ПакетЗапросов[0].Колонки.Количество() Тогда     // Первый запрос пакета не задан
			ЗапросСхемыПрисоединенный = ИсходнаяСхемаЗапроса.ПакетЗапросов[0];
		Иначе
			ЗапросСхемыПрисоединенный = ИсходнаяСхемаЗапроса.ПакетЗапросов.Добавить(ТипЗнч(ЗапросСхемыПрисоединяемый));
		КонецЕсли;
		Если ТипЗнч(ЗапросСхемыПрисоединяемый) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ЗапросСхемыПрисоединенный.УстановитьТекстЗапроса(ЗапросСхемыПрисоединяемый.ПолучитьТекстЗапроса());
		ИначеЕсли ТипЗнч(ЗапросСхемыПрисоединяемый) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			ЗапросСхемыПрисоединенный.ИмяТаблицы        = ЗапросСхемыПрисоединяемый.ИмяТаблицы;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Создаёт запросы пакета на уничтожение временных таблиц
//
// Параметры:
//  СхемаЗапроса             - СхемаЗапроса  -
//
Процедура ДобавитьУничтожениеВременныхТаблицСхемыЗапроса(СхемаЗапроса)

	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
	КонецЕсли;

	СуществующиеВременныеТаблицы = Новый Массив; // Удалённые после создания схемы временные таблицы почему-то остаются среди доступных
	Для каждого ЗапросСхемы Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Если ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
					СуществующиеВременныеТаблицы.Добавить(ЗапросСхемы.ТаблицаДляПомещения);
			КонецЕсли;
		Иначе  // Уничтожение
			Индекс = СуществующиеВременныеТаблицы.Найти(ЗапросСхемы.ИмяТаблицы);
			Если Индекс <> Неопределено Тогда
					СуществующиеВременныеТаблицы.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ИмяВременнойТаблицыРезультата = ЗапросСхемы.ТаблицаДляПомещения;     // На случай, если результатом запроса является временная таблица

	// Уничтожим временные таблицы:
	ГруппыДоступныхТаблиц = ЗапросСхемы.ДоступныеТаблицы;
	ДоступныеТаблицы = ГруппыДоступныхТаблиц[ГруппыДоступныхТаблиц.Количество() - 1].Состав;    // Временные таблицы
	Для каждого ДоступнаяТаблица Из ДоступныеТаблицы Цикл
		Если ДоступнаяТаблица.Имя = ИмяВременнойТаблицыРезультата Тогда Продолжить КонецЕсли;
		Если СуществующиеВременныеТаблицы.Найти(ДоступнаяТаблица.Имя) = Неопределено Тогда Продолжить КонецЕсли;
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросСхемы.ИмяТаблицы = ДоступнаяТаблица.Имя;
	КонецЦикла;

КонецПроцедуры    // ДобавитьУничтожениеВременныхТаблицСхемыЗапроса()

// Добавляет источник - временную таблицу из менеджера временных таблиц
//
// Параметры:
//  ОператорСхемы			 - ОператорВыбратьСхемыЗапроса	 - Оператор, в который добавляется источник.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - Источник сведений о таблице
//  ИмяТаблицы				 - Строка	 - Имя таблицы в менеджере
//  Псевдоним				 - Строка	 - Псевдоним добавляемого источника
//
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Добавленный источник
//
Функция ДобавитьИсточникСхемыЗапросаВременнуюТаблицу(ОператорСхемы, МенеджерВременныхТаблиц, ИмяТаблицы, Псевдоним = "")

	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса; 
		ОператорСхемы = СхемаЗапроса.ПакетЗапросов[0].Операторы[0]; 
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;

	ВременнаяТаблица = МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы);
	ИсточникСхемы = ОператорСхемы.Источники.Добавить(
		Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), 
		ВременнаяТаблица.ПолноеИмя, 
		?(ЗначениеЗаполнено(Псевдоним), Псевдоним, Неопределено)
	);
	Для каждого Колонка Из ВременнаяТаблица.Колонки Цикл
		Тип = ТипЗнч(Колонка.ТипЗначения.ПривестиЗначение());
		Если Тип = Тип("Неопределено") Тогда 
			Тип = Неопределено;
		КонецЕсли;
		Если Тип = Тип("Строка") Тогда 
			// Для последующей связи по строке возможны проблемы, т.к. по умолчанию это строка неограниченной длины.
			Тип = Неопределено;	
		КонецЕсли;		
		ИсточникСхемы.Источник.ДоступныеПоля.Добавить(Колонка.Имя, Тип);
	КонецЦикла;
	Псевдоним = ИсточникСхемы.Источник.Псевдоним;
	Возврат ИсточникСхемы;

КонецФункции // ДобавитьИсточникСхемыЗапросаВременнуюТаблицу()

// Производит поиск временной таблицы с указанным именем
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса	 - Схема, в которой будет произведён поиск
//  ИмяТаблицы	 - Строка		 - Имя искомой таблицы
// 
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса, Неопределено - Найденный запрос. Если запрос отсутствует, будет возвращено Неопределено.
//
Функция НайтиВременнуюТаблицуСхемыЗапроса(СхемаЗапроса, ИмяТаблицы)
	
	Для каждого ЗапросСхемы Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") 
			И ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) 
			И ЗапросСхемы.ТаблицаДляПомещения = ИмяТаблицы Тогда
			Возврат ЗапросСхемы;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиВременнуюТаблицуСхемыЗапроса()

// Заменяет запрос схемы пакетом запросов другой схемы.
// Последний запрос заменяющей схемы используется вместо заменяемого запроса.
// Следует использовать для замены запросов-болванок полноценными запросами, формируемыми отдельно.
// Из заменяемой таблицы берутся:
//  * Выбираемые поля
//  * Имя таблицы для помещения
//  * Индексы
//
// Параметры:
//  ИсходнаяСхемаЗапроса	 - СхемаЗапроса				 - Модифицируемая схема запроса
//  ЗаменяемыйЗапросСхемы	 - ЗапросВыбораСхемыЗапроса	 - Заменяемый запрос схемы
//  ЗаменяющаяСхемаЗапроса	 - СхемаЗапроса				 - Схема, запросы которой заменяют ЗаменяемыйЗапросСхемы
//  ПрефиксВременныхТаблиц	 - Строка					 - Префикс, который будет установлен заменяющим запросам на формирование временных таблиц
//  СоответствиеИменПолей	 - Соответствие				 - Поля соответствия последнего запроса заменяющей схемы и заменяемого запроса. 
//		Ключ: Имя поля заменяющий схемы. Значение: Целевое имя поля (заменяемого запроса).
//		Поля, присутствующие в исходном запросе, переименованы не будут.
//
Процедура ЗаменитьВременнуюТаблицуСхемойЗапроса(
	ИсходнаяСхемаЗапроса, 
	ЗаменяемыйЗапросСхемы, 
	Знач ЗаменяющаяСхемаЗапроса, 
	ПрефиксВременныхТаблиц = "", 
	Знач СоответствиеИменПолей = Неопределено) Экспорт

	Если Ложь Тогда 
		ИсходнаяСхемаЗапроса = Новый СхемаЗапроса;
		ЗаменяемыйЗапросСхемы = ИсходнаяСхемаЗапроса.ПакетЗапросов.Добавить();
	КонецЕсли;
	
	Если СоответствиеИменПолей = Неопределено Тогда
		СоответствиеИменПолей = новый Соответствие;
	КонецЕсли; 
	
	СхемаЗапросаПрисоединяемая = Новый СхемаЗапроса;
	СхемаЗапросаПрисоединяемая.УстановитьТекстЗапроса(ЗаменяющаяСхемаЗапроса.ПолучитьТекстЗапроса());
	
	// Префиксация:
	Если ЗначениеЗаполнено(ПрефиксВременныхТаблиц) Тогда
		Для каждого ЗапросСхемы Из СхемаЗапросаПрисоединяемая.ПакетЗапросов Цикл
			Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросВыбораСхемыЗапроса") И ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
				ЗапросСхемы.ТаблицаДляПомещения = ПрефиксВременныхТаблиц + ЗапросСхемы.ТаблицаДляПомещения;
			ИначеЕсли ТипЗнч(ЗапросСхемы) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				ЗапросСхемы.ИмяТаблицы = ПрефиксВременныхТаблиц + ЗапросСхемы.ИмяТаблицы;
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли;
	
	// Замена:
	Для каждого ПрисоединяемыйЗапрос Из СхемаЗапросаПрисоединяемая.ПакетЗапросов Цикл
		
		ИндексПрисоединяемогоЗапроса = СхемаЗапросаПрисоединяемая.ПакетЗапросов.Индекс(ПрисоединяемыйЗапрос);
		МаксИндексПрисоединяемойСхемы = (СхемаЗапросаПрисоединяемая.ПакетЗапросов.Количество() - 1);
		ЭтоПоследнийЗапросПрисоединяемойСхемы = ИндексПрисоединяемогоЗапроса = МаксИндексПрисоединяемойСхемы;
		
		Если Не ЭтоПоследнийЗапросПрисоединяемойСхемы Тогда
			
			// Вставка до заменяемого запроса
			
			ЗапросСхемыПрисоединенный = ИсходнаяСхемаЗапроса.ПакетЗапросов.Добавить(ТипЗнч(ПрисоединяемыйЗапрос));
			Если ТипЗнч(ПрисоединяемыйЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
				ЗапросСхемыПрисоединенный.УстановитьТекстЗапроса(ПрисоединяемыйЗапрос.ПолучитьТекстЗапроса());
			ИначеЕсли ТипЗнч(ПрисоединяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				ЗапросСхемыПрисоединенный.ИмяТаблицы = ПрисоединяемыйЗапрос.ИмяТаблицы;
			КонецЕсли;
			Смещение = ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗаменяемыйЗапросСхемы)
				- ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗапросСхемыПрисоединенный);
			ИсходнаяСхемаЗапроса.ПакетЗапросов.Сдвинуть(ЗапросСхемыПрисоединенный, Смещение);
		
		Иначе	
			
			// Замена запроса с установкой аттрибутов
			
			ЗапросСхемыИсточник = ПрисоединяемыйЗапрос;
			ЗапросСхемыПриемник = ЗаменяемыйЗапросСхемы;
			ЗапросСхемыДубликатПриемника = ИсходнаяСхемаЗапроса.ПакетЗапросов.ДобавитьКопию(
				// Используется для проверки колонок и переноса атрибутов.
				ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗапросСхемыПриемник));	
			
			// Удаление лишних колонок
			УдаляемыеКолонки = Новый Массив;
			Для каждого КолонкаСхемы Из ЗапросСхемыИсточник.Колонки Цикл
				Если ЗапросСхемыДубликатПриемника.Колонки.Найти(КолонкаСхемы.Псевдоним) = Неопределено 
					и СоответствиеИменПолей.Получить(КолонкаСхемы.Псевдоним) = Неопределено  Тогда
					УдаляемыеКолонки.Добавить(КолонкаСхемы);	// Пропуск поля
				КонецЕсли; 				
			КонецЦикла;
			Для каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
				ЗапросСхемыИсточник.Колонки.Удалить(ЗапросСхемы.Колонки.Индекс(УдаляемаяКолонка));
			КонецЦикла; 
			
			// Переименование колонок:
			Для каждого КолонкаСхемы Из ЗапросСхемыИсточник.Колонки Цикл
				Если ЗапросСхемыДубликатПриемника.Колонки.Найти(КолонкаСхемы.Псевдоним) = Неопределено 
					и СоответствиеИменПолей.Получить(КолонкаСхемы.Псевдоним) <> Неопределено  Тогда
					КолонкаСхемы.Псевдоним = СоответствиеИменПолей[КолонкаСхемы.Псевдоним];
				КонецЕсли; 
			КонецЦикла; 
			
			ЗапросСхемыИсточник.ТаблицаДляПомещения = ЗапросСхемыПриемник.ТаблицаДляПомещения;
			ЗапросСхемыПриемник.УстановитьТекстЗапроса(ЗапросСхемыИсточник.ПолучитьТекстЗапроса());
			
			Для каждого ВыражениеИндексаДубликат Из ЗапросСхемыДубликатПриемника.Индекс Цикл
				Если ТипЗнч(ВыражениеИндексаДубликат.Выражение) = Тип("КолонкаСхемыЗапроса") Тогда
					КолонкаСхемы = ЗапросСхемыПриемник.Колонки.Найти(ВыражениеИндексаДубликат.Выражение.Псевдоним);
					ЗапросСхемыПриемник.Индекс.Добавить(КолонкаСхемы);
				Иначе	// ВыражениеСхемыЗапроса
					ЗапросСхемыПриемник.Индекс.Добавить(ВыражениеИндексаДубликат.Выражение);
				КонецЕсли; 
			КонецЦикла;
			
			ИсходнаяСхемаЗапроса.ПакетЗапросов.Удалить(ИсходнаяСхемаЗапроса.ПакетЗапросов.Индекс(ЗапросСхемыДубликатПриемника));
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // ЗаменитьВременнуюТаблицуСхемойЗапроса()

// Получает параметр виртуальной таблицы по его имени, как оно указано в конструкторе запроса.
//
// Параметры:
//  ТаблицаСхемы - ТаблицаСхемыЗапроса	 - Таблица, параметры которой получаются.
//  ИмяПараметра - Строка				 - Имя искомого параметра.
//		Допустимые значения:
//
//		 Регистр сведений (срез первых и последних):
//			* Период
//			* Условие
//		
//		 Регистр накопления, остатки:
//			* Период
//			* Условие
//		
//		 Регистр накопления, обороты:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* Условие
//		
//		 Регистр накопления, остатки и обороты:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* МетодДополнения
//			* Условие
//		
//		 Регистр бухгалтерии, остатки:
//			* Период
//			* УсловиеСчета
//			* Субконто
//			* Условие
//		
//		 Регистр бухгалтерии, обороты:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* УсловиеСчета
//			* Субконто
//			* Условие
//			* УсловиеКорСчета	 - (при поддержке корреспонденции)
//			* КорСубконто		 - (при поддержке корреспонденции)
//		
//		 Регистр бухгалтерии, обороты Дт Кт:
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* УсловиеСчетаДт
//			* СубконтоДт
//			* УсловиеСчетаКт
//			* СубконтоКт
//			* Условие
//		
//		 Регистр бухгалтерии, остатки и обороты: 
//			* НачалоПериода
//			* КонецПериода
//			* Периодичность
//			* МетодДополнения
//			* УсловиеСчета
//			* Субконто
//			* Условие
//		
//		 Регистр бухгалтерии, движения с субконто: 
//			* НачалоПериода
//			* КонецПериода
//			* Условие
//			* Упорядочивание
//			* Первые
//		
//		 Регистр расчета, фактический период действия:
//			* Условие
//		
//		 Регистр расчета, данные графика:
//			* Условие
//		
//		 Регистр расчета, таблица базовых данных:
//			* ИзмеренияОсновногоРегистра
//			* ИзмеренияБазовогоРегистра
//			* Разрезы
//			* Условие
//		
//		 Критерий отбора:
//			* Значение
//		
//		 Задача, задачи по исполнителю
//			* Исполнитель
//			* Условие
// 
// Возвращаемое значение:
//  - ПараметрТаблицыСхемыЗапроса - Найденный параметр. 
//	- Неопределено - Если параметр не найден.
//
Функция ПараметрВиртуальнойТаблицыСхемыЗапроса(ТаблицаСхемы, ИмяПараметра)
	
	Если Ложь Тогда 
		СхемаЗапроса	 = Новый СхемаЗапроса;
		ЗапросСхемы		 = СхемаЗапроса.ПакетЗапросов[0];
		ОператорСхемы	 = ЗапросСхемы.Операторы[0];
		ТаблицаСхемы	 = ОператорСхемы.Источники[0].Источник;
	КонецЕсли;
	
	ИменаПараметров		 = Новый Массив;	// Имена параметров в порядке их следования
	
	ИмяТаблицы = ТаблицаСхемы.ИмяТаблицы;
	Если СтрНачинаетсяС(ИмяТаблицы, "РегистрСведений.")
		И (СтрЗаканчиваетсяНа(ИмяТаблицы, ".СрезПервых")
		Или СтрЗаканчиваетсяНа(ИмяТаблицы, ".СрезПоследних")) Тогда
		
		ИменаПараметров.Добавить("Период");
		ИменаПараметров.Добавить("Условие");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрНакопления.")
		И СтрЗаканчиваетсяНа(ИмяТаблицы, ".Остатки") Тогда
		
		ИменаПараметров.Добавить("Период");
		ИменаПараметров.Добавить("Условие");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрНакопления.")
		И СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОстаткиИОбороты") Тогда
		
		ИменаПараметров.Добавить("НачалоПериода");
		ИменаПараметров.Добавить("КонецПериода");
		ИменаПараметров.Добавить("Периодичность");
		ИменаПараметров.Добавить("МетодДополнения");
		ИменаПараметров.Добавить("Условие");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрБухгалтерии.") Тогда
		
		Если СтрЗаканчиваетсяНа(ИмяТаблицы, ".Остатки") Тогда
		
			ИменаПараметров.Добавить("Период");
			ИменаПараметров.Добавить("УсловиеСчета");
			ИменаПараметров.Добавить("Субконто");
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".Обороты") Тогда
		
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Периодичность");
			ИменаПараметров.Добавить("УсловиеСчета");
			ИменаПараметров.Добавить("Субконто");
			ИменаПараметров.Добавить("Условие");
			
			ЕстьКорреспонденция = ТаблицаСхемы.Параметры.Количество() > ИменаПараметров.Количество();
			Если ЕстьКорреспонденция Тогда
				ИменаПараметров.Добавить("УсловиеКорСчета");
				ИменаПараметров.Добавить("КорСубконто");
			КонецЕсли; 
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОборотыДтКт") Тогда
		
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Периодичность");
			ИменаПараметров.Добавить("УсловиеСчетаДт");
			ИменаПараметров.Добавить("СубконтоДт");
			ИменаПараметров.Добавить("УсловиеСчетаКт");
			ИменаПараметров.Добавить("СубконтоКт");
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ОстаткиИОбороты") Тогда
				
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Периодичность");
			ИменаПараметров.Добавить("МетодДополнения");
			ИменаПараметров.Добавить("УсловиеСчета");
			ИменаПараметров.Добавить("Субконто");
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ДвиженияССубконто") Тогда
				
			ИменаПараметров.Добавить("НачалоПериода");
			ИменаПараметров.Добавить("КонецПериода");
			ИменаПараметров.Добавить("Условие");
			ИменаПараметров.Добавить("Упорядочивание");
			ИменаПараметров.Добавить("Первые");
		
		Иначе
			
			Возврат Неопределено;
		
		КонецЕсли; 
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "РегистрРасчетов.") Тогда
		
		Если СтрЗаканчиваетсяНа(ИмяТаблицы, ".ФактическийПериодДействия") Тогда
			
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяТаблицы, ".ДанныеГрафика") Тогда
			
			ИменаПараметров.Добавить("Условие");
			
		ИначеЕсли СтрНайти(ИмяТаблицы, ".База") Тогда
			
			ИменаПараметров.Добавить("ИзмеренияОсновногоРегистра");
			ИменаПараметров.Добавить("ИзмеренияБазовогоРегистра");
			ИменаПараметров.Добавить("Разрезы");
			ИменаПараметров.Добавить("Условие");
			
		Иначе
			
			Возврат Неопределено;
		
		КонецЕсли; 
				
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "КритерийОтбора.") Тогда
		
		ИменаПараметров.Добавить("Значение");
		
	ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "Задача")
		И СтрЗаканчиваетсяНа(ИмяТаблицы, ".ЗадачиПоИсполнителю") Тогда
		
			ИменаПараметров.Добавить("Исполнитель");
			ИменаПараметров.Добавить("Условие");
		
	Иначе
		
		Возврат Неопределено;
	
	КонецЕсли; 
	
	ИндексыПараметровВРег	 = Новый Соответствие;
	Для Индекс = 0 По ИменаПараметров.ВГраница() Цикл
		ИндексыПараметровВРег.Вставить(ВРег(ИменаПараметров[Индекс]), Индекс);
	КонецЦикла;  
	
	ИндексПараметра = ИндексыПараметровВРег[ВРег(ИмяПараметра)];
	
	Если ИндексПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ТаблицаСхемы.Параметры[ИндексПараметра];
	
КонецФункции // ПараметрВиртуальнойТаблицыСхемыЗапроса()

// Добавляет в запрос схемы запроса оператор.
//
// Параметры:
//  ЗапросСхемы				 - ЗапросВыбораСхемыЗапроса				 - Запрос, к которому будет присоединен новый оператор
//  ДобавляемыйЗапрос		 - ОператорВыбратьСхемыЗапроса, Строка	 - Добавляемый запрос или его текст
//  ТипОбъединения			 - ТипОбъединенияСхемыЗапроса			 - Тип объединения присоединяемого запроса. По умолчанию: ОБЪЕДИНИТЬ ВСЕ
//  СопоставитьПоляПоИменам	 - Булево								 - Значения:
//		* Истина - поля присоединяемого запроса и исходного запроса сопоставляются по именам. 
//		* Ложь	 - поля сопоставляются по индексам. Недостающие поля заменяются NULL
//	ДобавитьОтсутствующиеПоля - Булево								 - Если Истина, отсутствующие в модифицируемом запросе, но присутствующие в добавляемом запросе поля 
//																		будут добавлены в запрос.
//
Функция ДобавитьОператорСхемыЗапросаКопированием(ЗапросСхемы, ДобавляемыйЗапрос, ТипОбъединения = Неопределено, СопоставитьПоляПоИменам = Истина, ДобавитьОтсутствующиеПоля = Ложь) Экспорт
	
	Если ТипЗнч(ЗапросСхемы) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
		ВызватьИсключение "Параметр ЗапросСхемы: Ожидается тип ЗапросВыбораСхемыЗапроса";
	КонецЕсли; 	
	
	Если ТипОбъединения = Неопределено Тогда
		ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	КонецЕсли; 
	
	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
		ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	КонецЕсли;
	
	Если ТипЗнч(ДобавляемыйЗапрос) = Тип("ОператорВыбратьСхемыЗапроса") Тогда
		ИсхОператорСхемы = ДобавляемыйЗапрос;
		ИсхСхемаЗапроса = Новый СхемаЗапроса();
		ИсхСхемаЗапроса.УстановитьТекстЗапроса(ДобавляемыйЗапрос.Представление());
	Иначе
		ИсхСхемаЗапроса = Новый СхемаЗапроса;
		ИсхСхемаЗапроса.УстановитьТекстЗапроса(ДобавляемыйЗапрос);
		ИсхОператорСхемы = ИсхСхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	КонецЕсли; 
	ИсхЗапросСхемы = ИсхСхемаЗапроса.ПакетЗапросов[0];
	
	#Область Проверки
	Если ИсхСхемаЗапроса.ПакетЗапросов.Количество() > 1 Тогда
		ВызватьИсключение "Добавляемый запрос содержит более одного запроса в пакете";
	ИначеЕсли ИсхЗапросСхемы.Операторы.Количество() > 1 Тогда
		ВызватьИсключение "Добавляемый запрос содержит более одного оператора ВЫБРАТЬ";
	ИначеЕсли ТипЗнч(ИсхОператорСхемы) <> Тип("ОператорВыбратьСхемыЗапроса") Тогда
		ВызватьИсключение "Добавляется не оператор ВЫБРАТЬ";	
	Иначе 
	КонецЕсли; 
	
	Если СопоставитьПоляПоИменам Тогда
		Для каждого Колонка Из ЗапросСхемы.Колонки Цикл
			Если ИсхСхемаЗапроса.ПакетЗапросов[0].Колонки.Найти(Колонка.Псевдоним) = Неопределено Тогда
				ВызватьИсключение "Не все колонки есть в добавляемом запросе";
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	#КонецОбласти // Проверки 
	
	#Область Добавление
		
	НовОператорСхемы = ЗапросСхемы.Операторы.Добавить();	
	
	ДобавитьИсточникиСхемыЗапросаКопированием(НовОператорСхемы.Источники, ИсхОператорСхемы.Источники);
	
	// Выбираемые поля:
	ДобавляемыеКолонки = Новый СписокЗначений;
	НовКолонки = ЗапросСхемы.Колонки;
	ИсхКолонки = ИсхЗапросСхемы.Колонки;
	Для каждого Колонка Из НовКолонки Цикл
		Если СопоставитьПоляПоИменам Тогда
			ИсхКолонка = ИсхКолонки.Найти(Колонка.Псевдоним);
			
		ИначеЕсли ЗапросСхемы.Колонка.Количество() <= ИсхЗапросСхемы.Колонка.Количество() Тогда
			ИсхКолонка = ИсхКолонки[НовКолонки.Индекс(Колонка)];
			
		Иначе
			ИсхКолонка = Неопределено;
		
		КонецЕсли; 
		
		Если ИсхКолонка <> Неопределено Тогда
			ДобавляемыеКолонки.Добавить(ИсхКолонка.Поля[0], ИсхКолонка.Псевдоним);		
		Иначе
			ДобавляемыеКолонки.Добавить("NULL", Колонка.Псевдоним);
		КонецЕсли;  		
	КонецЦикла; 
	Если ДобавитьОтсутствующиеПоля Тогда
		Для каждого ИсхКолонка Из ИсхЗапросСхемы.Колонки Цикл
			Если СопоставитьПоляПоИменам И ЗапросСхемы.Колонки.Найти(ИсхКолонка.Псевдоним) = Неопределено 
				Или Не СопоставитьПоляПоИменам И ИсхЗапросСхемы.Колонки.Индекс(ИсхКолонка) > (ЗапросСхемы.Колонки.Количество() - 1) Тогда
				
				ДобавляемыеКолонки.Добавить(ИсхКолонка.Поля[0], ИсхКолонка.Псевдоним);
				
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли; 
	Для каждого ДобавляемаяКолонка Из ДобавляемыеКолонки Цикл
		
		ДобавляемоеПоле = ДобавляемаяКолонка.Значение;
		ПсевдонимКолонки = ДобавляемаяКолонка.Представление;
		Колонка = ЗапросСхемы.Колонки.Найти(ПсевдонимКолонки);
		
		Если Колонка <> Неопределено Тогда
		    ИндексКолонки = ЗапросСхемы.Колонки.Индекс(Колонка);
			НовОператорСхемы.ВыбираемыеПоля.Добавить(Строка(ДобавляемоеПоле), ИндексКолонки);
			
		Иначе
			НовОператорСхемы.ВыбираемыеПоля.Добавить(Строка(ДобавляемоеПоле));
			
		КонецЕсли; 
		
		Если Колонка = Неопределено Тогда
			Колонка = ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество() - 1];
			Колонка.Псевдоним = ПсевдонимКолонки;
		КонецЕсли; 
		
	КонецЦикла; 
	
	// ВыраженияОтбораКомпоновкиДанных:
	Для каждого ИсхВыражениеОтбора Из ИсхОператорСхемы.ВыраженияОтбораКомпоновкиДанных Цикл
		НовВыражениеКомпоновки = НовОператорСхемы.ВыраженияОтбораКомпоновкиДанных.Добавить(ИсхВыражениеОтбора.Выражение);										
		НовВыражениеКомпоновки.ИспользоватьРеквизиты = ИсхВыражениеОтбора.ИспользоватьРеквизиты;
		НовВыражениеКомпоновки.Псевдоним			 = ИсхВыражениеОтбора.Псевдоним;
	КонецЦикла; 
	
	// Группировки:
	Проверка = Новый Структура("Группировки");
	ЗаполнитьЗначенияСвойств(Проверка, НовОператорСхемы);
	ЕстьГруппирующиеНаборы = Проверка.Группировки <> Неопределено;
	Если ЕстьГруппирующиеНаборы И НовОператорСхемы.Группировки.Количество() > 1 Тогда
		
		Для каждого ИсхВыражениеСхемы Из ИсхОператорСхемы.Группировки[0] Цикл
			НовОператорСхемы.Группировки[0].Добавить(ИсхВыражениеСхемы);		
		КонецЦикла; 
		Для Индекс = 1 По ИсхОператорСхемы.Группировки.Количество() - 1 Цикл
			ИсхВыражениеСхемы = ИсхОператорСхемы.Группировки[Индекс];
			ДобавитьГруппировкуСхемыЗапросаКопированием(НовОператорСхемы.Группировки, ИсхВыражениеСхемы);
		КонецЦикла; 
		
	Иначе	// Просто группировки
		
		Для каждого ИсхВыражениеСхемы Из ИсхОператорСхемы.Группировка Цикл
			ДобавитьГруппировкуСхемыЗапросаКопированием(НовОператорСхемы.Группировка, ИсхВыражениеСхемы);
		КонецЦикла; 
	
	КонецЕсли; 
	// #СДЕЛАТЬ Группировки добавляются дважды, если в выбранных полях есть агрегатные функции 
	
	// Отбор:
	Для каждого ИсхВыражениеСхемы Из ИсхОператорСхемы.Отбор Цикл   
		НовОператорСхемы.Отбор.Добавить(ИсхВыражениеСхемы);		
	КонецЦикла; 
	
	НовОператорСхемы.ВыбиратьДляИзменения			 = ИсхОператорСхемы.ВыбиратьДляИзменения;
	// ТаблицыДляИзменения:
	Для каждого ИсхТаблицаДляИзменения Из ИсхОператорСхемы.ТаблицыДляИзменения Цикл
		НовОператорСхемы.ТаблицыДляИзменения.Добавить(ИсхТаблицаДляИзменения.ИмяТаблицы);
	КонецЦикла; 
	
	НовОператорСхемы.ВыбиратьРазличные				 = ИсхОператорСхемы.ВыбиратьРазличные;
	НовОператорСхемы.КоличествоПолучаемыхЗаписей	 = ИсхОператорСхемы.КоличествоПолучаемыхЗаписей;
	НовОператорСхемы.ТипОбъединения					 = ТипОбъединения;
	
	#КонецОбласти // Добавление 

	Возврат НовОператорСхемы;
	
КонецФункции // ДобавитьОператорСхемыЗапросаКопированием()

// Копирует источники схемы запроса из одной схемы в другую
//
// Параметры:
//  КоллекцияНазначение	 - ИсточникиСхемыЗапроса	 - Заполняемая коллекция
//  КоллекцияИсточник	 - ИсточникиСхемыЗапроса	 - Коллекция - источник элементов
//
Процедура ДобавитьИсточникиСхемыЗапросаКопированием(КоллекцияНазначение, КоллекцияИсточник) Экспорт
	
	Для каждого Источник Из КоллекцияИсточник Цикл
		ДобавитьИсточникСхемыЗапросаКопированием(КоллекцияНазначение, Источник);
	КонецЦикла; 		

КонецПроцедуры // ДобавитьИсточникиСхемыЗапросаКопированием()

// Копирует источник из одной схемы запроса в другой
//
// Параметры:
//  ИсточникиСхемыЗапроса	 - ИсточникиСхемыЗапроса	 - Коллекция, куда будет добавлен источник
//  КопируемыйИсточник		 - ИсточникСхемыЗапроса		 - Копируемый источник.
// 
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - Добавленный источник
//
Функция ДобавитьИсточникСхемыЗапросаКопированием(ИсточникиСхемыЗапроса, КопируемыйИсточник) Экспорт
	
	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
		ЗапросСхемы	 = СхемаЗапроса.ПакетЗапросов[0];
		ИсточникиСхемыЗапроса	 = ЗапросСхемы.Операторы[0].Источники;
		КопируемыйИсточник		 = ИсточникиСхемыЗапроса.Добавить();
	КонецЕсли;

	ИсточникиДляДобавления = Новый Массив;
	ИсточникиДляДобавления.Добавить(КопируемыйИсточник);
	
	ИсточникиДляДобавленияПсевдонимы = Новый Массив;
	ИсточникиДляДобавленияПсевдонимы.Добавить(КопируемыйИсточник.Источник.Псевдоним);
	
	СоединенияДляДобавления			 = Новый Соответствие;	// {Псевдоним источника:Строка; Массив}
	
	Для каждого ИсхИсточник Из ИсточникиДляДобавления Цикл
		
		Если Ложь Тогда 
			ИсхИсточник = КопируемыйИсточник;
		КонецЕсли;
		
		ТипИсточника = ТипЗнч(ИсхИсточник.Источник);
		ПсевдонимИсточника = ИсхИсточник.Источник.Псевдоним;
		
		Если ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ПсевдонимИсточника) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТипИсточника = Тип("ТаблицаСхемыЗапроса") Тогда
			НовИсточник = ИсточникиСхемыЗапроса.Добавить(ИсхИсточник.Источник.ИмяТаблицы, ПсевдонимИсточника);
			НовПараметры = НовИсточник.Источник.Параметры;
			ИсхПараметры = ИсхИсточник.Источник.Параметры;
			Для Индекс = 0 По ИсхПараметры.Количество() - 1 Цикл
				НовПараметры[Индекс].Выражение = ИсхПараметры[Индекс].Выражение;
			КонецЦикла; 
			НовПараметрыКомпоновки = НовИсточник.Источник.ПараметрыКомпоновкиДанных;
			ИсхПараметрыКомпоновки = ИсхИсточник.Источник.ПараметрыКомпоновкиДанных;
			Для Индекс = 0 По ИсхПараметрыКомпоновки.Количество() - 1 Цикл
				НовПараметрКомпоновки = НовПараметрыКомпоновки[Индекс];
				ИсхПараметрКомпоновки = ИсхПараметрыКомпоновки[Индекс];
				Если ТипЗнч(ИсхПараметрКомпоновки) = Тип("ВыраженияОтбораКомпоновкиДанныхСхемыЗапроса") Тогда
					Для каждого ИсхВыражениеОтбора Из ИсхПараметрКомпоновки Цикл
						НовВыражениеОтбора = ИсхПараметрКомпоновки.Добавить(ИсхВыражениеОтбора.Выражение);										
						НовВыражениеОтбора.ИспользоватьРеквизиты = ИсхВыражениеОтбора.ИспользоватьРеквизиты;
						НовВыражениеОтбора.Псевдоним			 = ИсхВыражениеОтбора.Псевдоним;
					КонецЦикла; 
					
				ИначеЕсли ТипЗнч(ИсхПараметрКомпоновки) = Тип("ПараметрыТаблицыСхемыЗапроса") Тогда
					Для Индекс = 0 По ИсхПараметрКомпоновки.Количество() - 1 Цикл
						НовПараметрКомпоновки[Индекс].Выражение = ИсхПараметрКомпоновки[Индекс].Выражение;
					КонецЦикла; 
				
				Иначе
					ВызватьИсключение "Неожиданный тип параметра таблицы";
				
				КонецЕсли; 
			КонецЦикла; 

		ИначеЕсли ТипИсточника = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			НовИсточник = ИсточникиСхемыЗапроса.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), ПсевдонимИсточника);
			ИсхТекстЗапроса = ИсхИсточник.Источник.Запрос.ПолучитьТекстЗапроса();
			НовИсточник.Источник.Запрос.УстановитьТекстЗапроса(ИсхТекстЗапроса);
			
		ИначеЕсли ТипИсточника = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			НовИсточник = ИсточникиСхемыЗапроса.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), ИсхИсточник.Источник.ИмяТаблицы, ПсевдонимИсточника);
			Для каждого ИсхДоступноеПоле Из ИсхИсточник.Источник.ДоступныеПоля Цикл
				ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно(НовИсточник.Источник.ДоступныеПоля, ИсхДоступноеПоле);		
			КонецЦикла;
			
		Иначе
			ВызватьИсключение "Неожиданный тип источника";
			
		КонецЕсли; 
		
		СоединенияДляДобавления.Вставить(ПсевдонимИсточника, Новый Массив);
		Для каждого ИсхСоединение Из ИсхИсточник.Соединения Цикл
			ИсхИсточникСоединения = ИсхСоединение.Источник;
			Если ИсточникиДляДобавленияПсевдонимы.Найти(ИсхИсточникСоединения.Источник.Псевдоним) = Неопределено
				И ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ИсхИсточникСоединения.Источник.Псевдоним) = Неопределено Тогда
				
				ИсточникиДляДобавления.Добавить(ИсхИсточникСоединения);
				ИсточникиДляДобавленияПсевдонимы.Добавить(ИсхИсточникСоединения.Источник.Псевдоним);
			
			КонецЕсли; 
			СоединенияДляДобавления[ПсевдонимИсточника].Добавить(ИсхСоединение);
		КонецЦикла; 
		
	КонецЦикла; 
	
	Для каждого СоединениеДляДобавления Из СоединенияДляДобавления Цикл
		
		ПсевдонимИсточника	 = СоединениеДляДобавления.Ключ;
		ИсхСоединения		 = СоединениеДляДобавления.Значение;
		
		ИсточникЛев = ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ПсевдонимИсточника);
		Для каждого ИсхСоединение Из ИсхСоединения Цикл
			ИсточникПрав = ИсточникиСхемыЗапроса.НайтиПоПсевдониму(ИсхСоединение.Источник.Источник.Псевдоним);
			ИсточникЛев.Соединения.Добавить(ИсточникПрав, Строка(ИсхСоединение.Условие));
			ДобСоединение = ИсточникЛев.Соединения.НайтиПоПсевдониму(ИсточникПрав.Источник.Псевдоним);
			ДобСоединение.ТипСоединения							 = ИсхСоединение.ТипСоединения;
			ДобСоединение.ОбязательноеСоединение				 = ИсхСоединение.ОбязательноеСоединение;
			ДобСоединение.НачалоГруппыНеобязательныхСоединений	 = ИсхСоединение.НачалоГруппыНеобязательныхСоединений;
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ИсточникиСхемыЗапроса.НайтиПоПсевдониму(КопируемыйИсточник.Источник.Псевдоним);

КонецФункции // ДобавитьИсточникСхемыЗапросаКопированием()

// Копирует доступное поле из одного оператора в другой.
// Только для описания временной таблицы схемы запроса.
//
// Параметры:
//  ДоступныеПоля	 - ДоступныеПоляСхемыЗапроса										 - Коллекция, где будет размещено новое поле
//  КопируемоеПоле	 - ДоступноеПолеСхемыЗапроса, ДоступнаяВложеннаяТаблицаСхемыЗапроса	 - Копируемое поле
// 
// Возвращаемое значение:
//  ДоступноеПолеСхемыЗапроса, ДоступнаяВложеннаяТаблицаСхемыЗапроса - Созданное поле. 
//
Функция ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно(ДоступныеПоля, КопируемоеПоле) Экспорт
	
	Если Ложь Тогда 
		СхемаЗапроса = Новый СхемаЗапроса;
		ДоступныеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники.Добавить().Источник.ДоступныеПоля;
		КопируемоеПоле = ДоступныеПоля.Добавить();
	КонецЕсли;
	
	Если ТипЗнч(ДоступныеПоля) <> Тип("ДоступныеПоляСхемыЗапроса") Тогда
		ВызватьИсключение "Параметр ДоступныеПоля: Ожидается тип ДоступныеПоляСхемыЗапроса";
	КонецЕсли; 
	
	ИмяПоля = КопируемоеПоле.Имя;
	Если ДоступныеПоля.Найти(ИмяПоля) <> Неопределено Тогда
		ВызватьИсключение "Добавляемое доступное поле с таким именем уже существует";
	КонецЕсли; 

	Если ТипЗнч(КопируемоеПоле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
		
		ИсхТипы = КопируемоеПоле.ТипЗначения.Типы();
		Если ИсхТипы.Количество() = 1 Тогда
			ИсхТип = ИсхТипы[0]
		Иначе
			ИсхТип = Неопределено;
		КонецЕсли; 
		
		ДоступныеПоля.Добавить(ИмяПоля, ИсхТип);
		ДобавленноеПоле = ДоступныеПоля.Найти(ИмяПоля);
		
	ИначеЕсли ТипЗнч(КопируемоеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
		
		ДоступныеПоля.Добавить(ИмяПоля, Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса"));
		ДобавленноеПоле = ДоступныеПоля.Найти(ИмяПоля);
		Для каждого ИсхДоступноеПоле Из КопируемоеПоле.Поля Цикл
			ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно(ДобавленноеПоле.Поля, ИсхДоступноеПоле);			
		КонецЦикла; 
		
	Иначе
		ВызватьИсключение "Параметр КопируемоеПоле: Ожидается тип ДоступноеПолеСхемыЗапроса, ДоступнаяВложеннаяТаблицаСхемыЗапроса";
	
	КонецЕсли; 			

	Возврат ДобавленноеПоле;
	
КонецФункции // ДобавитьДоступноеПолеСхемыЗапросаКопированиемРекурсивно()
 
// Добавляет группировку схемы запроса
//
// Параметры:
//	ГруппировкиСхемы		 - ВыраженияСхемыЗапроса - Коллекция группировок. См. ОператорВыбратьСхемыЗапроса.Группировка
//	КопируемаяГруппировка	 - ВыражениеСхемыЗапроса - Копируемая группировка.
//							 - ВыраженияСхемыЗапроса - Группа копируемых группировок. 
//	ТолькоУникальные		 - Булево				 - Если Истина, будут добавлены только ранее не существующие группировки.
//
Процедура ДобавитьГруппировкуСхемыЗапросаКопированием(ГруппировкиСхемы, КопируемаяГруппировка, ТолькоУникальные = Ложь) Экспорт

	Если ТипЗнч(КопируемаяГруппировка) = Тип("ВыражениеСхемыЗапроса") Тогда

		Если ТолькоУникальные 
			И ГруппировкиСхемы.Найти(Строка(КопируемаяГруппировка)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если ГруппировкиСхемы.Найти(Строка(КопируемаяГруппировка)) = Неопределено Тогда
			ГруппировкиСхемы.Добавить(КопируемаяГруппировка);
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(КопируемаяГруппировка) = Тип("ВыраженияСхемыЗапроса") Тогда
		ГруппировкиСхемы.Добавить();
		ДобавленнаяГруппировка = ГруппировкиСхемы[ГруппировкиСхемы.Количество() - 1];
		Для каждого ВложеннаяГруппировка Из КопируемаяГруппировка Цикл
			ДобавитьГруппировкуСхемыЗапросаКопированием(ДобавленнаяГруппировка, ВложеннаяГруппировка);
		КонецЦикла; 
		
	Иначе
		ВызватьИсключение "Неожиданный тип добавляемой группировки";
	
	КонецЕсли; 			
	
КонецПроцедуры // ДобавитьГруппировкуСхемыЗапросаКопированием()

#КонецОбласти // СхемаЗапроса

#Область Тексты

// Формирует запрос получения каждого дня периода
//
Функция ТекстЗапросаКаждыйДеньПериода(ИмяПараметраНачалоПериода = "НачалоПериода", ИмяПараметраКонецПериода = "КонецПериода")

	// #СДЕЛАТЬ формирование запроса в зависимости от количества дней периода
	// #СДЕЛАТЬ подстановку имён параметров

	Возврат
	"ВЫБРАТЬ 0 КАК Ч
	|ПОМЕСТИТЬ ДесятьЧисел
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 1 
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 2
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 3
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 4 
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 5
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 6
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 7
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 8
	|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 9
	|;
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, День, Числа.Число) КАК День
	|ИЗ (
	|	
	|	ВЫБРАТЬ 
	|		Тысячи.Ч*1000 + Сотни.Ч*100 + Десятки.Ч*10 + Единицы.Ч КАК Число
	|	ИЗ 
	|		ДесятьЧисел КАК Тысячи
	|		ПОЛНОЕ СОЕДИНЕНИЕ  ДесятьЧисел КАК Сотни	 ПО Истина
	|		ПОЛНОЕ СОЕДИНЕНИЕ  ДесятьЧисел КАК Десятки	 ПО Истина
	|		ПОЛНОЕ СОЕДИНЕНИЕ  ДесятьЧисел КАК Единицы	 ПО Истина
	|	ГДЕ 
	|		(Тысячи.Ч*1000 + Сотни.Ч*100 + Десятки.Ч*10 + Единицы.Ч) <= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, День)	
	|		
	|) КАК Числа
	|УПОРЯДОЧИТЬ ПО День";

КонецФункции // ТекстЗапросаКаждыйДеньПериода()

// Формирует текст запроса транзитивного замыкания элементов справочника
//
// Параметры:
//	ИмяСправочника - Строка - Имя справочника в метаданных
//	МаксимальнаяДлинаПути - Число - Максимальная длина определяемого пути между элементами.
//		Если не задано, то определяется по ограничению количества уровней иерархии справочника. 
//		Если предел иерархии справочника не задан, принимается равным 64.
//
// ВозвращаемоеЗначение:
//	ТекстЗапроса - Строка - ТексЗапроса, формирующий таблицу с полями:
//		* Предок	 - СправочникСсылка	 - Элемент-предок справочника
//		* Потомок	 - СправочникСсылка	 - Элемент-потомок справочника
//		* ДлинаДуги	 - Число			 - Количество шагов наследственности от предка до потомка. 
//										Для непосредственных родителей равна 1.
//
Функция ТекстЗапросаТранзитивногоЗамыканияСправочника(ИмяСправочника, МаксимальнаяДлинаПути = Неопределено)

	// Методика: https://infostart.ru/public/158512/

	Если МаксимальнаяДлинаПути = Неопределено Тогда
		МетаСправочник = Метаданные.Справочники[ИмяСправочника];
		Если МетаСправочник.ОграничиватьКоличествоУровней Тогда
			МаксимальнаяДлинаПути = МетаСправочник.КоличествоУровней;
		ИначеЕсли не МетаСправочник.Иерархческий Тогда
			МаксимальнаяДлинаПути = 1;
		Иначе
			МаксимальнаяДлинаПути = 64;
		КонецЕсли
	КонецЕсли;

	Пролог = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ Родитель НачалоДуги, Ссылка КонецДуги, 1 ДлинаДуги 
	| ПОМЕСТИТЬ ЗамыканияДлины1 ИЗ Справочник.%1
	| ГДЕ Родитель <> Значение(Справочник.%1.ПустаяСсылка)
	| ОБЪЕДИНИТЬ ВЫБРАТЬ Ссылка, Ссылка, 0 ИЗ Справочник.%1";

	Рефрен = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПерваяДуга.НачалоДуги, ВтораяДуга.КонецДуги, ПерваяДуга.ДлинаДуги + ВтораяДуга.ДлинаДуги ДлинаДуги 
	| ПОМЕСТИТЬ ЗамыканияДлины%2 ИЗ ЗамыканияДлины%1 КАК ПерваяДуга
	| ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины%1 КАК ВтораяДуга ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги;
	| УНИЧТОЖИТЬ ЗамыканияДлины%1";

	Эпилог = 
	"ВЫБРАТЬ НачалоДуги Предок, КонецДуги Потомок, ДлинаДуги ИЗ ЗамыканияДлины%1 ГДЕ НачалоДуги <> КонецДуги";

	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(СтрШаблон(Пролог, ИмяСправочника));	// Пролог

	МаксимальнаяДлинаЗамыканий = 1;
	Пока МаксимальнаяДлинаЗамыканий < МаксимальнаяДлинаПути Цикл	// Рефрен
		ЧастиЗапроса.Добавить(
			СтрШаблон(Рефрен, Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0"), 
			Формат(2 * МаксимальнаяДлинаЗамыканий, "ЧГ=0")));
		МаксимальнаяДлинаЗамыканий = 2 * МаксимальнаяДлинаЗамыканий;
	КонецЦикла;

	ЧастиЗапроса.Добавить(СтрШаблон(Эпилог, Формат(МаксимальнаяДлинаЗамыканий, "ЧГ=0")));	// Эпилог

	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, ";" + Символы.ПС);

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти // Тексты