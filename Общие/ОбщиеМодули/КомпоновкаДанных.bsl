
// Получает XML-текст макета компоновки данных
//
// Параметры:
//  МакетКомпоновкиДанных - МакетКомпоновкиДанных - Выводимый макет.
//
// Возвращаемое значение:
//  Строка - Текст макета компоновки данных в виде XML.
//
Функция ТекстМакетаКомпоновкиДанных(МакетКомпоновкиДанных)
  
  ЗаписьXML = Новый ЗаписьXML;
  ЗаписьXML.УстановитьСтроку();
  СериализаторXDTO.ЗаписатьXML(
	  ЗаписьXML, 
	  МакетКомпоновкиДанных, 
	  "dataComposition", 
	  "http://v8.1c.ru/8.1/data-composition-system/composition-template");
	  
  Возврат ЗаписьXML.Закрыть();
  
КонецФункции

// #СДЕЛАТЬ
//
// Преобразует поле из собственного формата СКД в формат, приемлемый для запроса.
//	Работает для таких выражений как НачалоМесяца(), Даты начала и конца, Части дат.
//
// Параметры:
//  ИмяПоля       -      - 
//  Выражение     -      - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПреобразоватьВыражениеПоляИзФорматаСКД(Знач Выражение, Отказ = Ложь)

    // В полях группировки могут встречаться поля СКД типа СрокОплаты.ЧастиДат.Месяц
    // Преобразуем такие поля в поля выражений запроса:
    #Область ЧастиДат
    ДопустимыеТипыПериодовСтрокой = "МИНУТА, ЧАС, ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, КВАРТАЛ, ГОД, ДЕКАДА, ПОЛУГОДИЕ";    // см. функцию языка запроса НАЧАЛОПЕРИОДА()
    ШаблоныВыражений = Новый Соответствие;
    ШаблоныВыражений.Вставить("НачалоМинуты",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "МИНУТА"));
    ШаблоныВыражений.Вставить("НачалоЧаса",            СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ЧАС"));
    ШаблоныВыражений.Вставить("НачалоДня",            СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ДЕНЬ"));
    ШаблоныВыражений.Вставить("НачалоНедели",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "НЕДЕЛЯ"));
    ШаблоныВыражений.Вставить("НачалоМесяца",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "МЕСЯЦ"));
    ШаблоныВыражений.Вставить("НачалоКвартала",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "КВАРТАЛ"));
    ШаблоныВыражений.Вставить("НачалоГода",            СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ГОД"));
    ШаблоныВыражений.Вставить("НачалоДекаты",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ДЕКАДА"));
    ШаблоныВыражений.Вставить("НачалоПолугодия",    СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ПОЛУГОДИЕ"));
    ДопустимыеТипыПериодов = Новый Массив;
    Для каждого Элемент Из ШаблоныВыражений Цикл
        ДопустимыеТипыПериодов.Добавить(Элемент.Ключ);
    КонецЦикла; 
    Для каждого ТипПериода Из ДопустимыеТипыПериодов Цикл
        ВыражениеПоля = ШаблоныВыражений.Получить(ТипПериода);
        ШаблоныВыражений.Вставить(СтрЗаменить(ТипПериода, "Начало", "Конец"), СтрЗаменить(ВыражениеПоля, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА"));                
    КонецЦикла;
    ДопустимыеТипыПериодов.Очистить();
    
    Маркер = ".ДатыНачала.";
    Если СтрНайти(Выражение, Маркер) > 0 Тогда
        ТипПериода = Прав(Выражение, СтрДлина(Выражение) - СтрНайти(Выражение, Маркер) + 1 - СтрДлина(Маркер));    // Хвост справа
        ШаблонВыражения = ШаблоныВыражений.Получить(ТипПериода);
        Если ШаблонВыражения = Неопределено Тогда
            Сообщить("Не допускается использование границы периода " + ТипПериода + " в группировке");
            //Продолжить;    // Нет такой части даты
            Отказ = Истина;
        КонецЕсли; 
        ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
        Выражение = СтрШаблон(ШаблонВыражения, ИмяПоляДаты);
        ПолеМодифицировано    = Истина;
    КонецЕсли; 
    
    Маркер = ".ДатыКонца.";
    Если СтрНайти(Выражение, Маркер) > 0 Тогда
        ТипПериода = Прав(Выражение, СтрДлина(Выражение) - СтрНайти(Выражение, Маркер) + 1 - СтрДлина(Маркер));    // Хвост справа
        ШаблонВыражения = ШаблоныВыражений.Получить(ТипПериода);
        Если ШаблонВыражения = Неопределено Тогда
            Сообщить("Не допускается использование границы периода " + ТипПериода + " в группировке");
            //Продолжить;    // Нет такой части даты
            Отказ = Истина;
        КонецЕсли; 
        ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
        Выражение = СтрШаблон(ШаблонВыражения, ИмяПоляДаты);
        ПолеМодифицировано    = Истина;
    КонецЕсли; 
    
    Маркер = ".ЧастиДат.";
    ДопустимыеЧастиДат = "МИНУТА, ЧАС, ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, КВАРТАЛ, ГОД, ДЕНЬНЕДЕЛИ, ДЕНЬГОДА";    // см. функции языка запросов, напр. МЕСЯЦ()
    Если СтрНайти(Выражение, Маркер) > 0 Тогда
        ТипПериода = Прав(Выражение, СтрДлина(Выражение) - СтрНайти(Выражение, Маркер) + 1 - СтрДлина(Маркер));    // Хвост справа
        Если СтрНайти(врег(ДопустимыеЧастиДат), врег(ТипПериода)) = 0 Тогда
            Сообщить("Не допускается использование части даты " + ТипПериода + " в группировке");
            //Продолжить;    // Нет такой части даты
            Отказ = Истина;
        КонецЕсли; 
        ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
        Выражение = СтрШаблон("%1(%2)", ВРЕГ(ТипПериода), ИмяПоляДаты);
        ПолеМодифицировано    = Истина;
    КонецЕсли; 
    #КонецОбласти    // ЧастиДат 
    
    Возврат Выражение;

КонецФункции // ПреобразоватьВыражениеПоляИзФорматаСКД()

// Получает таблицу значений по набору данных схемы компоновки или макета компоновки данных
//
// Параметры:
//  НаборДанных				 - Строка, НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных	 - Набор - источник колонок таблицы.
//		Если указана Строка, производится поиск набора данных в КоллекцияНаборовДанных по имени объекта
//  КоллекцияНаборовДанных	 - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных, Массив	 - Коллекция наборов данных, доступная к перебору циклом.
//		Указывается, если производится поиск набора.
// Вариант вызова:
//		НовыйТаблицаЗначенийПоНаборуДанных(Строка, НаборыДанныхСхемыКомпоновкиДанных)	 - Поиск набора данных по имени объекта.
//		НовыйТаблицаЗначенийПоНаборуДанных(НаборДанныхОбъектСхемыКомпоновкиДанных)		 - Формирование таблицы по указанному набору.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, сформированная по набору. Если набор не найден, будет возвращено Неопределено.
//
Функция НовыйТаблицаЗначенийПоНаборуДанных(Знач НаборДанных, КоллекцияНаборовДанных = Неопределено)
	
	Если ТипЗнч(НаборДанных) <> Тип("Строка")
		И ТипЗнч(НаборДанных) <> Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
		И ТипЗнч(НаборДанных) <> Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗнч(НаборДанных) = Тип("Строка") Тогда
		// Поиск по имени объекта
	
		Для каждого ТекущийНаборДанных Из КоллекцияНаборовДанных Цикл
			Если ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
				Или ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных")
				И ТекущийНаборДанных.ИмяОбъекта = НаборДанных Тогда
				
				НаборДанных = ТекущийНаборДанных;					
							
			    Прервать;
				
			ИначеЕсли ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
				Или ТипЗнч(ТекущийНаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
				
				ТаблицаПоНабору = НовыйТаблицаЗначенийПоНаборуДанных(НаборДанных, ТекущийНаборДанных.Элементы);	// Рекурсивный вызов для дочернего набора
				Если ТипЗнч(ТаблицаПоНабору) = Тип("ТаблицаЗначений") Тогда
					Возврат ТаблицаПоНабору;
				КонецЕсли; 
				
			КонецЕсли; 	
		КонецЦикла; 
	
	КонецЕсли; 
	
	ТаблицаПоНабору = Неопределено;
	
	Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
		Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
		
		ТаблицаПоНабору = Новый ТаблицаЗначений;
		Для каждого ПолеНабора Из НаборДанных.Поля Цикл
			
			Если ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных")
				или  ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхМакетаКомпоновкиДанных") Тогда
				
				ТаблицаПоНабору.Колонки.Добавить(ПолеНабора.Поле, ПолеНабора.ТипЗначения, ПолеНабора.Заголовок);	
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли;  
	
	Возврат ТаблицаПоНабору;

КонецФункции // НовыйТаблицаЗначенийПоНаборуДанных()

// Осуществляет поиск набора данных с указанным именем источника данных
//
// Параметры:
//  ОбластьПоиска	 - СхемаКомпоновкиДанных, МакетКомпоновкиДанных
//  ИмяОбъекта		 - Строка - Имя объекта - источника данных.
//
// Возвращаемое значение:
//   НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных - Если не найден - Неопределено.
//
Функция НайтиНаборыДанныхПоИсточникуДанных(ОбластьПоиска, ИмяОбъекта)

	НайденныеНаборы = Новый Массив;


	Если ТипЗнч(ОбластьПоиска) = Тип("СхемаКомпоновкиДанных") 
		Или ТипЗнч(ОбластьПоиска) = Тип("МакетКомпоновкиДанных") Тогда

		Возврат НайтиНаборДанныхПоИсточникуДанных(ОбластьПоиска.НаборыДанных, ИмяОбъекта);

	ИначеЕсли ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхСхемыКомпоновкиДанных") 
		Или ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхМакетаКомпоновкиДанных") Тогда

		Для каждого НаборДанных Из ОбластьПоиска Цикл
		
			Если (ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
				Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных"))
				И НаборыДанных.ИмяОбъекта = ИмяОбъекта Тогда

				НайденныеНаборы.Добавить(НаборыДанных);
			
			ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") 
				Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда

				НайденныеПодчиненныеНаборы =  НайтиНаборДанныхПоИсточникуДанных(НаборДанных.Элементы, ИмяОбъекта);
				Для каждого НайденныйНаборДанных Из НайденныеПодчиненныеНаборы Цикл
					НайденныеНаборы.Добавить(НайденныйНаборДанных);
				КонецЦикла;
				
			Иначе
				Продолжить;

			КонецЕсли;

		КонецЦикла;

	Иначе

		ВызватьИсключение "Параметр ОбластьПоиска: Неверный тип";

	КонецЕсли;

	Возврат НайденныеНаборы;

КонецФункции // НайтиНаборыДанныхПоИсточникуДанных

// Осуществляет поиск набора данных с указанным именем источника данных
//
// Параметры:
//  ОбластьПоиска	 - СхемаКомпоновкиДанных, МакетКомпоновкиДанных
//  ИмяОбъекта		 - Строка - Имя объекта - источника данных.
//
// Возвращаемое значение:
//   НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных - Если не найден - Неопределено.
//	
Функция НайтиНаборДанныхПоИсточникуДанных(ОбластьПоиска, ИмяОбъекта)

	НаборыПоИсточнику = НайтиНаборыДанныхПоИсточникуДанных(ОбластьПоиска, ИмяОбъекта);
	Если ЗначениеЗаполнено(НаборыПоИсточнику) Тогда
		Возврат НаборыПоИсточнику[0];
	КонецЕсли;

	Возврат Неопределено;

КонецФункции; // НайтиНаборДанныхПоИсточникуДанных()