
// Получает XML-текст макета компоновки данных
//
// Параметры:
//  МакетКомпоновкиДанных - МакетКомпоновкиДанных - Выводимый макет.
//
// Возвращаемое значение:
//  Строка - Текст макета компоновки данных в виде XML.
//
Функция ТекстМакетаКомпоновкиДанных(МакетКомпоновкиДанных)
  
  ЗаписьXML = Новый ЗаписьXML;
  ЗаписьXML.УстановитьСтроку();
  СериализаторXDTO.ЗаписатьXML(
	  ЗаписьXML, 
	  МакетКомпоновкиДанных, 
	  "dataComposition", 
	  "http://v8.1c.ru/8.1/data-composition-system/composition-template");
	  
  Возврат ЗаписьXML.Закрыть();
  
КонецФункции

// #СДЕЛАТЬ
//
// Преобразует поле из собственного формата СКД в формат, приемлемый для запроса.
//	Работает для таких выражений как НачалоМесяца(), Даты начала и конца, Части дат.
//
// Параметры:
//  ИмяПоля       -      - 
//  Выражение     -      - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПреобразоватьВыражениеПоляИзФорматаСКД(Знач Выражение, Отказ = Ложь)

    // В полях группировки могут встречаться поля СКД типа СрокОплаты.ЧастиДат.Месяц
    // Преобразуем такие поля в поля выражений запроса:
    #Область ЧастиДат
    ДопустимыеТипыПериодовСтрокой = "МИНУТА, ЧАС, ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, КВАРТАЛ, ГОД, ДЕКАДА, ПОЛУГОДИЕ";    // см. функцию языка запроса НАЧАЛОПЕРИОДА()
    ШаблоныВыражений = Новый Соответствие;
    ШаблоныВыражений.Вставить("НачалоМинуты",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "МИНУТА"));
    ШаблоныВыражений.Вставить("НачалоЧаса",            СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ЧАС"));
    ШаблоныВыражений.Вставить("НачалоДня",            СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ДЕНЬ"));
    ШаблоныВыражений.Вставить("НачалоНедели",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "НЕДЕЛЯ"));
    ШаблоныВыражений.Вставить("НачалоМесяца",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "МЕСЯЦ"));
    ШаблоныВыражений.Вставить("НачалоКвартала",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "КВАРТАЛ"));
    ШаблоныВыражений.Вставить("НачалоГода",            СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ГОД"));
    ШаблоныВыражений.Вставить("НачалоДекаты",        СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ДЕКАДА"));
    ШаблоныВыражений.Вставить("НачалоПолугодия",    СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ПОЛУГОДИЕ"));
    ДопустимыеТипыПериодов = Новый Массив;
    Для каждого Элемент Из ШаблоныВыражений Цикл
        ДопустимыеТипыПериодов.Добавить(Элемент.Ключ);
    КонецЦикла; 
    Для каждого ТипПериода Из ДопустимыеТипыПериодов Цикл
        ВыражениеПоля = ШаблоныВыражений.Получить(ТипПериода);
        ШаблоныВыражений.Вставить(СтрЗаменить(ТипПериода, "Начало", "Конец"), СтрЗаменить(ВыражениеПоля, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА"));                
    КонецЦикла;
    ДопустимыеТипыПериодов.Очистить();
    
    Маркер = ".ДатыНачала.";
    Если СтрНайти(Выражение, Маркер) > 0 Тогда
        ТипПериода = Прав(Выражение, СтрДлина(Выражение) - СтрНайти(Выражение, Маркер) + 1 - СтрДлина(Маркер));    // Хвост справа
        ШаблонВыражения = ШаблоныВыражений.Получить(ТипПериода);
        Если ШаблонВыражения = Неопределено Тогда
            Сообщить("Не допускается использование границы периода " + ТипПериода + " в группировке");
            //Продолжить;    // Нет такой части даты
            Отказ = Истина;
        КонецЕсли; 
        ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
        Выражение = СтрШаблон(ШаблонВыражения, ИмяПоляДаты);
        ПолеМодифицировано    = Истина;
    КонецЕсли; 
    
    Маркер = ".ДатыКонца.";
    Если СтрНайти(Выражение, Маркер) > 0 Тогда
        ТипПериода = Прав(Выражение, СтрДлина(Выражение) - СтрНайти(Выражение, Маркер) + 1 - СтрДлина(Маркер));    // Хвост справа
        ШаблонВыражения = ШаблоныВыражений.Получить(ТипПериода);
        Если ШаблонВыражения = Неопределено Тогда
            Сообщить("Не допускается использование границы периода " + ТипПериода + " в группировке");
            //Продолжить;    // Нет такой части даты
            Отказ = Истина;
        КонецЕсли; 
        ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
        Выражение = СтрШаблон(ШаблонВыражения, ИмяПоляДаты);
        ПолеМодифицировано    = Истина;
    КонецЕсли; 
    
    Маркер = ".ЧастиДат.";
    ДопустимыеЧастиДат = "МИНУТА, ЧАС, ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, КВАРТАЛ, ГОД, ДЕНЬНЕДЕЛИ, ДЕНЬГОДА";    // см. функции языка запросов, напр. МЕСЯЦ()
    Если СтрНайти(Выражение, Маркер) > 0 Тогда
        ТипПериода = Прав(Выражение, СтрДлина(Выражение) - СтрНайти(Выражение, Маркер) + 1 - СтрДлина(Маркер));    // Хвост справа
        Если СтрНайти(врег(ДопустимыеЧастиДат), врег(ТипПериода)) = 0 Тогда
            Сообщить("Не допускается использование части даты " + ТипПериода + " в группировке");
            //Продолжить;    // Нет такой части даты
            Отказ = Истина;
        КонецЕсли; 
        ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
        Выражение = СтрШаблон("%1(%2)", ВРЕГ(ТипПериода), ИмяПоляДаты);
        ПолеМодифицировано    = Истина;
    КонецЕсли; 
    #КонецОбласти    // ЧастиДат 
    
    Возврат Выражение;

КонецФункции // ПреобразоватьВыражениеПоляИзФорматаСКД()

// Получает таблицу значений по набору данных схемы компоновки или макета компоновки данных
//
// Параметры:
//  НаборДанных	 - НаборДанныхОбъектСхемыКомпоновкиДанных
//				 - НаборДанныхЗапросМакетаКомпоновкиДанных
//				 - НаборДанныхОбъектСхемыКомпоновкиДанных
//				 - НаборДанныхОбъектМакетаКомпоновкиДанных
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, сформированная по набору. Если набор не найден, будет возвращено Неопределено.
//
Функция НовыйТаблицаЗначенийПоНаборуДанных(Знач НаборДанных)
	
	ЭтоНаборЗапрос = ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") 
		Или ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных");
	ЭтоНаборОбъект = ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
		Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных");
	
	Если Не ЭтоНаборЗапрос И Не ЭтоНаборОбъект Тогда
		ВызватьИсключение "Параметр НаборДанных: Недопустимый тип";
	КонецЕсли; 
	
	ТаблицаПоНабору = Новый ТаблицаЗначений;

	Для каждого ПолеНабора Из НаборДанных.Поля Цикл
		
		Если ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных")
			или  ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхМакетаКомпоновкиДанных") Тогда
			
			ТаблицаПоНабору.Колонки.Добавить(ПолеНабора.Поле, ПолеНабора.ТипЗначения, ПолеНабора.Заголовок);	
			
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат ТаблицаПоНабору;

КонецФункции // НовыйТаблицаЗначенийПоНаборуДанных()

// Осуществляет поиск набора данных по имени рекурсивно
//
// Параметры:
//  НаборыДанных - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных
//	ИмяНабора 	 - Строка - Имя искомого набора
//
// Возвращаемое значение:
//  - НаборДанныхЗапросСхемыКомпоновкиДанных 
//	- НаборДанныхОбъектСхемыКомпоновкиДанных 
//	- НаборДанныхОбъединениеСхемыКомпоновкиДанных 
//  - НаборДанныхЗапросМакетаКомпоновкиДанных 
//	- НаборДанныхОбъектМакетаКомпоновкиДанных 
//	- НаборДанныхОбъединениеМакетаКомпоновкиДанных 
//	- Неопределено									 - Если набор не найден
//
Функция НайтиНаборДанныхРекурсивно(НаборыДанных, ИмяНабора)
	
	ЭтоКоллекцияНаборов = ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхСхемыКомпоновкиДанных") 
		Или ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхМакетаКомпоновкиДанных");
	Если Не ЭтоКоллекцияНаборов Тогда
		ВызватьИсключение "Параметр НаборыДанных: Недопустимый тип";
	КонецЕсли;

	НайденныйНабор = Неопределено;

	Для Каждого НаборДанных Из НаборыДанных Цикл
	
		Если НаборДанных.Имя = ИмяНабора Тогда
			Возврат НаборДанных;
		КонецЕсли;

		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
			Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда

			НайденныйНабор = НайтиНаборДанныхРекурсивно(НаборДанных.Элементы, ИмяНабора);
			Если НайденныйНабор <> Неопределено Тогда
				Возврат НайденныйНабор;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции // НайтиНаборДанныхРекурсивно()

// Осуществляет поиск набора данных с указанным именем объекта -- источника данных.
//
// Параметры:
//  НаборыДанных	 - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных
//  ИмяОбъекта		 - Строка - Имя объекта - источника данных.
//
// Возвращаемое значение:
//   НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных - Если не найден - Неопределено.
//
Функция НайтиНаборыДанныхПоИсточникуДанных(НаборыДанных, ИмяОбъекта)

	НайденныеНаборы = Новый Массив;

	ЭтоКоллекцияНаборов = ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхСхемыКомпоновкиДанных") 
		Или ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхМакетаКомпоновкиДанных");
	Если Не ЭтоКоллекцияНаборов Тогда
		ВызватьИсключение "Параметр НаборыДанных: Недопустимый тип";
	КонецЕсли;

	Для Каждого НаборДанных Из НаборыДанных Цикл
	
		Если (ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
			Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных"))
			И НаборыДанных.ИмяОбъекта = ИмяОбъекта Тогда

			НайденныеНаборы.Добавить(НаборыДанных);
		
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") 
			Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда

			НайденныеПодчиненныеНаборы =  НайтиНаборДанныхПоИсточникуДанных(НаборДанных.Элементы, ИмяОбъекта);
			Для каждого НайденныйНаборДанных Из НайденныеПодчиненныеНаборы Цикл
				НайденныеНаборы.Добавить(НайденныйНаборДанных);
			КонецЦикла;
			
		Иначе
			Продолжить;

		КонецЕсли;

	КонецЦикла;

	Возврат НайденныеНаборы;

КонецФункции // НайтиНаборыДанныхПоИсточникуДанных

// Осуществляет поиск набора данных с указанным именем источника данных
//
// Параметры:
//  НаборыДанных	 - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных
//  ИмяОбъекта		 - Строка - Имя объекта - источника данных.
//
// Возвращаемое значение:
//   НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных - Если не найден - Неопределено.
//	
Функция НайтиНаборДанныхПоИсточникуДанных(НаборыДанных, ИмяОбъекта)

	НаборыПоИсточнику = НайтиНаборыДанныхПоИсточникуДанных(НаборыДанных, ИмяОбъекта);
	Если ЗначениеЗаполнено(НаборыПоИсточнику) Тогда
		Возврат НаборыПоИсточнику[0];
	КонецЕсли;

	Возврат Неопределено;

КонецФункции; // НайтиНаборДанныхПоИсточникуДанных()