// Формирует текст выражения запроса, подставляя в него преданные параметры
//
// Параметры:
//  ИмяПоля		 - Строка		 - Поле
//  Вид			 - ВидСравнения	 -
//  ИмяПервогоПараметра - Строка		 - Строка, превращается в имя параметра
//  ИмяПервогоПараметра - Строка		 - Строка, превращается в имя параметра. Используется в интервалах
//
// Возвращаемое значение:
//  Строка - Строка вида "ИмяПоля В (&ИмяПараметра)"
//
Функция ВыражениеЗапросаСравнения(ИмяПоля, Вид, ИмяПервогоПараметра, ИмяВторогоПараметра = "") Экспорт

	Шаблоны = Новый Соответствие;
	Шаблоны.Вставить(ВидСравнения.Равно,					"%1 = %2");
	Шаблоны.Вставить(ВидСравнения.НеРавно,					"%1 <> %2");
	Шаблоны.Вставить(ВидСравнения.ВСписке,					"%1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВСписке,				"НЕ %1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.ВСписке,					"%1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВСписке,				"НЕ %1 В (%2)");
	Шаблоны.Вставить(ВидСравнения.ВСпискеПоИерархии,		"%1 В ИЕРАРХИИ (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВСпискеПоИерархии,		"НЕ %1 В ИЕРАРХИИ (%2)");
	Шаблоны.Вставить(ВидСравнения.ВИерархии,				"%1 В ИЕРАРХИИ (%2)");
	Шаблоны.Вставить(ВидСравнения.НеВИерархии,				"НЕ %1 В ИЕРАРХИИ (%2)");

	Шаблоны.Вставить(ВидСравнения.Больше,					"%1 > %2");
	Шаблоны.Вставить(ВидСравнения.БольшеИлиРавно,			"%1 >= %2");
	Шаблоны.Вставить(ВидСравнения.Меньше,					"%1 < %2");
	Шаблоны.Вставить(ВидСравнения.МеньшеИлиРавно,			"%1 <= %2");
	Шаблоны.Вставить(ВидСравнения.Интервал,					"%1 > %2 И %1 < %3");
	Шаблоны.Вставить(ВидСравнения.ИнтервалВключаяНачало,	"%1 >= %2 И %1 < %3");
	Шаблоны.Вставить(ВидСравнения.ИнтервалВключаяОкончание,	"%1 > %2 И %1 <= %3");
	Шаблоны.Вставить(ВидСравнения.ИнтервалВключаяГраницы,	"%1 МЕЖДУ %2 И %3");

	Шаблоны.Вставить(ВидСравнения.Содержит,		"%1 ПОДОБНО ""%""+%2+""%""");
	Шаблоны.Вставить(ВидСравнения.НеСодержит,	"НЕ %1 ПОДОБНО ""%""+%2+""%""");

	Шаблон = Шаблоны[Вид];
	Если Найти(Шаблон, "%3") > 0 Тогда
		Возврат СтрШаблон(Шаблон, ИмяПоля, ИмяПервогоПараметра, ИмяВторогоПараметра);
	КонецЕсли;
	Возврат СтрШаблон(Шаблон, ИмяПоля, ИмяПервогоПараметра);

КонецФункции // ВыражениеЗапросаСравнения()

// Формирует выражения получения пустого значения для использования в тексте запроса
//
// Параметры:
//  Значение - ОписаниеТипов, Тип, Произвольный	 - Значение, которое приводится к выражению запроса
//
// Возвращаемое значение:
//   - Строка	- Выражение запроса
//
Функция ПустоеЗначениеДляВыраженияЗапроса(Знач Значение) Экспорт

	Если Ложь Тогда ОписаниеТипов = Новый ОписаниеТипов КонецЕсли;

	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		ОписаниеТипов = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
		Типы = Новый Массив;
		Типы.Добавить(Значение);
		ОписаниеТипов = Новый ОписаниеТипов(Типы);
	Иначе
		Типы.Добавить(ТипЗнч(Значение));
		ОписаниеТипов = Новый ОписаниеТипов(Типы);
	КонецЕсли;

	Если ОписаниеТипов.Типы().Количество() > 1 Тогда
		Возврат "НЕОПРЕДЕЛЕНО";
	КонецЕсли;

	ПустоеЗначение = ОписаниеТипов.ПривестиЗначение();

	Если ТипЗнч(ПустоеЗначение) = Тип("Число")			Тогда Возврат "0"					КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Строка")			Тогда Возврат """"""				КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Булево")			Тогда Возврат "ЛОЖЬ"				КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Дата")			Тогда Возврат "ДАТАВРЕМЯ(1, 1, 1)"	КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Неопределено")	Тогда Возврат "НЕОПРЕДЕЛЕНО"		КонецЕсли;
	Если ТипЗнч(ПустоеЗначение) = Тип("Null")			Тогда Возврат "NULL"				КонецЕсли;

	Менеджеры = Новый Соответствие;
	Менеджеры.Вставить(Справочники,				"Справочник");
	Менеджеры.Вставить(Документы,				"Документ");
	Менеджеры.Вставить(Перечисления,			"Перечисление");
	Менеджеры.Вставить(ПланыВидовХарактеристик,	"ПланВидовХарактеристик");
	Менеджеры.Вставить(ПланыСчетов,				"ПланСчетов");
	Менеджеры.Вставить(ПланыВидовРасчета,		"ПланВидовРасчета");
	Менеджеры.Вставить(ПланыОбмена,				"ПланОбмена");
	Менеджеры.Вставить(БизнесПроцессы,			"БизнесПроцесс");
	Менеджеры.Вставить(Задачи,					"Задача");

	ТипЗначения = ТипЗнч(ПустоеЗначение);

	Для каждого Менеджер Из Менеджеры Цикл
		Если Менеджер.Ключ.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
			Возврат СтрШаблон("ЗНАЧЕНИЕ(%1.%2.ПустаяСсылка)", Менеджер.Значение, ПустоеЗначение.Метаданные().Имя);
		КонецЕсли;
	КонецЦикла;

	Возврат "НЕОПРЕДЕЛЕНО";

КонецФункции // ПустоеЗначениеДляВыраженияЗапроса()
