
// Выгружает строки из узла дерева значений в таблицу значений
//
// Параметры:
//  Узел				 - ДеревоЗначений		 - Дерево, чьи подчиненные элементы будут выгружены. 
//						 - СтрокаДереваЗначений	 - Строка, чьи подчиненные элементы будут выгружены.
//  Рекурсивно			 - Булево				 - Рекурсивная выгрузка. 
//												Если Ложь - будут выгружены только подчиненные строки переданного узла 
//												(или корневые строки переданого дерева).
//  ИмяКолонкиРодитель	 - Строка				 - Колонка, содержащая ссылки в этой же таблице на строки, являющиеся родителями выгруженных.
//												Для строк корневого уровня не заполняется.       
//												Используется, если Рекурсивно = Истина.
//												Тип колонки: СтрокаТаблицыЗначений
//  ТаблицаЗначений		 - ТаблицаЗначений		 - (служебный) Заполняемая таблица. 
// 
// Возвращаемое значение:
//	ТаблицаЗначений - Полученная таблица
//
Функция ВыгрузитьКоллекциюСтрокДереваЗначений(Узел, Рекурсивно = Ложь, ИмяКолонкиРодитель = "Родитель", ТаблицаЗначений = Неопределено) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		
		УзелЭтоДеревоЗначений = ТипЗнч(Узел) = Тип("ДеревоЗначений");
		ДеревоЗначений = ?(УзелЭтоДеревоЗначений, Узел, Узел.Вледелец());
		ТаблицаЗначений = Новый ТаблицаЗначений;
	    Для каждого Колонка Из ДеревоЗначений.Колонки Цикл
			ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина); 
		КонецЦикла; 	
		Если Рекурсивно Тогда                                  
			ТипыКолонкиРодитель = Новый Массив;
			ТипыКолонкиРодитель.Добавить(Тип("СтрокаТаблицыЗначений"));
			ТипыКолонкиРодитель.Добавить(Тип("Null"));
			ОписаниеТиповСтрокаТаблицыЗначений = Новый ОписаниеТипов(ТипыКолонкиРодитель);
			ТаблицаЗначений.Колонки.Добавить(ИмяКолонкиРодитель, ОписаниеТиповСтрокаТаблицыЗначений);
		КонецЕсли;
	
	КонецЕсли;                                                                                       
	
	Если Рекурсивно И ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		СтрокаРодитель = ТаблицаЗначений[ТаблицаЗначений.Количество() - 1];
	Иначе
		СтрокаРодитель = Неопределено;
	КонецЕсли;
	Для каждого СтрокаДерева Из Узел.Строки Цикл
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
		Если Рекурсивно И СтрокаРодитель <> Неопределено Тогда
			СтрокаТаблицы[ИмяКолонкиРодитель] = СтрокаРодитель;
		КонецЕсли;  
		Если Рекурсивно Тогда
		    ВыгрузитьКоллекциюСтрокДереваЗначений(СтрокаДерева, Рекурсивно, ИмяКолонкиРодитель, ТаблицаЗначений);		
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;

КонецФункции // ВыгрузитьКоллекциюСтрокДереваЗначений() 

// Получает различные значения указанных полей дерева значений.
//
// Параметры:
//  Узел		 - ДеревоЗначений	 - Дерево значений
//  ИмяКолонки	 - Строка			 - Имена получаемых полей
//  Значения	 - Неопределено		 - (служебный)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Полученные значения.
//
Функция РазличныеЗначенияКолонкиДереваЗначений(Узел, ИмяКолонки, Значения = Неопределено) Экспорт
	
	ЭтоНачалоРекурсии = Значения = Неопределено;

	Если ТипЗнч(Узел) = Тип("СтрокаДереваЗначений") Тогда
		
		Значения.Вставить(Узел[ИмяКолонки]);
		Для каждого Ветвь Из Узел.Строки Цикл
			РазличныеЗначенияКолонкиДереваЗначений(Ветвь, ИмяКолонки, Значения)
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(Узел) = Тип("ДеревоЗначений") Тогда
		
		Значения = Новый Соответствие;
		
		Для каждого Ветвь Из Узел.Строки Цикл
			РазличныеЗначенияКолонкиДереваЗначений(Ветвь, ИмяКолонки, Значения);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Узел) = Тип("Строка") и ЭтоАдресВременногоХранилища(Узел) Тогда
		
		Возврат РазличныеЗначенияКолонкиДереваЗначений(ПолучитьИзВременногоХранилища(Узел), ИмяКолонки);
		
	КонецЕсли; 
	
	Если ЭтоНачалоРекурсии Тогда // Формируем результирующий массив
		
		МассивЗначений = Новый Массив;
		Для каждого Элемент Из Значения Цикл
			МассивЗначений.Добавить(Элемент.Ключ);
		КонецЦикла; 
		
		Возврат МассивЗначений;
			
	КонецЕсли; 
	
	Возврат Значения;

КонецФункции // РазличныеЗначенияКолонкиДереваЗначений()

// Получает адресацию конечных листьев, содержащих значения определенной колонки
//
// Параметры:
//  Узел		 - ДеревоЗначений, СтрокаДереваЗначений	 - Дерево значений, или его строка
//	ИмяКолонки	 - Строка	 - Имя колонки, содержащей перечень исходных значений
//  ТолькоЛистья - Булево	 - Если Истина - то расположение значений получается только для листьев дерева значений
// 
// Возвращаемое значение:
//  Соответствие - Тип ключа соответствует типу значений в колонке, Значение - Массив, содержащий узлы коллекции.
//
Функция РасположениеЗначенийКолонкиДереваЗначенийРекурсивно(Узел, ИмяКолонки, ТолькоЛистья = Ложь) Экспорт

	Расположение = Новый Соответствие;	// {Произвольный; Массив:СтрокаДереваЗначений}

	Для каждого Ветвь Из Узел.Строки Цикл

		ЭтоЛист = не ЗначениеЗаполнено(Ветвь.Строки);

		Если ЭтоЛист или не ТолькоЛистья Тогда
			Если Расположение[Ветвь[ИмяКолонки]] = Неопределено Тогда
				Расположение[Ветвь[ИмяКолонки]] = Новый Массив;
			КонецЕсли;
			Расположение[Ветвь[ИмяКолонки]].Добавить(Ветвь);
		КонецЕсли;

		Для каждого Элемент Из РасположениеЗначенийКолонкиДереваЗначенийРекурсивно(Ветвь, ТолькоВидимые, ТолькоДоступные) Цикл
			РасположениеЗначения = Расположение.Получить(Элемент.Ключ);
			Если РасположениеЗначения = Неопределено Тогда
				Расположение.Вставить(Элемент.Ключ, Элемент.Значение);
			Иначе
				Для каждого Лист Из Элемент.Значение Цикл
					РасположениеЗначения.Добавить(Лист);	
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла; 	
	
	Возврат Расположение;

КонецФункции // РасположениеЗначенийКолонкиДереваЗначенийРекурсивно()
