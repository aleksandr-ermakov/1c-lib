// Проверяет строку с использованием регулярного выражения без использования внешних компонент.
// Методика: https://infostart.ru/1c/articles/464971/
//
// Параметры:
//	Строка			 - Строка		 - Проверяемая строка.
//	Шаблон			 - Строка		 - Регулярное выражение.
//	ШаблоныПовтИсп	 - Соответствие	 - (служебный) Для повторного использования, ускорения массовой обработки. Элемент:
//		* Ключ		 - Строка		 - Шаблон
//		* Значение	 - ОбъектXDTO
//
// Возвращаемое значение:
//	Булево - Если строка соответствует шаблону - Истина, в противном случае - Ложь.
//
Функция ПроверитьСтрокуРегулярнымВыражением(Строка, Шаблон, ШаблоныПовтИсп = Неопределено) Экспорт

	Если ШаблоныПовтИсп = Неопределено Тогда
		ШаблоныПовтИсп = Новый Соответствие;
	КонецЕсли;

	ТестирующийОбъект = ШаблоныПовтИсп[Шаблон];
	Если ТестирующийОбъект = Неопределено Тогда
	
		ПространствоИмен = "regexp-testing-namespace";
		ИмяОбъекта = "testObj";
		ИмяСвойства = "testProp";
		ШаблонМодели = 
		"<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
		|<package targetNamespace=""%1"">
		|<valueType name=""testType"" base=""xs:string"">
		|<pattern>%4</pattern>
		|</valueType>
		|<objectType name=""%2"">
		|<property xmlns:d4p1=""%1"" name=""%3"" type=""d4p1:testType""/>
		|</objectType>
		|</package>
		|</Model>";
		ТекстМодели = СтрШаблон(
			ШаблонМодели, 
			ПространствоИмен,	// %1
			ИмяОбъекта,			// %2
			ИмяСвойства,		// %3
			Шаблон				// %4
		);

		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ТекстМодели);

		Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
		ТестФабрикаXDTO = Новый ФабрикаXDTO(Модель);
		ТестПакетXDTO = ТестФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
		ТестирующийОбъект = ТестФабрикаXDTO.Создать(ТестПакетXDTO.Получить(ИмяОбъекта));

		ШаблоныПовтИсп[Шаблон] = ТестирующийОбъект;

	КонецЕсли;

    Попытка
        ТестирующийОбъект[ИмяСвойства] = Строка;
        Возврат Истина;
    Исключение
        Возврат Ложь;
    КонецПопытки;
    
КонецФункции // ПроверитьСтрокуРегулярнымВыражением()

#Область ИспользованиеВнешнихКомпонент

// Проверяет строку на соответствие регулярному выражению
// с использованием внешнeй компоненты VBScript.RegExp
//
// Параметры:	
//	Строка					 - Строка - Проверяемая строка.
//	Шаблон					 - Строка - Регулярное выражение
//	ВнешняяКомпонентаПовтИсп - COMОбъект - (служебный) Компонента для повторного использования
//	ИгнорироватьРегистр		 - Булево - Производить поиск без учетом регистра символов.
//
// Возвращаемое значение:
//	Булево - Истина, если строка соответствует регулярному выражению
//
Функция ПроверитьСтрокуВнешнейКомпонентой(
	Строка, 
	Шаблон, 
	ВнешняяКомпонентаПовтИсп = Неопределено,
	Знач ИгнорироватьРегистр = Истина) Экспорт

	ПодключитьВнешнююКомпонентуПроверки(ВнешняяКомпонентаПовтИсп);
	ВнешняяКомпонентаПовтИсп.Pattern = Шаблон;
	ВнешняяКомпонентаПовтИсп.IgnoreCase = ИгнорироватьРегистр;
	ВнешняяКомпонентаПовтИсп.Multiline = Истина;	// Проверяем строку целиком.
	Возврат ВнешняяКомпонентаПовтИсп.Test(Строка);

КонецФункции // ПроверитьСтрокуВнешнейКомпонентой()

// Производит поиск первого совпадения по регулярному выражению
// с использованием внешнeй компоненты VBScript.RegExp.
// Работает аналогично функции СтрНайти()
// Синтаксис выражений: https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/scripting-articles/ms974570(v=msdn.10)
//
// Параметры:	
//	Строка					 - Строка - Проверяемая строка.
//	Шаблон					 - Строка	 - Регулярное выражение
//	Направление				 - НаправлениеПоиска - Указывает позицию в строке, с которой начинается поиск.
//	НачальнаяПозиция		 - Число	 - Указывает позицию в строке, с которой начинается поиск.
//										 Допускаются значения от 1 до количества символов в строке, 
//										 в которой выполняется поиск.
//	НомерСовпадения			 - Число	 - Указывает номер Совпадения искомой подстроки в исходной строке.
//	ВнешняяКомпонентаПовтИсп - COMОбъект - (служебный) Компонента для повторного использования
//	ИгнорироватьРегистр		 - Булево	 - Производить поиск без учетом регистра символов.
//	Многострочно			 - Булево	 - Многострочный режим.
//											Если Ложь, Якоря начала и конца строки будут отрабатывать на каждой строке.
//
// Возвращаемое значение:
//	Число - Позиция первого знака найденной подстроки. 
//			Нумерация символов в строке начинается с 1. 
//			Если строка не содержит указанной подстроки, то возвращается 0.
//
Функция НайтиСовпадениеВнешнейКомпонентой(
	Строка, 
	Шаблон, 
	Знач Направление		 = Неопределено,
	Знач НачальнаяПозиция	 = Неопределено,
	Знач НомерСовпадения		 = 1,
	ВнешняяКомпонентаПовтИсп = Неопределено,
	Знач ИгнорироватьРегистр = Истина,
	Знач Многострочно		 = Ложь) Экспорт

	Если Направление = Неопределено Тогда
		Направление = НаправлениеПоиска.СНачала;
	КонецЕсли;
	Если ТипЗнч(Направление) <> Тип("НаправлениеПоиска") Тогда
		ВызватьИсключение "Параметр НаправлениеПоиска: Ожидается тип НаправлениеПоиска";
	КонецЕсли;

	Если НачальнаяПозиция = Неопределено Тогда
		НачальнаяПозиция = ?(Направление = НаправлениеПоиска.СНачала, 1, СтрДлина(Строка));
	КонецЕсли;

	ЭтоПоискСНачала	 = (Направление = НаправлениеПоиска.СНачала);
	Если ТипЗнч(НачальнаяПозиция) <> Тип("Число") Тогда
		ВызватьИсключение "Параметр НачальнаяПозиция: Ожидается тип Число";
	ИначеЕсли НачальнаяПозиция < 0 Тогда
		ВызватьИсключение "Параметр НачальнаяПозиция: Начальная позиция не может быть отрицательной";
	ИначеЕсли НачальнаяПозиция > СтрДлина(Строка) Тогда
		ВызватьИсключение "Параметр НачальнаяПозиция: Значение превышает длину строки";
	ИначеЕсли ТипЗнч(НомерСовпадения) <> Тип("Число") Тогда
		ВызватьИсключение "Параметр НомерСовпадения: Ожидается тип Число";
	ИначеЕсли НомерСовпадения < 1 Тогда
		ВызватьИсключение "Параметр НомерСовпадения: Значение должно быть больше или равным 1";
	ИначеЕсли ЭтоПоискСНачала И НачальнаяПозиция > 1 Тогда
		// Сокращаем область поиска
		СтрокаДляАнализа = Сред(Строка, НачальнаяПозиция);
		Смещение = НачальнаяПозиция - 1;
	Иначе
		СтрокаДляАнализа = Строка;
		Смещение = 0;
	КонецЕсли;

	ЭтоПоискСКонца	 = (Направление = НаправлениеПоиска.СКонца);

	Глобально = (НомерСовпадения > 1) Или ЭтоПоискСКонца;
	Совпадения = СовпаденияВнешнейКомпонентой(
		СтрокаДляАнализа, 
		Шаблон, 
		ВнешняяКомпонентаПовтИсп,
		Глобально,
		ИгнорироватьРегистр,
		Многострочно
	);

	Если ЭтоПоискСКонца Тогда
		Для ИнвИндекс = - Совпадения.ВГраница() По 0 Цикл
			ТекИндекс = - ИнвИндекс;
			Совпадение = Совпадения[ТекИндекс];
			Если Совпадение.Позиция > НачальнаяПозиция Тогда
				Совпадения.Удалить(ТекИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Совпадения.Количество() < НомерСовпадения Тогда
		Возврат 0;
	КонецЕсли;

	Если ЭтоПоискСНачала Тогда
		Индекс = НомерСовпадения - 1;
	Иначе
		Индекс = Совпадения.ВГраница() - НомерСовпадения + 1;
	КонецЕсли;
	Совпадение = Совпадения[Индекс];
	ПозицияСовпадения = Совпадение.Позиция;

	Возврат ПозицияСовпадения;

КонецФункции // НайтиСовпадениеВнешнейКомпонентой()

// Производит поиск совпадений по регулярному выражению
// с использованием внешнeй компоненты VBScript.RegExp.
// Синтаксис выражений: https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/scripting-articles/ms974570(v=msdn.10)
//
// Параметры:	
//	Строка					 - Строка - Проверяемая строка.
//	Шаблон					 - Строка - Регулярное выражение
//	ВнешняяКомпонентаПовтИсп - COMОбъект - (служебный) Компонента для повторного использования
//	Глобально				 - Булево - Если Истина - производится поиск всех вхождений; Ложь - только первого.
//	ИгнорироватьРегистр		 - Булево - Производить поиск без учетом регистра символов.
//	Многострочно			 - Булево - Многострочный режим.
//										Если Ложь, Якоря начала и конца строки будут отрабатывать на каждой строке.
//
// Возвращаемое значение:
//	Массив из Структура:
//		* Значение	 - Строка	 - Найденное Совпадение
//		* Позиция	 - Число	 - Позиция первого символа найденного Совпадения (Номер, начиная с 1)
//		* Длина		 - Число	 - Длина найденного Совпадения
//
Функция СовпаденияВнешнейКомпонентой(
	Строка, 
	Шаблон, 
	ВнешняяКомпонентаПовтИсп = Неопределено,
	Знач Глобально			 = Истина,
	Знач ИгнорироватьРегистр = Истина,
	Знач Многострочно		 = Ложь) Экспорт

	ПодключитьВнешнююКомпонентуПроверки(ВнешняяКомпонентаПовтИсп);
	ВнешняяКомпонентаПовтИсп.Pattern	 = Шаблон;
	ВнешняяКомпонентаПовтИсп.Global		 = Глобально;
	ВнешняяКомпонентаПовтИсп.IgnoreCase	 = ИгнорироватьРегистр;
	ВнешняяКомпонентаПовтИсп.Multiline	 = Многострочно;
	Matches = ВнешняяКомпонентаПовтИсп.Execute(Строка);

	Совпадения = Новый Массив;
	Для каждого Match Из Matches Цикл
		Совпадение = Новый Структура;
		Совпадение.Вставить("Значение",	 Match.Value);
		Совпадение.Вставить("Позиция",	 Match.FirstIndex + 1);
		Совпадение.Вставить("Длина",	 Match.Length);
		Совпадения.Добавить(Совпадение);
	КонецЦикла;

	Возврат Совпадения;

КонецФункции // СовпаденияВнешнейКомпонентой()

// Производит замену совпадений по регулярному выражению
// с использованием внешнeй компоненты VBScript.RegExp.
// Синтаксис выражений: https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/scripting-articles/ms974570(v=msdn.10)
//
// Параметры:	
//	Строка					 - Строка - Проверяемая строка.
//	Шаблон					 - Строка - Регулярное выражение.
//	Замена					 - Строка - Строка, заменяющая совпадения.
//	ВнешняяКомпонентаПовтИсп - COMОбъект - (служебный) Компонента для повторного использования
//	Глобально				 - Булево - Если Истина - производится поиск всех вхождений; Ложь - только первого.
//	ИгнорироватьРегистр		 - Булево - Производить поиск без учетом регистра символов.
//	Многострочно			 - Булево - Многострочный режим.
//										Если Ложь, Якоря начала и конца строки будут отрабатывать на каждой строке.
//
// Возвращаемое значение:
//	Строка - Результат замены.
//
Функция ЗаменитьСовпаденияВнешнейКомпонентой(
	Строка, 
	Шаблон,
	Замена, 
	ВнешняяКомпонентаПовтИсп = Неопределено,
	Знач Глобально			 = Истина,
	Знач ИгнорироватьРегистр = Истина,
	Знач Многострочно		 = Ложь) Экспорт

	ПодключитьВнешнююКомпонентуПроверки(ВнешняяКомпонентаПовтИсп);
	ВнешняяКомпонентаПовтИсп.Pattern	 = Шаблон;
	ВнешняяКомпонентаПовтИсп.Global		 = Глобально;
	ВнешняяКомпонентаПовтИсп.IgnoreCase	 = ИгнорироватьРегистр;
	ВнешняяКомпонентаПовтИсп.Multiline	 = Многострочно;
	РезультатЗамены = ВнешняяКомпонентаПовтИсп.Replace(Строка, Замена);

	Возврат РезультатЗамены;

КонецФункции // ЗаменитьСовпаденияВнешнейКомпонентой()

// Подключает внешнюю компоненту VBScript.RegExp
//
// Параметры:
//	ВнешняяКомпонентаПовтИсп - COMОбъект - Подключаемая компонента
//
Процедура ПодключитьВнешнююКомпонентуПроверки(ВнешняяКомпонентаПовтИсп)

	Если ВнешняяКомпонентаПовтИсп = Неопределено Тогда
		Попытка
			ВнешняяКомпонентаПовтИсп = Новый COMОбъект("VBScript.RegExp"); // BSLLS:UsingObjectNotAvailableUnix-off
		Исключение
			ВызватьИсключение "Не удалось подключить внешнюю компоненту проверки регулярных выражений";
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ПодключитьВнешнююКомпонентуПроверки()

#КонецОбласти // ИспользованиеВнешнихКомпонент

