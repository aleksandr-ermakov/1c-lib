
// Получает XML-текст макета компоновки данных
//
// Параметры:
//  МакетКомпоновкиДанных - МакетКомпоновкиДанных - Выводимый макет.
//
// Возвращаемое значение:
//  Строка - Текст макета компоновки данных в виде XML.
//
Функция ТекстМакетаКомпоновкиДанных(МакетКомпоновкиДанных) Экспорт
  
  ЗаписьXML = Новый ЗаписьXML;
  ЗаписьXML.УстановитьСтроку();
  СериализаторXDTO.ЗаписатьXML(
	  ЗаписьXML, 
	  МакетКомпоновкиДанных, 
	  "dataComposition", 
	  "http://v8.1c.ru/8.1/data-composition-system/composition-template");
	  
  Возврат ЗаписьXML.Закрыть();
  
КонецФункции

// Преобразует поле из собственного формата СКД в формат, приемлемый для запроса.
//	Работает для таких выражений как НачалоМесяца(), Даты начала и конца, Части дат.
//
// Параметры:
//  Выражение     - Строка, ПолеКомпоновкиДанных - Выражение поля компоновки данных
// 
// Возвращаемое значение:
//  Строка - Полученное выражение запроса.
//
// Пример:
//	
//
Функция ВыражениеЗапросаИзВыраженияСКД(Знач Выражение) Экспорт

	ВыражениеЗапроса = Строка(Выражение);

	МаркерыГраницДаты = Новый Массив;
	МаркерыГраницДаты.Добавить(".ДатыНачала.");
 	МаркерыГраницДаты.Добавить(".ДатыКонца.");
	Для каждого Маркер Из МаркерыГраницДаты Цикл

		Если СтрНайти(Выражение, Маркер) > 0 Тогда

			// В полях группировки могут встречаться поля СКД типа СрокОплаты.ЧастиДат.Месяц
			// Преобразуем такие поля в поля выражений запроса:
			ШаблоныВыражений = Новый Соответствие;
			#Область ШаблоныВыражений
			ШаблоныВыражений.Вставить("НачалоМинуты",	 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "МИНУТА"));
			ШаблоныВыражений.Вставить("НачалоЧаса",		 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ЧАС"));
			ШаблоныВыражений.Вставить("НачалоДня",		 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ДЕНЬ"));
			ШаблоныВыражений.Вставить("НачалоНедели",	 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "НЕДЕЛЯ"));
			ШаблоныВыражений.Вставить("НачалоМесяца",	 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "МЕСЯЦ"));
			ШаблоныВыражений.Вставить("НачалоКвартала",	 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "КВАРТАЛ"));
			ШаблоныВыражений.Вставить("НачалоГода",		 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ГОД"));
			ШаблоныВыражений.Вставить("НачалоДекады",	 СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ДЕКАДА"));
			ШаблоныВыражений.Вставить("НачалоПолугодия", СтрШаблон("НАЧАЛОПЕРИОДА(%1, %2)", "%1", "ПОЛУГОДИЕ"));
			
			ШаблоныВыражений.Вставить("КонецМинуты",	 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "МИНУТА"));
			ШаблоныВыражений.Вставить("КонецЧаса",		 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "ЧАС"));
			ШаблоныВыражений.Вставить("КонецДня",		 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "ДЕНЬ"));
			ШаблоныВыражений.Вставить("КонецНедели",	 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "НЕДЕЛЯ"));
			ШаблоныВыражений.Вставить("КонецМесяца",	 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "МЕСЯЦ"));
			ШаблоныВыражений.Вставить("КонецКвартала",	 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "КВАРТАЛ"));
			ШаблоныВыражений.Вставить("КонецГода",		 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "ГОД"));
			ШаблоныВыражений.Вставить("КонецДекады",	 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "ДЕКАДА"));
			ШаблоныВыражений.Вставить("КонецПолугодия",	 СтрШаблон("КОНЕЦПЕРИОДА(%1, %2)", "%1", "ПОЛУГОДИЕ"));
			#КонецОбласти // ШаблоныВыражений

			ТипПериода = Сред(Выражение, СтрНайти(Выражение, ".", НаправлениеПоиска.СКонца) + 1);	// Хвост справа
			ШаблонВыражения = ШаблоныВыражений.Получить(ТипПериода);
			Если ШаблонВыражения = Неопределено Тогда
				ВызватьИсключение СтрШаблон("Неизвестный вариант даты в выражении %1", Выражение);
			КонецЕсли; 
			ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
			ВыражениеЗапроса = СтрШаблон(ШаблонВыражения, ИмяПоляДаты);

			Возврат ВыражениеЗапроса;

		КонецЕсли; 

	КонецЦикла;
       
    Маркер = ".ЧастиДат.";
    Если СтрНайти(Выражение, Маркер) > 0 Тогда

		ТипПериода = Сред(Выражение, СтрНайти(Выражение, ".", НаправлениеПоиска.СКонца) + 1);	// Хвост справа
		ДопустимыеЧастиДат = "МИНУТА, ЧАС, ДЕНЬ, НЕДЕЛЯ, МЕСЯЦ, КВАРТАЛ, ГОД, ДЕНЬНЕДЕЛИ, ДЕНЬГОДА";
		Если СтрНайти(ВРег(ДопустимыеЧастиДат), ВРег(ТипПериода)) = 0 Тогда
            ВызватьИсключение СтрШаблон("Недопустимая часть даты в выражении %1", Выражение);
        КонецЕсли; 
        ИмяПоляДаты = Лев(Выражение, СтрНайти(Выражение, Маркер) - 1);
        ВыражениеЗапроса = СтрШаблон("%1(%2)", ВРег(ТипПериода), ИмяПоляДаты);

		Возврат ВыражениеЗапроса;

    КонецЕсли; 
    
    Возврат ВыражениеЗапроса;

КонецФункции // ВыражениеЗапросаИзВыраженияСКД()

// Получает таблицу значений по набору данных схемы компоновки или макета компоновки данных
//
// Параметры:
//  НаборДанных	 - НаборДанныхОбъектСхемыКомпоновкиДанных
//				 - НаборДанныхЗапросМакетаКомпоновкиДанных
//				 - НаборДанныхОбъектСхемыКомпоновкиДанных
//				 - НаборДанныхОбъектМакетаКомпоновкиДанных
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, сформированная по набору. 
//					В качестве имени колонок таблицы используются имена полей набора.
//
Функция НовыйТаблицаЗначенийПоНаборуДанных(Знач НаборДанных) Экспорт
	
	ЭтоНаборЗапрос = ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") 
		Или ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных");
	ЭтоНаборОбъект = ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
		Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных");
	
	Если Не ЭтоНаборЗапрос И Не ЭтоНаборОбъект Тогда
		ВызватьИсключение "Параметр НаборДанных: Недопустимый тип";
	КонецЕсли; 
	
	ТаблицаПоНабору = Новый ТаблицаЗначений;

	Для каждого ПолеНабора Из НаборДанных.Поля Цикл
		
		Если ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных")
			или  ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхМакетаКомпоновкиДанных") Тогда
			
			ТаблицаПоНабору.Колонки.Добавить(ПолеНабора.Поле, ПолеНабора.ТипЗначения, ПолеНабора.Заголовок);	
			
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат ТаблицаПоНабору;

КонецФункции // НовыйТаблицаЗначенийПоНаборуДанных()

// Осуществляет поиск набора данных по имени рекурсивно
//
// Параметры:
//  НаборыДанных - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных
//	ИмяНабора 	 - Строка - Имя искомого набора
//
// Возвращаемое значение:
//  - НаборДанныхЗапросСхемыКомпоновкиДанных 
//	- НаборДанныхОбъектСхемыКомпоновкиДанных 
//	- НаборДанныхОбъединениеСхемыКомпоновкиДанных 
//  - НаборДанныхЗапросМакетаКомпоновкиДанных 
//	- НаборДанныхОбъектМакетаКомпоновкиДанных 
//	- НаборДанныхОбъединениеМакетаКомпоновкиДанных 
//	- Неопределено									 - Если набор не найден
//
Функция НайтиНаборДанныхРекурсивно(НаборыДанных, ИмяНабора) Экспорт
	
	ЭтоКоллекцияНаборов = ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхСхемыКомпоновкиДанных") 
		Или ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхМакетаКомпоновкиДанных");
	Если Не ЭтоКоллекцияНаборов Тогда
		ВызватьИсключение "Параметр НаборыДанных: Недопустимый тип";
	КонецЕсли;

	НайденныйНабор = Неопределено;

	Для Каждого НаборДанных Из НаборыДанных Цикл
	
		Если НаборДанных.Имя = ИмяНабора Тогда
			Возврат НаборДанных;
		КонецЕсли;

		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
			Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда

			НайденныйНабор = НайтиНаборДанныхРекурсивно(НаборДанных.Элементы, ИмяНабора);
			Если НайденныйНабор <> Неопределено Тогда
				Возврат НайденныйНабор;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции // НайтиНаборДанныхРекурсивно()

// Осуществляет поиск набора данных с указанным именем объекта - источника данных.
//
// Параметры:
//  НаборыДанных	 - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных
//  ИмяОбъекта		 - Строка - Имя объекта - источника данных.
//
// Возвращаемое значение:
//   НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных - Если не найден - Неопределено.
//
// Пример:
//	НайтиНаборыДанныхПоИмениОбъекта(СхемаКомпоновкиДанных.НаборыДанных, "ВнешнийНаборДанных");
//
Функция НайтиНаборыДанныхПоИмениОбъекта(НаборыДанных, ИмяОбъекта) Экспорт

	НайденныеНаборы = Новый Массив;

	ЭтоКоллекцияНаборов = ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхСхемыКомпоновкиДанных") 
		Или ТипЗнч(ОбластьПоиска) = Тип("НаборыДанныхМакетаКомпоновкиДанных");
	Если Не ЭтоКоллекцияНаборов Тогда
		ВызватьИсключение "Параметр НаборыДанных: Недопустимый тип";
	КонецЕсли;

	Для Каждого НаборДанных Из НаборыДанных Цикл
	
		Если (ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
			Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных"))
			И НаборыДанных.ИмяОбъекта = ИмяОбъекта Тогда

			НайденныеНаборы.Добавить(НаборыДанных);
		
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") 
			Или ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда

			НайденныеПодчиненныеНаборы =  НайтиНаборДанныхПоИсточникуДанных(НаборДанных.Элементы, ИмяОбъекта);
			Для каждого НайденныйНаборДанных Из НайденныеПодчиненныеНаборы Цикл
				НайденныеНаборы.Добавить(НайденныйНаборДанных);
			КонецЦикла;
			
		Иначе
			Продолжить;

		КонецЕсли;

	КонецЦикла;

	Возврат НайденныеНаборы;

КонецФункции // НайтиНаборыДанныхПоИмениОбъекта

// Осуществляет поиск набора данных с указанным именем объекта - источника данных.
//
// Параметры:
//  НаборыДанных	 - НаборыДанныхСхемыКомпоновкиДанных, НаборыДанныхМакетаКомпоновкиДанных
//  ИмяОбъекта		 - Строка - Имя объекта - источника данных.
//
// Возвращаемое значение:
//   НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъектМакетаКомпоновкиДанных - Если не найден - Неопределено.
//	
Функция НайтиНаборДанныхПоИмениОбъекта(НаборыДанных, ИмяОбъекта) Экспорт

	НаборыПоИсточнику = НайтиНаборыДанныхПоИмениОбъекта(НаборыДанных, ИмяОбъекта);
	Если ЗначениеЗаполнено(НаборыПоИсточнику) Тогда
		Возврат НаборыПоИсточнику[0];
	КонецЕсли;

	Возврат Неопределено;

КонецФункции; // НайтиНаборДанныхПоИмениОбъекта()