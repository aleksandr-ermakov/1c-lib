
// Преобразовывает Дерево значений в Таблицу значений
//
// Параметры:
//	УзелДерева		 - ДеревоЗначений, СтрокаДереваЗначений - Дерево значений или его ветка, которую следует преобразовать.
//	ТолькоЛистья	 - Булево - Если Истина, в таблицу будут выгружены только строки дерева значений,
//								не имеющие подчиненных строк.
//	ТаблицаЗначений	 - ТаблицаЗначений - (служебный) Содержит выходную таблицу значений
//
Функция ТаблицаЗначенийИзДереваЗначений(УзелДерева, ТолькоЛистья = Ложь, ТаблицаЗначений = Неопределено)

	Если ТипЗнч(УзелДерева) <> Тип("СтрокаДереваЗначений") И ТипЗнч(УзелДерева) <> Тип("ДеревоЗначений") Тогда
		ВызватьИсключение "Параметр УзелДерева: Ожидается тип СтрокаДереваЗначений или ДеревоЗначений";
	КонецЕсли;

	ЭтоСтрокаДерева = ТипЗнч(УзелДерева) = Тип("СтрокаДереваЗначений");
	ЭтоКореньДерева = Не ЭтоСтрокаДерева;
	ЭтоЛистДерева = Не ЗначениеЗаполнено(УзелДерева.Строки);

	Если ТипЗнч(ТаблицаЗначений) <> Тип("ТаблицаЗначений") Тогда

		ТаблицаЗначений = Новый ТаблицаЗначений;
		Если ЭтоКореньДерева Тогда
			Колонки = УзелДерева.Колонки;
		Иначе
			Колонки = УзелДерева.Владелец().Колонки;
		КонецЕсли;
		Для каждого Колонка Из Колонки Цикл
			ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		КонецЦикла;

	КонецЕсли;

	Если ЭтоСтрокаДерева 
		И (ЭтоЛистДерева Или Не ТолькоЛистья) Тогда

		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			СтрокаТаблицы[Колонка.Имя] = УзелДерева[Колонка.Имя];
		КонецЦикла;
		
	КонецЕсли;

	Для каждого СтрокаДерева Из УзелДерева.Строки Цикл
		ТаблицаЗначенийИзДереваЗначений(СтрокаДерева, ТолькоЛистья, ТаблицаЗначений)
	КонецЦикла;

	Возврат ТаблицаЗначений;

КонецФункции // ТаблицаЗначенийИзДереваЗначений()

Процедура ТаблицаЗначенийИзСоответствия_Автотест()
	
	ПереченьАвтотестов = Новый Массив;	// Массив структур, см. НовыйАвтотестМетода() 
	
	#Область Пример
	//ИмяМетода = "ИмяИсполняемогоМетода";
	//
	//Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	//Автотест.Описание				 = "Описание автотеста";
	//Автотест.Использование		 = Истина;
	//#Область ОписаниеАвтотеста
	//Автотест.Использование		 = Истина;
	//Автотест.ИмяМетода			 = ИмяМетода;
	//Автотест.ПараметрыВызова.Добавить("Параметр метода");
	//Автотест.ОжидаетсяЗначение	 = Ложь;
	//Автотест.ОжидаемоеЗначение	 = Неопределено;
	//Автотест.КодПроверкиРезультата = "";
	//Автотест.ОжидаетсяИсключение	 = Истина;
	//#КонецОбласти // ОписаниеАвтотеста 
	#КонецОбласти // Пример 
	
	ИмяМетода = "ТаблицаЗначенийИзСоответствия";
	
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Исключение, если передано не соответствие";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Автотест.ПараметрыВызова.Добавить(Неопределено);
	Автотест.ОжидаетсяЗначение	 = Ложь;
	//Автотест.ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
	
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Пустая таблица из пустого соответствия";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Автотест.ПараметрыВызова.Добавить(Новый Соответствие);
	Автотест.ОжидаетсяЗначение	 = Истина;
	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Ключ");
	ОжидаемоеЗначение.Колонки.Добавить("Значение");
	Автотест.ОжидаемоеЗначение = ОжидаемоеЗначение;
	//Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
	
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Шаблонная таблица при вызове без имён колонок";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Автотест.ПараметрыВызова.Добавить(Новый Соответствие);
	Автотест.ОжидаетсяЗначение	 = Истина;
	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Ключ");
	ОжидаемоеЗначение.Колонки.Добавить("Значение");
	Автотест.ОжидаемоеЗначение = ОжидаемоеЗначение;
	//Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
		
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Простая таблица";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Соответствие = Новый Соответствие;
	Соответствие[123] = "АБВ";
	Соответствие[456] = "ГДЕ";
	Автотест.ПараметрыВызова.Добавить(Соответствие);
	Автотест.ПараметрыВызова.Добавить("Цифры, Буквы");
	Автотест.ОжидаетсяЗначение	 = Истина;
	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	//ОжидаемоеЗначение.Колонки.Добавить("Цифры",	 Новый ОписаниеТипов("Число"));
	//ОжидаемоеЗначение.Колонки.Добавить("Буквы", Новый ОписаниеТипов("Строка"));
	ОжидаемоеЗначение.Колонки.Добавить("Цифры",	 Новый ОписаниеТипов("Число"));
	ОжидаемоеЗначение.Колонки.Добавить("Буквы", Новый ОписаниеТипов("Строка"));
	Для каждого ЭлементСответствия Из Соответствие Цикл
		Строка = ОжидаемоеЗначение.Добавить();
		Строка[0] = ЭлементСответствия.Ключ;
		Строка[1] = ЭлементСответствия.Значение;
	КонецЦикла; 
	Автотест.ОжидаемоеЗначение = ОжидаемоеЗначение;
	//Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
		
	Автотест(ПереченьАвтотестов);
	
КонецПроцедуры

// Создаёт типизированную таблицу значений из соответствия
//
// Параметры:
//  Соответствие - Соответствие	 - Исходное соответствие.
//  ИменаКолонок - Строка		 - Имена двух колонок новой таблицы через запятую.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Сформированная таблица
//
Функция ТаблицаЗначенийИзСоответствия(Соответствие, Знач ИменаКолонок = "Ключ, Значение")
	
	Если ТипЗнч(Соответствие) <> Тип("Соответствие") Тогда
		ВызватьИсключение "Параметр Соответствие: Ожидается тип Соответствие";
	ИначеЕсли ТипЗнч(ИменаКолонок) <> Тип("Строка") Тогда
		ВызватьИсключение "Параметр ИменаКолонок: Ожидается тип Строка";
	ИначеЕсли Не СтрНайти(ИменаКолонок, ",") Тогда
		ВызватьИсключение "Параметр ИменаКолонок: Ожидается два имени через запятую";
	КонецЕсли; 
	
	ИменаКолонок = СтрРазделить(ИменаКолонок, ", ", Ложь);
	ЗначенияКлючей			 = Новый Массив;
	ЗначенияЗначений		 = Новый Массив;
	ТипыКлючей				 = Новый Массив;
	ТипыЗначений			 = Новый Массив;
	ПредыдущийТипКлюча		 = Неопределено;
	ПредыдущийТипЗначения	 = Неопределено;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для каждого ЭлементСоответствия Из Соответствие Цикл
		
		ТаблицаЗначений.Добавить();
		ЗначенияКлючей.Добавить(ЭлементСоответствия.Ключ);
		ЗначенияЗначений.Добавить(ЭлементСоответствия.Значение);
		
		ТипКлюча = ТипЗнч(ЭлементСоответствия.Ключ);
		Если ТипКлюча <> ПредыдущийТипКлюча
			И ТипыКлючей.Найти(ТипКлюча) = Неопределено Тогда
			ТипыКлючей.Добавить(ТипКлюча);
		КонецЕсли; 
		ПредыдущийТипКлюча = ТипКлюча;
		
		ТипЗначения = ТипЗнч(ЭлементСоответствия.Значение);
		Если ТипЗначения <> ПредыдущийТипЗначения
			И ТипыЗначений.Найти(ТипЗначения) = Неопределено Тогда
			ТипыЗначений.Добавить(ТипЗначения);
		КонецЕсли; 
		ПредыдущийТипЗначения = ТипЗначения;
		
	КонецЦикла; 
	
	ТаблицаЗначений.Колонки.Добавить(ИменаКолонок[0], Новый ОписаниеТипов(ТипыКлючей));	
	ТаблицаЗначений.Колонки.Добавить(ИменаКолонок[1], Новый ОписаниеТипов(ТипыЗначений));	
	ТаблицаЗначений.ЗагрузитьКолонку(ЗначенияКлючей,	 0);
	ТаблицаЗначений.ЗагрузитьКолонку(ЗначенияЗначений,	 1);
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ТаблицаЗначенийИзМассива_Автотест()

	ПереченьАвтотестов = Новый Массив;	// Массив структур, см. НовыйАвтотестМетода() 

	ИмяМетода = "ТаблицаЗначенийИзМассива";
	
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Исключение, если передан не массив";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Автотест.ПараметрыВызова.Добавить(Неопределено);
	Автотест.ОжидаетсяЗначение	 = Ложь;
	//Автотест.ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
	
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Простая таблица";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Массив = Новый Массив;
	Массив.Добавить(123);
	Массив.Добавить("АБВ");
	Массив.Добавить(ТекущаяДатаСеанса());
	Автотест.ПараметрыВызова.Добавить(Массив);
	Автотест.ПараметрыВызова.Добавить("Колонка");
	Автотест.ОжидаетсяЗначение	 = Истина;
	Типы = Новый Массив;
	Типы.Добавить(Тип("Число"));
	Типы.Добавить(Тип("Строка"));
	Типы.Добавить(Тип("Дата"));
	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Колонка", Новый ОписаниеТипов(Типы));
	Для каждого ЭлементМассива Из Массив Цикл
		ОжидаемоеЗначение.Добавить()[0] = ЭлементМассива;	
	КонецЦикла; 
	Автотест.ОжидаемоеЗначение = ОжидаемоеЗначение;
	//Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
		
	Автотест(ПереченьАвтотестов);
	
КонецПроцедуры	// ТаблицаЗначенийИзМассива_Автотест()

// Создаёт типизированную таблицу значений из массива.
//
// Параметры:
//  Массив		 - Массив - Исходный массив.
//  ИмяКолонки	 - Строка - Имя единственной колонки создавамой таблицы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результирующая таблица
//
Функция ТаблицаЗначенийИзМассива(Массив, ИмяКолонки = "Значение")

	Если ТипЗнч(Массив) <> Тип("Массив") Тогда
		ВызватьИсключение "Параметр Массив: Ожидается тип Массив";
	ИначеЕсли ТипЗнч(ИмяКолонки) <> Тип("Строка") Тогда
		ВызватьИсключение "Параметр ИменаКолонок: Ожидается тип Строка";
	КонецЕсли; 
	
	ТипыЗначений			 = Новый Массив;
	ПредыдущийТипЗначения	 = Неопределено;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для каждого ЭлементМассива Из Массив Цикл
		
		ТаблицаЗначений.Добавить();
		
		ТипЗначения = ТипЗнч(ЭлементМассива);
		Если ТипЗначения <> ПредыдущийТипЗначения
			И ТипыЗначений.Найти(ТипЗначения) = Неопределено Тогда
			ТипыЗначений.Добавить(ТипЗначения);
		КонецЕсли; 
		ПредыдущийТипЗначения = ТипЗначения;
		
	КонецЦикла; 
	
	ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ТипыЗначений));	
	ТаблицаЗначений.ЗагрузитьКолонку(Массив, 0);

	Возврат ТаблицаЗначений;
	
КонецФункции // ТаблицаЗначенийИзМассива()

Процедура ТаблицаЗначенийИзСпискаЗначений_Автотест()

	ПереченьАвтотестов = Новый Массив;	// Массив структур, см. НовыйАвтотестМетода() 

	ИмяМетода = "ТаблицаЗначенийИзСпискаЗначений";
	
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Исключение, если передан не список значений";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Автотест.ПараметрыВызова.Добавить(Неопределено);
	Автотест.ОжидаетсяЗначение	 = Ложь;
	//Автотест.ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
	
	Автотест = Автотест_ДобавитьАвтотестМетода(ПереченьАвтотестов);
	Автотест.Описание = "Простая таблица";
	#Область ОписаниеАвтотеста
	Автотест.ИмяМетода = ИмяМетода;
	Список = Новый СписокЗначений;
	Список.Добавить(123, "Цифры", Истина);
	Список.Добавить("АБВ", "Буквы", Ложь);
	Список.Добавить(ТекущаяДатаСеанса(), "Дата", Истина);
	Автотест.ПараметрыВызова.Добавить(Список);
	Автотест.ОжидаетсяЗначение	 = Истина;
	Типы = Новый Массив;
	Типы.Добавить(Тип("Число"));
	Типы.Добавить(Тип("Строка"));
	Типы.Добавить(Тип("Дата"));
	ОжидаемоеЗначение	 = Новый ТаблицаЗначений;
	ОжидаемоеЗначение.Колонки.Добавить("Значение",		 Новый ОписаниеТипов(Типы));
	ОжидаемоеЗначение.Колонки.Добавить("Представление",	 Новый ОписаниеТипов("Строка"));	
	ОжидаемоеЗначение.Колонки.Добавить("Пометка",		 Новый ОписаниеТипов("Булево"));	
	Для каждого ЭлементСписка Из Список Цикл
		СтрокаТаблицы = ОжидаемоеЗначение.Добавить();
		СтрокаТаблицы.Значение		 = ЭлементСписка.Значение;
		СтрокаТаблицы.Представление	 = ЭлементСписка.Представление;
		СтрокаТаблицы.Пометка			 = ЭлементСписка.Пометка;
	КонецЦикла; 
	Автотест.ОжидаемоеЗначение = ОжидаемоеЗначение;
	//Автотест.ОжидаетсяИсключение = Истина;
	#КонецОбласти // ОписаниеАвтотеста 
		
	Автотест(ПереченьАвтотестов);

КонецПроцедуры

// Создаёт типизированную таблицу значений из списка значений.
//
// Параметры:
//  СписокЗначений	 - СписокЗначений - Исходный список значений.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результирующая таблица. Колонки:
//		* Значение		 - Произвольный
//		* Представление	 - Строка
//		* Пометка		 - Булево
//
Функция ТаблицаЗначенийИзСпискаЗначений(СписокЗначений)

	Если ТипЗнч(СписокЗначений) <> Тип("СписокЗначений") Тогда
		ВызватьИсключение "Параметр СписокЗначений: Ожидается тип СписокЗначений";
	КонецЕсли; 
	
	Значения		 = Новый Массив;
	Представления	 = Новый Массив;
	Пометки			 = Новый Массив;
	
	ТипыЗначений			 = Новый Массив;
	ПредыдущийТипЗначения	 = Неопределено;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для каждого ЭлементСписка Из СписокЗначений Цикл
		
		Значения.Добавить(ЭлементСписка.Значение);
		Представления.Добавить(ЭлементСписка.Представление);
		Пометки.Добавить(ЭлементСписка.Пометка);
		
		ТаблицаЗначений.Добавить();
		
		ТипЗначения = ТипЗнч(ЭлементСписка.Значение);
		Если ТипЗначения <> ПредыдущийТипЗначения
			И ТипыЗначений.Найти(ТипЗначения) = Неопределено Тогда
			ТипыЗначений.Добавить(ТипЗначения);
		КонецЕсли; 
		ПредыдущийТипЗначения = ТипЗначения;
		
	КонецЦикла; 
	
	ТаблицаЗначений.Колонки.Добавить("Значение",		 Новый ОписаниеТипов(ТипыЗначений));	
	ТаблицаЗначений.Колонки.Добавить("Представление",	 Новый ОписаниеТипов("Строка"));	
	ТаблицаЗначений.Колонки.Добавить("Пометка",			 Новый ОписаниеТипов("Булево"));	
	ТаблицаЗначений.ЗагрузитьКолонку(Значения,		 0);
	ТаблицаЗначений.ЗагрузитьКолонку(Представления,	 1);
	ТаблицаЗначений.ЗагрузитьКолонку(Пометки,		 2);

	Возврат ТаблицаЗначений;
	
КонецФункции // ТаблицаЗначенийИзМассива()

// Формирует массив структур с именами колонок таблицы.
//
// Параметры:
//	ТаблицаЗначений	 - ТаблицаЗначений	 - Исходная таблица.
//	ИменаКолонок	 - Строка			 - Имена колонок таблицы, и ключей выгружаемых структур.
//
// Возвращаемое значение:
//	Массив из Структура
//
Функция МассивСтруктурИзТаблицыЗначений(ТаблицаЗначений, Знач ИменаКолонок = Неопределено) Экспорт
	
	Если ИменаКолонок = Неопределено Тогда
		ИменаКолонок = Новый Массив;
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ИменаКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		ИменаКолонок = СтрСоединить(ИменаКолонок, ", ");
	ИначеЕсли ТипЗнч(ИменаКолонок) = Тип("Строка") Тогда
		Для каждого ИмяКолонки Из ИменаКолонок Цикл
			Если ТаблицаЗначений.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ВызватьИсключение СтрШаблон("Таблица не содержит колонки с именем %1", ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВызватьИсключение "Параметр ИменаКолонок: Ожидается Строка";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТаблицаЗначений) 
		Или ПустаяСтрока(ИменаКолонок) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	МассивСтруктур = Новый Массив;
	Для каждого СтрокаТаблицы Из Коллекция Цикл
		Структура = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(Структура, СтрокаТаблицы);
		МассивСтруктур.Добавить(Структура);
	КонецЦикла;

	Возврат МассивСтруктур; 

КонецФункции // МассивСтруктурИзТаблицыЗначений()