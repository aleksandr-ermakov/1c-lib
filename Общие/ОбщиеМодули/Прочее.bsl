
#Область ПрограммныйИнтерфейс

// Вычисляет хеш-сумму от значения.
//
// Параметры:
//   Значение			 - Строка			 
//						 - ДвоичныеДанные
//						 - Поток	 
//						 - Произвольный		 - Сериализуемое значение. 
//												Хеш будет вычислен от XML-представления значения.
//   ВидФункции			 - ХешФункция		 - Вид хеш-функции. Значение по умолчанию: CRC32
//
//  Возвращаемое значение:
//   - Число			 - Значение функции CRC32.
//	 - ДвоичныеДанные	 - Значение прочих хеш-функций
//
Функция ХешСумма(Значение, Знач ВидФункции = Неопределено) Экспорт

	Если ВидФункции = Неопределено Тогда
		ВидФункции = ХешФункция.CRC32;
	КонецЕсли;
	Если ТипЗнч(ВидФункции) <> Тип("ХешФункция") Тогда
		ВызватьИсключение "Параметр ВидФункции: Ожидается тип ХешФункция";
	КонецЕсли;

	Хеширование = Новый ХешированиеДанных(ВидФункции);
	Если ТипЗнч(Значение) = Тип("Строка") 
		Или ТипЗнч(Значение) = Тип("ДвоичныеДанные")
		Или ТипЗнч(Значение) = Тип("Поток") Тогда
		
		Хеширование.Добавить(Значение);

	Иначе

		// Сериализация:
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		Попытка
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение);
			ЗначениеСтрокой = ЗаписьXML.Закрыть();
		Исключение
			ВызватьИсключение "Не удалось сериализовать Значение";
		КонецПопытки;

		Хеширование.Добавить(ЗначениеСтрокой);
		
	КонецЕсли;
	
	Результат = Хеширование.ХешСумма;

	Возврат Результат;

КонецФункции // ХешСумма()

// Преобразует в строку результат хеширования данных (см. ХешированиеДанных.ХешСумма)
//
// Параметры: 
//	ХешСумма - Число, ДвоичныеДанные - Результат хеширования.
//
// Возвращаемое значение:
//	Строка - Шестнадцатеричное представление хеш-суммы.
//
Функция ХешСуммаСтрокойBase16(ХешСумма) Экспорт

	Если ТипЗнч(ХешСумма) = Тип("Число") Тогда	// Результат CRC32

		// Перевод в HEX:
		РазмерБайтРезультатаCRC32 = 4;
		Буфер = Новый БуферДвоичныхДанных(РазмерБайтРезультатаCRC32, ПорядокБайтов.BigEndian);
		Буфер.ЗаписатьЦелое32(0, Результат);
		ХешСуммаСтрокой = ПолучитьHexСтрокуИзБуфераДвоичныхДанных(Буфер);
	
	ИначеЕсли ТипЗнч(ХешСумма) = Тип("ДвоичныеДанные") Тогда

		ХешСуммаСтрокой = ПолучитьHexСтрокуИзДвоичныхДанных(Результат);

	Иначе

		ВызватьИсключение "Параметр ХешСумма: Неожиданный тип значения";

	КонецЕсли;

	Возврат ХешСуммаСтрокой;
	
КонецФункции

// Шифрует переданное значение через помещение в Zip-архив.
//
// Параметры:
//	Значение 		 - Произвольный			 - Шифруемое значение.
//	КлючШифрования	 - Строка				 - Пароль шифрования (от Zip-архива).
//	МетодШифрования	 - МетодШифрованияZIP	 - По умолчанию: AES128.
//	МетодСжатия		 - МетодСжатияZIP		 - По умолчанию: Копирование.
//	УровеньСжатия	 - УровеньСжатияZIP		 - По умолчанию: Оптимальный.
//
// Возвращаемое значение:
//	ДвоичныеДанные	 - Zip-архив. Может быть расшифрован функцией РасшифроватьЗначениеZip().
//
Функция ЗашифроватьЗначениеZip(
	Значение, 
	КлючШифрования, 
	МетодШифрования = Неопределено, 
	МетодСжатия = Неопределено, 
	УровеньСжатия = Неопределено) Экспорт

	Если МетодШифрования = Неопределено Тогда
		МетодШифрования = МетодШифрованияZIP.AES128;
	КонецЕсли;
	Если ТипЗнч(МетодШифрования) <> Тип("МетодШифрованияZIP") Тогда
		ВызватьИсключение "Параметр МетодШифрования: Ожидается тип МетодШифрованияZIP";
	КонецЕсли;
	
	Если МетодСжатия = Неопределено Тогда
		МетодСжатия = МетодСжатияZIP.Копирование;
	КонецЕсли;
	Если ТипЗнч(МетодСжатия) <> Тип("МетодСжатияZIP") Тогда
		ВызватьИсключение "Параметр МетодСжатия: Ожидается тип МетодСжатияZIP";
	КонецЕсли;

	Если УровеньСжатия = Неопределено Тогда
		УровеньСжатия = УровеньСжатияZIP.Оптимальный;
	КонецЕсли;
	Если ТипЗнч(УровеньСжатия) <> Тип("УровеньСжатияZIP") Тогда
		ВызватьИсключение "Параметр УровеньСжатия: Ожидается тип УровеньСжатияZIP";
	КонецЕсли;

	ИмяФайлаЗначения = ПолучитьИмяВременногоФайла();
	Если Не ЗначениеВФайл(ИмяФайлаЗначения, Значение) Тогда
		ВызватьИсключение "Не удалось поместить значение в файл.";
	КонецЕсли;

	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	Архив = Новый ЗаписьZipФайла(ИмяФайлаАрхива, КлючШифрования, , МетодСжатия, УровеньСжатия, МетодШифрования);
	Архив.Добавить(ИмяФайлаЗначения);
	Архив.Записать();
	ЗашифрованноеЗначение = Новый ДвоичныеДанные(ИмяФайлаАрхива);

	УдалитьФайлы(ИмяФайлаЗначения);
	УдалитьФайлы(ИмяФайлаАрхива);

	Возврат ЗашифрованноеЗначение;

КонецФункции

// Расшифровывает значение, помещенное в Zip-архив.
//
// Параметры:
//	ЗашифрованноеЗначение	 - ДвоичныеДанные - см. ЗашифроватьЗначениеZip().
//	КлючШифрования			 - Строка - Пароль шифрования.
//
// Возвращаемое значение:
//	Произвльный - Результат расшифровки. Если ключ указан неверно, будет выброшено исключение.
//
Функция РасшифроватьЗначениеZip(ЗашифрованноеЗначение, КлючШифрования) Экспорт

	Поток = ЗашифрованноеЗначение.ОткрытьПотокДляЧтения();
	ИмяФайлаЗначения = ПолучитьИмяВременногоФайла();
	Архив = Новый ЧтениеZipФайла(Поток, КлючШифрования);
	ЭлементАрхива = Архив.Элементы[0];
	Попытка
		Архив.Извлечь(ЭлементАрхива, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ИмяФайлаЗначения = КаталогВременныхФайлов() + ПолучитьРазделительПути() + ЭлементАрхива.Имя;
		Значение = ЗначениеИзФайла(ИмяФайлаЗначения);
		УдалитьФайлы(ИмяФайлаЗначения);
	Исключение
		ВызватьИсключение "Не удалось расшифровать значение.";
	КонецПопытки;

	Возврат Значение;
		
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс